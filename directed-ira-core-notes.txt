cheetah is used in src/association-webhook, src/fees-processor, src/hubspot-tickets-processor, src/orion, src/services, src/stripe-webhook, src/tasks

webhook: 
Suppose we have the paypal account and pur firent send us money
So whenever we recieve the transaction we get a text message in our mobile stating we have receive the funds. 
So to send text message or the email we could use third party application
So in this case receiving money in the account is the event which sends the message to our phone so our phone number is the unique url
So hopefully ion this project we are using the stripe web hook which handles the user for the payments and once the payments are done the user is being redirected to our application on success page

stripe-fee-import
Service that reads the ar-stripe-upload1.xlsx file and create the invoice based on the data in the excel file.
It also checks if the customer already exists in the stripeClient.customers objects, otherwise it just create the customer. Then it generates invoice for the customer


global $info_log, $deburg_log, $is_sandbox, $error_log, $errors;

argv is command line argument passed to run the script
if argv[2] is empty
{
    info file = argv[1] 
    getting the infofile and logging that file
    then decoding the data from the file into json object
    then decode that json object into php object object(stdClass)#1 (3) { ["Peter"]=> int(35) ["Ben"]=> int(37) ["Joe"]=> int(43) }
    if (phpObj or phpObj[transaction] or phpObj[transaction][id] is empty) 
        {return error} 
    else {set global variables as 
    	$transaction_id = $data["transaction"]["id"];
		$transaction_status = $data["metadata"]["targetStateKey"];
    }
}
otherwise we already have some values in $transaction_id, $transaction_status

if (transaction_status is not "submitted" or transaction_status is not "submitted" and transaction_status !== 'pendingSubmission') {
    log error
}

////// Main Logic ///////
where transaction_status is "submitted"
{
    initialize nova_api, cheetah_api, hubspot_api
    getting the data from the nova by passing the transaction_id and getting this as data from nova:
    '{
        transactionItems {
            data
            vulcanKey
        }
        templateVersion {
            templateId
        }
        transactionRecipients {
            activatedAt
            entityId
            noticeName
            noticeEmail
            vulcanKey
            entity {
                createdAt
                email
                id
                name
                phone
                settings
                type
            }		
        }
    }' 
    // if there is error getting transaction report error

    transaction = json_decode($transaction["content"], TRUE);
    Then processes an array of transaction items within the $transaction array based on vulcanKey
    Total of 8 different data form getting and settings
    For 2 forms set & get minorDob, minorSsn, minorLastName, minorFirstName in the entityInformation
    For 1 form set & get mailingAccountStateSuccesor, mailingAccountZipSuccesor, mailingAccountAddressSuccesor, mailingAccountCountrySuccesor, mailingAccountPlanSuccesor, email, dob401 in the entityInformation
    For 5 forms set & get invoice in the fees form
    Our transaction object at this point


    $transaction = [
        "data" => [
            "transaction" => [
                "transactionItems" => [
                    // Index 0 funding
                    [
                        vulcanKey = 'funding',
                        data = {
                            ....
                        }
                    ],
                    // Index 1 confirm
                    [
                        vulcanKey = 'confirm',
                        data = {
                            ....
                        }
                    ],
                    // Index 2 entityInformation
                    [
                        vulcanKey = 'entityInformation',
                        "data" => [
                            // For 2 Forms
                            // get
                            minorDob,
                            minorFirstName,
                            minorLastName,
                            minorSsn,
                            // set
                            ssn,
                            dob,
                            firstName,
                            lastName,

                            // For 1 Form
                            // get
                            mailingAccountStateSuccesor,
                            mailingAccountZipSuccesor,
                            mailingAccountAddressSuccesor,
                            mailingAccountCountrySuccesor,
                            mailingAccountPlanSuccesor, 
                            email, 
                            dob401,
                            // set
                            legalAddressRegion,
                            legalAddressPostalCode,
                            legalAddressStreet,
                            legalAddressCountry,
                            legalAddressCity,
                            prEmail,
                            dob
                        ],
                    ],
                    // Index 3 benes
                    [
                        vulcanKey = 'benes',
                        data = {
                            ....
                        }
                    ],
                    // Index 4 fees
                    [
                        vulcanKey = 'fees',
                        data => [
                            For other 5 forms
                            accountFeesOption => "invoice"
                        ]
                    ]

                ],
                templateVersion => [
                    templateId: String
                ],
                transactionRecipients => [
                    // index 0 
                    [
                        entity: [
                            prEmail
                        ]
                    ]
                ]
            ]
        ]
    ];



    if (vulcanKey at index 4 of transactionItems is NOT SET) then we set it to fees

    if (legalAddressCountry at data at index 2 of transactionItems is SET && legalAddressCountry == "PR") then we set legalAddressCountry to PuertoRico
    then we log information and 
    if (legalAddressRegion at data at index 2 of transactionItems && transactionItems == 'notApplicable') then set transactionItems = ""

    then we encode transaction back to json object and log it

    if ($transaction_status === "pendingSubmission") {
        if (empty($transaction["data"])) then log error
        $main_transaction_info = $transaction["data"]["transaction"]["transactionRecipients"][0]["entity"];

        then we get the hubspot_contacts based on main_transaction_info['prEmail]
        hubspot_contacts_params have several fields we get from hubspot_api

        if hubspot_contacts is empty then we create the contact


    } else if ($transaction_status === "submitted") {
        name_and_address = $cheetah_api->getNameAndAddresses from main_transaction_info['ssn']
        cheetah_ssn_match = false or SSN contact get from name_and_address
		
        if ($transaction_status === "submitted") {
            // if ssn_match is false get info from nova and then create at cheetah
            if (cheetah_ssn_match == false) {
                log error
                name_address_params = cheetah_api->getNameAndAddressesParamsFromNova
                create_response = $cheetah_api->createNameAndAddress(
                    $name_address_params
                );
            } else {
                then we get name_address_params from nova and then 
                $name_address_params = $cheetah_api->getNameAndAddressesParamsFromNova
                $update_response = $cheetah_api->updateNameAndAddress
            }
        }

        hubspot_contacts = hubspot_api->searchContacts(main_transaction_info)
        log error if hubspot_contacts is empty or there is error

        if ($transaction_status === "submitted") {
            log main_transaction_info
            $interested_party_NA_id = FALSE;
            if (
					main_transaction_info["ipFirstName"] is !Empty
					&& disable_ip is FALSE
			) {
                name_and_addresses_ip = cheetah_api->getNameAndAddresses( main_transaction_info["ipSsn"] )
                log error if name_and_addresses_ip is empty
                cheetah_ipSsn_match = false or SSN contact get from name_and_address
                if ($cheetah_match_ip === FALSE) {
                    log error info
                    name_address_params_ip = $cheetah_api->getInterestedPartyNameAndAddressesParamsFromNova(main_transaction_info)
                    create_response = $cheetah_api->createNameAndAddress($name_address_params_ip);
                }

                create_account_params = cheetah_api->getCreateAccountParamsFromNova(transaction["data"]["transaction"]);
                response = $cheetah_api->createAccount($create_account_params);
                log error if response[error] is not Empty
                if (response[error] is Empty)
                {
                    get_created_account = $cheetah_api->getAccount($account_id);
                    // Updating account settings with nova etc
                }
                and then logging info account_id, account_number
                setup account_relationships
				logInfo("account_relationships", $account_relationships);
                
                update addAccountRelationship using cheetah api
                response = $cheetah_api->addAccountRelationship

                get existing_fee_settings from cheetah_api->getAccountFeeSettings2

                account_db = $cheetah_api->getAccountDB

                update existing_fee_settings
                then create hubspot_contacts

                if (empty($hubspot_contacts)) hubspot_api->createContact
                else hubspot_api->updateContact

                setting up financial_account_params
                hubspot_api->createFinancialObject(financial_account_params)
                response = hubspot_api->createAssociation

                if (main_transaction_info) then send zapier request

                if ($transaction_status === "submitted" && !empty($main_transaction_info["ipFirstName"]) && isset($main_transaction_info["copyIP"]) && !empty($main_transaction_info["copyIP"])) { 
                    intrested_party_contacts = hubspot_api->searchContacts(main_transaction_info)
                    setup ip_hubspot_contact_params
                    
                    if empty hubspot_api->createContact(ip_hubspot_contact_params)
                    
                    else hubspot_api->updateContact($ip_hubspot_contact_id,$ip_hubspot_contact_params)

                    if (ip_hubspot_contact_id) response = hubspot_api->createAssociation

                }

            }

        } else {
            log error
        }
    }
}




/////////////////// After call

Figure the inputs to cheetah_api api endpoints and hubspot api endpoints

CHEETAH API

1. /api​/v6​/NameAndAddresses​/{identityRecordId} GET
Get NameAndAddress (Identity Record) information.
nova_webhook.php
        FALSE,
        $main_transaction_info["ssn"]
Function Parameter php
    	$last_modified = "",
		$tax_id = ""

2. api/v6/NameAndAddresses POST 
To createNameAndAddress we first call function providing main_transaction_info getNameAndAddressesParamsFromNova which just returns object later passed to createNameAndAddress

main_transaction_info['ssn']
main_transaction_info['firstName']
main_transaction_info['lastName']
main_transaction_info['gender']
main_transaction_info['prEmail']
main_transaction_info['legalAddressRegion']
main_transaction_info['legalAddressPostalCode']
main_transaction_info['legalAddressStreet']
main_transaction_info['legalAddressCity']
main_transaction_info['legalAddressCountry']
main_transaction_info['dob']


$name_address_params = $cheetah_api->getNameAndAddressesParamsFromNova(
    FALSE,
    $main_transaction_info
);

// 


$create_response = $cheetah_api->createNameAndAddress(
    $name_address_params
);

3. api/v6/NameAndAddresses/{IDENTITY_RECORD_ID} PUT

main_transaction_info['ssn']
main_transaction_info['firstName']
main_transaction_info['lastName']
main_transaction_info['gender']
main_transaction_info['prEmail']
main_transaction_info['legalAddressRegion']
main_transaction_info['legalAddressPostalCode']
main_transaction_info['legalAddressStreet']
main_transaction_info['legalAddressCity']
main_transaction_info['legalAddressCountry']
main_transaction_info['dob']

$name_address_params = $cheetah_api->getNameAndAddressesParamsFromNova(
    $cheetah_match_na["IdentityRecordId"], // not used
    $main_transaction_info,
    $cheetah_match_na // not used
);

$name_address_params['TaxIdType'] = 'USSocialSecurityNumber';
$name_address_params['TaxIdStatusType'] = 'Known';

$update_response = $cheetah_api->updateNameAndAddress(
    $cheetah_match_na["IdentityRecordId"], // used to find object to update
    $name_address_params
);

4. api/v6/NameAndAddresses POST 
Sometimes we also createNameAndAddress with the following object. getInterestedPartyNameAndAddressesParamsFromNova just returns the object which later gets called with createNameAndAddress but requires the following argument

main_transaction_info['ipSsn']
main_transaction_info['ipFirstName']
main_transaction_info['ipLastName']
main_transaction_info['ipEmailAddress']
main_transaction_info['ipLegalAddressRegion']
main_transaction_info['ipLegalAddressPostalCode']
main_transaction_info['ipLegalAddressStreet']
main_transaction_info['ipLegalAddressCity']
main_transaction_info['ipLegalAddressCountry']
main_transaction_info['ipPrimaryPhone']
main_transaction_info['ipDob']

$name_address_params_ip = $cheetah_api->getInterestedPartyNameAndAddressesParamsFromNova(
    $main_transaction_info
);

$create_response = $cheetah_api->createNameAndAddress(
    $name_address_params_ip
);

5. api/v6/Accounts POST
getCreateAccountParamsFromNova also makes call to db. In that functions we instantiate the object with two pieces of information first is from account_db and seconds is from passed params

// ASAD to Confirm.
account_db['account_category']
account_db['is_crypto']
account_db["account_category_display"]

To make call to db we use $transaction["data"]["transaction"]["templateVersion"]["templateId"]

params['ssn']
params['firstName']
params['lastName']
params['division_id'] // AccountType
params['primaryPhone']
params['gender']
params['prEmail']
params['legalAddressRegion']
params['legalAddressPostalCode']
params['legalAddressStreet']
params['legalAddressCity']
params['legalAddressCountry']
params['account_cat_id'] // AccountType
params['dob']


$create_account_params = $cheetah_api->getCreateAccountParamsFromNova(
    $transaction["data"]["transaction"]
);

logInfo("create_account_params", $create_account_params);

logInfo(" name_and_addresses  identity ID >>> " . json_encode($name_and_addresses, JSON_PRETTY_PRINT));

$response = $cheetah_api->createAccount(
    $create_account_params
);

6. api/v6/Accounts GET
ACCOUNT_ID = account_id

7. api/v6/Accounts/{ACCOUNT_ID} PUT
To update Account we first get the update_created_account_settings from getAccount by passing the account_id. Then we make changes in the parameters we get and then call the api.

$get_created_account = $cheetah_api->getAccount(
    $account_id
);
$update_created_account_settings = $get_created_account["content"];

... Some changes is made to $update_created_account_settings object

$update_account_settings = $cheetah_api->updateAccount(
    $account_id,
    $update_created_account_settings
);

8. api/v6/AccountRelationships POST
$account_id
$interested_party_NA_id
$main_transaction_info["ipBool"]
$main_transaction_info["ipFirstName"]
$main_transaction_info["ipLastName"]

$account_relationships[] = [
    "AccountId" => $account_id,
    "AccountRelationshipId" => 0,
    "IdentityRecordId" => $interested_party_NA_id,
    "AccountRelationshipTypeId" => ($main_transaction_info["ipBool"]) ? 39 : 33,
    "AccountRelationshipTypeName" => $main_transaction_info["ipFirstName"] . " " . $main_transaction_info["ipLastName"],
    "OwnershipPercent" => 0.00,
    "TrusteePercent" => 0,
    "isProxyRecipient" => FALSE,
    "DoesReceiveApprovalLetter" => TRUE,
    "DoesReceiveTradeNotification" => TRUE,
    "DoesUseAccunet" => ($main_transaction_info["ipBool"]) ? TRUE : FALSE,
    "IdentityClassificationType" => "Informational"
];

{
  "AccountId": 0,
  "AccountRelationshipId": 0,
  "IdentityRecordId": 0,
  "AccountRelationshipTypeId": 0,
  "OwnershipPercent": 1,
  "TrusteePercent": 1,
  "IsProxyRecipient": true,
  "DoesReceiveApprovalLetter": true,
  "DoesReceiveTradeNotification": true,
  "DoesUseAccunet": true
}

$response = $cheetah_api->addAccountRelationship($account_relationship);

///////////////////////////////
HUBSPOT API

1. crm/v3/objects/contacts/search POST

main_transaction_info['prEmail']

$hubspot_contacts = $hubspot_api->searchContact 

2. crm/v3/objects/contacts POST

$cheetah_match_na["IdentityRecordId"] || ""
$main_transaction_info["firstName"]
$main_transaction_info["lastName"]
$main_transaction_info['primaryPhone']
$main_transaction_info['prEmail']
$main_transaction_info['dob']
$main_transaction_info['legalAddressRegion']
$main_transaction_info['legalAddressPostalCode']
$main_transaction_info['legalAddressStreet']
$main_transaction_info['legalAddressCity']
$main_transaction_info['legalAddressCountry']

$hubspot_contact_params object is created from the above parameters.

$response = $hubspot_api->createContact(
    $hubspot_contact_params
);

3. crm/v3/objects/contacts/{CONTACT_ID} PATCH 

Same $hubspot_contact_params are used which are used to createContact

$hubspot_contacts = $hubspot_api->searchContacts(prEmail)

$hubspot_contact_id = $hubspot_contacts[0]["id"];

$response = $hubspot_api->updateContact(
    $hubspot_contact_id,
    $hubspot_contact_params
);

4. crm/v3/objects/p{HUB_ACCOUNT_ID}_financialaccount POST

$account_db["account_category"]
$account_db["division"]
$account_number
$cheetah_api->getDisplayName(
    $account_db,
    $main_transaction_info
),

$financial_account_params = [
    "account_category" => $account_db["account_category"],
    "financialaccount_name" => $cheetah_api->getDisplayName(
        $account_db,
        $main_transaction_info
    ),
    "account_number" => $account_number,
    "cheetah_link" => $cheetah_link . "/Accounts/Detail/" . $account_id,
    "date_opened" => date("Y-m-d\T00:00:00.000\Z"),
    "division" => $account_db["division"],
    "status" => "Open",
];

$financial_account_params is created from the above given parameters

$response = $hubspot_api->createFinancialObject($financial_account_params);

5. crm/v4/objects/{OBJECT_TYPE_A}/{OBJECT_ID_A}/associations/{OBJECT_TYPE_B}/{OBJECT_ID_B} PUT

$hubspot_contact_id = $hubspot_contacts[0]["id"];

$hubspot_financial_object_id = $response["content"]["id"];

$response = $hubspot_api->createAssociation(
    [
        "associationCategory" => "USER_DEFINED",
        "associationTypeId" => 24,
    ],
    [
        "type" => "contact",
        "id" => $hubspot_contact_id,
    ],
    [
        "type" => "p21293392_financialaccount",
        "id" => $hubspot_financial_object_id,
    ],
);

6. crm/v4/objects/contacts/{CONTACT_ID}/associations/{TO_OBJECT_TYPE}/{TO_OBJECT_ID} PUT

if else condition breakdown
$ip_hubspot_contact_id = $intrested_party_contacts[0]["id"];
OR 
$ip_hubspot_contact_id = $response["content"]["id"];

$response = $hubspot_api->setAssociationLables(
    [
        "associationCategory" => "USER_DEFINED",
        "associationTypeId" =>  42,
    ],
    $ip_hubspot_contact_id,
    "p" . $hubsport_account_id . "_financialaccount",
    $hubspot_financial_object_id
);

7. Sometimes we also use the following parameters to create the contact

$main_transaction_info["ipFirstName"]
$main_transaction_info["ipLastName"]
$main_transaction_info['ipPrimaryPhone']
$main_transaction_info['ipEmailAddress']
$main_transaction_info['ipDob']
$main_transaction_info['ipAddressRegion']
$main_transaction_info['ipAddressPostalCode']
$main_transaction_info['ipAddressStreet']
$main_transaction_info['ipAddressCity']
$main_transaction_info['ipAddressCountry']

$hubspot_contact_params object is created from the above parameters.

$response = $hubspot_api->createContact(
    $hubspot_contact_params
);