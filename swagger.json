{
  "openapi": "3.0.1",
  "info": {
    "title": "Cheetah API Help Page",
    "description": "This page is a list of available Cheetah API's. You may also download the swagger.json file.",
    "version": "6"
  },
  "paths": {
    "/api/v6/Accounts": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get account information.",
        "parameters": [
          {
            "name": "AccountNumber",
            "in": "query",
            "description": "If account number is supplied, returns account for that number.",
            "schema": {
              "maxLength": 10,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "InstitutionIdentityRecordId",
            "in": "query",
            "description": "Used to restrict queries to specific Institutions. If not supplied, the query will be restricted\r\nto Institutions assigned to the user. To obtain an Id use the /vX/Lookup service with the parameter GetInstitutionIdentityRecordValues.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "LastModifiedDate",
            "in": "query",
            "description": "If last modified date is supplied, returns accounts that have been modified since that date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "AdminOnly",
            "in": "query",
            "description": "If supplied as true will only return accounts with your user as the Admin Officer.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Determines the number of objects returned by the query.\r\nExample: A limit of 100 will return a maximum of 100 objects.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Index to specify where to start returning data.\r\nExample: An offset of 100 will return objects starting from object 101.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccountApiRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccountApiRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccountApiRequest"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Add a new Account",
        "requestBody": {
          "description": "SaveAccountApiRequest",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveAccountApiRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveAccountApiRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveAccountApiRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveAccountApiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAccountResponseApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAccountResponseApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAccountResponseApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Accounts/{accountId}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get account information for the given Id.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Internal unique account Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AccountApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Accounts/{accountId}/PendingTransactions": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get pending transactions for the given account Id.(Accepted Values : Proposed, Pending Approval, Approved, Locked, Ready)",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Internal unique account Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "TransactionBatchId",
            "in": "query",
            "description": "Internal unique transaction batch Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SourceTransactionReferenceNumbers",
            "in": "query",
            "description": "A collection of source transaction reference numbers.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "TransactionStatusType",
            "in": "query",
            "description": "Transaction status type. Will return transactions that are less than or equal to the given type.\r\nAccepted Values : Proposed, Pending Approval, Approved, Locked, Ready",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TransactionStatusType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PendingTransactionApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PendingTransactionApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PendingTransactionApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Accounts/{accountId}/FileAttachments": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get file attachments for the given account Id.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Internal unique account Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "IdentityRecordId",
            "in": "query",
            "description": "Internal unique identity record Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ReportId",
            "in": "query",
            "description": "Internal unique report Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserExportQuerySettingsId",
            "in": "query",
            "description": "Internal unique user export query setting Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "FileAttachmentCreatedDateFrom",
            "in": "query",
            "description": "The created date range start date. If left null or empty, the query will not be limited to the date range.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "FileAttachmentCreatedDateTo",
            "in": "query",
            "description": "The created date range end date. If FileAttachmentCreatedDateTo is null or empty and the\r\nFileAttachmentCreatedDateFrom is not null or empty, then the query will be everything\r\ngreater and equal to FileAttachmentCreatedDateFrom.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "OnlyAvailableOnline",
            "in": "query",
            "description": "Return file attachments marked as Available Online. If the parameter is null\r\nor false, then all file attachments will be returned.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileAttachmentApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileAttachmentApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileAttachmentApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Adds file attachments to the given account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Internal unique account Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  },
                  "availableOnline": {
                    "type": "boolean"
                  }
                }
              },
              "encoding": {
                "files": {
                  "style": "form"
                },
                "availableOnline": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SaveFileAttachmentsResponseApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SaveFileAttachmentsResponseApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SaveFileAttachmentsResponseApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Requested data not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Accounts/{accountId}/Trades": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get Trades for the given account Id.(Accepted Values : ex Ordered, ExecuteAccepted, Filled, TradeAffirmed, Approved)",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Internal unique account Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "TradeBlockId",
            "in": "query",
            "description": "Trade Block Id. If supplied, will return trades for the given Trade Block Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "TradeStatusType",
            "in": "query",
            "description": "If supplied, will retrieve trades for the given tradestatus Type.",
            "schema": {
              "$ref": "#/components/schemas/TradeStatusType"
            }
          },
          {
            "name": "TradeType",
            "in": "query",
            "description": "If supplied, will retrieve trades for the given trade Type.",
            "schema": {
              "$ref": "#/components/schemas/TradeType"
            }
          },
          {
            "name": "AccountId",
            "in": "query",
            "description": "Account Id. If supplied, will return trades for the given account Id. To obtain an Id use the /vX/Lookup service with the parameter GetAccountValues or GetAccountsForInstitutionValues.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "AssetId",
            "in": "query",
            "description": "Asset Id. If supplied, will return trades for the given asset Id. To obtain an Id use the /vX/Lookup service with the parameter GetAssetValues or GetAssetsForInstitutionValues.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "AccountIds",
            "in": "query",
            "description": "Array of Account Ids. If supplied, will return trades for the given list of account Ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TradeApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TradeApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TradeApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Accounts/{accountId}/FeeBalances": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get fee balances for the given account Id.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Internal unique account Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "AccountAdminOfficerIds",
            "in": "query",
            "description": "Collection account administrative officer Ids to return balances.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "InstitutionIdentityRecordIds",
            "in": "query",
            "description": "Collection of institution identity record Ids to return balances.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "AccountCategoryIds",
            "in": "query",
            "description": "Collection of account category Ids to return balances.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "BalanceAmountRangeLow",
            "in": "query",
            "description": "Return fee balances greater than or equal to this amount.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "BalanceAmountRangeHigh",
            "in": "query",
            "description": "Return fee balance less than or equal to this amount.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "FeeAgeCategoryType",
            "in": "query",
            "description": "Age category (i.e. 0 - 30 days, 30 - 60 days, etc.)",
            "schema": {
              "$ref": "#/components/schemas/FeeAgeCategoryType"
            }
          },
          {
            "name": "FeeTransactionCategoryIds",
            "in": "query",
            "description": "Collection of fee transaction category Ids to return balances.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "FeeStatusTypes",
            "in": "query",
            "description": "Collection of fee status types to return balances.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FeeStatusType"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FeeBalanceApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeeBalanceApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeeBalanceApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Accounts/{accountId}/Fees": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get fees for the given account Id.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Internal unique account Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "DateEffectiveFrom",
            "in": "query",
            "description": "Date fee effective from.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateEffectiveTo",
            "in": "query",
            "description": "Date fee effective to.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateCollectedFrom",
            "in": "query",
            "description": "Date fee collected from.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateCollectedTo",
            "in": "query",
            "description": "Date fee collected to.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "FeeType",
            "in": "query",
            "description": "Fee type.",
            "schema": {
              "$ref": "#/components/schemas/FeeType"
            }
          },
          {
            "name": "PaymentFeeCollectionType",
            "in": "query",
            "description": "Fee collection type.",
            "schema": {
              "$ref": "#/components/schemas/FeeCollectionType"
            }
          },
          {
            "name": "TransactionCategoryIds",
            "in": "query",
            "description": "Collection of fee transaction category Ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "LastModifiedDate",
            "in": "query",
            "description": "Fee last modified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FeeApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FeeApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FeeApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Accounts/{accountId}/AccountRelationships": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get account relationships for the given account Id.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Internal unique account Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "IdentityRecordId",
            "in": "query",
            "description": "Internal unique identity record Id. If supplied, will return the record for that unique Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "TaxId",
            "in": "query",
            "description": "Tax Id of the identity record to search for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "Identity name to search for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "IdentityCode",
            "in": "query",
            "description": "Identity code to search for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LastModifiedDate",
            "in": "query",
            "description": "If last modified date is supplied, returns account relationships that have been modified since that date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "InstitutionIdentityRecordId",
            "in": "query",
            "description": "Used to restrict queries to specific Institutions. If not supplied, the query will be restricted\r\nto Institutions assigned to the user.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentityAccountRelationshipApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentityAccountRelationshipApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentityAccountRelationshipApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Accounts/{accountId}/Holdings": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get holdings for the given account Id.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Internal unique account Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "BalanceDateFrom",
            "in": "query",
            "description": "Balance date from. Must be supplied if BalanceDateTo is supplied and must be less\r\nthan or equal to BalanceDateTo.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "BalanceDateTo",
            "in": "query",
            "description": "Balance date to. If not supplied and BalanceDateFrom has a value, will retrieve\r\nholding records with a balance date greater than or equal to the BalanceDateFrom\r\nvalue. If BalanceDateTo is supplied it must be greater than or equal to BalanceDateFrom\r\nand will retrive holding records bewtween and inclusive of BalanceDateFrom and\r\nBalanceDateTo.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "InstitutionIdentityRecordId",
            "in": "query",
            "description": "Used to restrict queries to specific Institutions. If not supplied, the query will be restricted\r\nto Institutions assigned to the user. To obtain an Id use the /vX/Lookup service with the parameter GetInstitutionIdentityRecordValues.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Determines the number of objects returned by the query.\r\nExample: A limit of 100 will return a maximum of 100 objects.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Index to specify where to start returning data.\r\nExample: An offset of 100 will return objects starting from object 101.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountHoldingApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountHoldingApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountHoldingApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Accounts/{accountId}/CurrentHoldings": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get current holdings for the given account Id.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Internal unique account Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountHoldingApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountHoldingApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountHoldingApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Accounts/{accountId}/Activities": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get activities for the given account Id.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Internal unique account Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "IdentityRecordId",
            "in": "query",
            "description": "Identity tax Id. If supplied, will return activities for the given identity record Id. To obtain an Id use the /vX/Lookup service with the parameter GetIdentityRecordValues.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ActivityCategoryId",
            "in": "query",
            "description": "Activity Category Id. If supplied, will return activities for the given activity category Id. To obtain an Id use the /vX/Lookup service with the parameter GetActivityCategoryValues.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ActivityDateTimeFrom",
            "in": "query",
            "description": "Activity date time from. Must be supplied if ActivityDateTimeTo is supplied and must be less\r\nthan or equal to ActivityDateTimeTo.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "ActivityDateTimeTo",
            "in": "query",
            "description": "Activity date time to. If not supplied and ActivityDateTimeFrom has a value, will retrieve\r\nactivity records with an activity date time greater than or equal to the ActivityDateTimeFrom\r\nvalue. If ActivityDateTimeTo is supplied it must be greater than or equal to ActivityDateTimeFrom\r\nand will retrieve activity records between and inclusive of ActivityDateTimeFrom and\r\nActivityDateTimeTo.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "LastModifiedDate",
            "in": "query",
            "description": "If last modified date is supplied, returns activities that have been modified since that date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "InstitutionIdentityRecordId",
            "in": "query",
            "description": "Used to restrict queries to specific Institutions. If not supplied, the query will be restricted\r\nto Institutions assigned to the user. To obtain an Id use the /vX/Lookup service with the parameter GetInstitutionIdentityRecordValues.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Accounts/{accountId}/AccountSettings": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get account settings for the given account Id.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Internal unique account Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AccountSettingsApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountSettingsApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountSettingsApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Accounts/{accountId}/FeeSettings": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get account fee settings for the given account Id.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Internal unique account Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FeeSettingApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FeeSettingApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FeeSettingApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Accounts/{accountId}/InvestmentModelSettings": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get account investment model settings for the given account Id.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Internal unique account Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvestmentModelSettingApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvestmentModelSettingApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvestmentModelSettingApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Accounts/{id}": {
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Update an Account",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "AccountId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "SaveAccountApiRequest",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveAccountApiRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveAccountApiRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveAccountApiRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveAccountApiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAccountResponseApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAccountResponseApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAccountResponseApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Accounts/{accountId}/Open": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Open an Account",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Internal unique account Id to open.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAccountResponseApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAccountResponseApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAccountResponseApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Accounts/Status": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Change the status of an account or multiple accounts.",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AccountStatusApiRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountStatusApiRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountStatusApiRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AccountStatusApiRequest"
              }
            }
          }
        },
        "responses": {
          "207": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAccountStatusResponseApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAccountStatusResponseApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAccountStatusResponseApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          },
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Accounts/{accountId}/Deposit": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Adds a Locked Transaction Batch with a single transaction for the account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Internal unique account Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "AccountDepositApiRequest",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AccountDepositApiRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountDepositApiRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountDepositApiRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AccountDepositApiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAccountResponseApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAccountResponseApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAccountResponseApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Accounts/{accountId}/CustomerStatementSetups": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get Customer Statement Setups (AccountReportRelationships).",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Internal unique account Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "IdentityRecordId",
            "in": "query",
            "description": "If supplied will retrieve only for this specific IdentityRecordId",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerStatementSetupApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerStatementSetupApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerStatementSetupApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Accounts/Alert": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Add a new alert in Cheetah related to an account opening.",
        "requestBody": {
          "description": "AccountAlertApiRequest",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AccountAlertApiRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountAlertApiRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountAlertApiRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AccountAlertApiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAccountAlertResponseApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAccountAlertResponseApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAccountAlertResponseApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/AccountCategories": {
      "get": {
        "tags": [
          "AccountCategory"
        ],
        "summary": "Get account categories.",
        "parameters": [
          {
            "name": "AccountCategoryCode",
            "in": "query",
            "description": "If supplied will return the account category Id for that code.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountCategoryApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountCategoryApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountCategoryApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccountCategoryApiRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccountCategoryApiRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccountCategoryApiRequest"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/AccountCategories/{accountCategoryId}": {
      "get": {
        "tags": [
          "AccountCategory"
        ],
        "summary": "Get account category for the given Id.",
        "parameters": [
          {
            "name": "accountCategoryId",
            "in": "path",
            "description": "Internal unique account category Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AccountCategoryApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountCategoryApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountCategoryApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/AccountGroups/{accountGroupId}": {
      "get": {
        "tags": [
          "AccountGroup"
        ],
        "summary": "Get account group information by an id.",
        "parameters": [
          {
            "name": "accountGroupId",
            "in": "path",
            "description": "Internal unique account Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountGroupApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountGroupApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountGroupApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccountGroupApiRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccountGroupApiRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccountGroupApiRequest"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/AccountGroups": {
      "get": {
        "tags": [
          "AccountGroup"
        ],
        "summary": "Get account group information.",
        "parameters": [
          {
            "name": "IsStatementGroup",
            "in": "query",
            "description": "If IsStatementGroup is true, only Account Groups marked as IsStatementGroup will be returned",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsRelationshipView",
            "in": "query",
            "description": "If IsRelationshipView is true, only Account Groups marked as IsRelationshipView will be returned",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsForInvestmentProcessing",
            "in": "query",
            "description": "If IsForInvestmentProcessing is true, only Account Groups marked as IsForInvestmentProcessing will be returned",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "AccountGroupIds",
            "in": "query",
            "description": "If one or more AccountGroupId values are passed in, only the corresponding Account Groups will be returned",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "InstitutionIdentityRecordIds",
            "in": "query",
            "description": "If one or more InstitutionIdentityRecordId values are passed in, only Account Groups for the given Institution(s) will be returned",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "IsActive",
            "in": "query",
            "description": "Is IsActive is true, only active account groups will be returned.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsShowMarketValue",
            "in": "query",
            "description": "If IsShowMarketValue is true, the Market Value will be computed.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsShowAvailableCash",
            "in": "query",
            "description": "If IsShowAvailableCash is true, the Available Cash will be computed",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountGroupApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountGroupApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountGroupApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccountGroupApiRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccountGroupApiRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccountGroupApiRequest"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/AccountGroups/{accountGroupId}/AccountGroupRelationships": {
      "get": {
        "tags": [
          "AccountGroup"
        ],
        "summary": "Get account group relationship information by an id.",
        "parameters": [
          {
            "name": "accountGroupId",
            "in": "path",
            "description": "Internal unique account Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountGroupRelationshipsApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountGroupRelationshipsApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountGroupRelationshipsApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccountGroupRelationshipsApiRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccountGroupRelationshipsApiRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccountGroupRelationshipsApiRequest"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/AccountRelationships": {
      "get": {
        "tags": [
          "AccountRelationship"
        ],
        "summary": "Get account relationships.",
        "parameters": [
          {
            "name": "IdentityRecordId",
            "in": "query",
            "description": "Internal unique identity record Id. If supplied, will return the record for that unique Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "TaxId",
            "in": "query",
            "description": "Tax Id of the identity record to search for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "Identity name to search for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "IdentityCode",
            "in": "query",
            "description": "Identity code to search for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LastModifiedDate",
            "in": "query",
            "description": "If last modified date is supplied, returns account relationships that have been modified since that date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "InstitutionIdentityRecordId",
            "in": "query",
            "description": "Used to restrict queries to specific Institutions. If not supplied, the query will be restricted\r\nto Institutions assigned to the user.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentityAccountRelationshipApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentityAccountRelationshipApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentityAccountRelationshipApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccountRelationshipApiRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccountRelationshipApiRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccountRelationshipApiRequest"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": [
          "AccountRelationship"
        ],
        "summary": "Add a new Account Relationship.",
        "requestBody": {
          "description": "SaveAccountRelationshipApiRequest",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveAccountRelationshipApiRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveAccountRelationshipApiRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveAccountRelationshipApiRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveAccountRelationshipApiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAccountRelationshipResponseApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAccountRelationshipResponseApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAccountRelationshipResponseApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/AccountRelationships/Deactivate": {
      "post": {
        "tags": [
          "AccountRelationship"
        ],
        "summary": "Deactivate Account Relationship(s)",
        "requestBody": {
          "description": "DeactivateAccountRelationshipApiRequest",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DeactivateAccountRelationshipApiRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeactivateAccountRelationshipApiRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeactivateAccountRelationshipApiRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeactivateAccountRelationshipApiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SaveAccountRelationshipResponseApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SaveAccountRelationshipResponseApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SaveAccountRelationshipResponseApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/AccountRelationships/{id}": {
      "put": {
        "tags": [
          "AccountRelationship"
        ],
        "summary": "Update an Account Relationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "AccountRelationshipId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "SaveAccountRelationshipApiRequest",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveAccountRelationshipApiRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveAccountRelationshipApiRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveAccountRelationshipApiRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveAccountRelationshipApiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAccountRelationshipResponseApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAccountRelationshipResponseApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAccountRelationshipResponseApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Activities": {
      "get": {
        "tags": [
          "Activity"
        ],
        "summary": "Get activity information.",
        "parameters": [
          {
            "name": "IdentityRecordId",
            "in": "query",
            "description": "Identity tax Id. If supplied, will return activities for the given identity record Id. To obtain an Id use the /vX/Lookup service with the parameter GetIdentityRecordValues.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ActivityCategoryId",
            "in": "query",
            "description": "Activity Category Id. If supplied, will return activities for the given activity category Id. To obtain an Id use the /vX/Lookup service with the parameter GetActivityCategoryValues.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ActivityDateTimeFrom",
            "in": "query",
            "description": "Activity date time from. Must be supplied if ActivityDateTimeTo is supplied and must be less\r\nthan or equal to ActivityDateTimeTo.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "ActivityDateTimeTo",
            "in": "query",
            "description": "Activity date time to. If not supplied and ActivityDateTimeFrom has a value, will retrieve\r\nactivity records with an activity date time greater than or equal to the ActivityDateTimeFrom\r\nvalue. If ActivityDateTimeTo is supplied it must be greater than or equal to ActivityDateTimeFrom\r\nand will retrieve activity records between and inclusive of ActivityDateTimeFrom and\r\nActivityDateTimeTo.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "LastModifiedDate",
            "in": "query",
            "description": "If last modified date is supplied, returns activities that have been modified since that date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "InstitutionIdentityRecordId",
            "in": "query",
            "description": "Used to restrict queries to specific Institutions. If not supplied, the query will be restricted\r\nto Institutions assigned to the user. To obtain an Id use the /vX/Lookup service with the parameter GetInstitutionIdentityRecordValues.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetActivityApiRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetActivityApiRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetActivityApiRequest"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": [
          "Activity"
        ],
        "summary": "Add a new activity",
        "requestBody": {
          "description": "SaveActivityApiRequest",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveActivityApiRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveActivityApiRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveActivityApiRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveActivityApiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SaveActivityResponseApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveActivityResponseApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveActivityResponseApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Activities/{activityId}": {
      "get": {
        "tags": [
          "Activity"
        ],
        "summary": "Get account information for the given Id.",
        "parameters": [
          {
            "name": "activityId",
            "in": "path",
            "description": "Internal unique account Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Activities/{id}": {
      "put": {
        "tags": [
          "Activity"
        ],
        "summary": "Update an activity",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ActivityId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "SaveActivityApiRequest",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveActivityApiRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveActivityApiRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveActivityApiRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveActivityApiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SaveActivityResponseApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveActivityResponseApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveActivityResponseApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Activities/{activityId}/FileAttachments": {
      "get": {
        "tags": [
          "Activity"
        ],
        "summary": "Get file attachments for the given activity Id.",
        "parameters": [
          {
            "name": "activityId",
            "in": "path",
            "description": "Internal unique activity Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "IdentityRecordId",
            "in": "query",
            "description": "Internal unique identity record Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ReportId",
            "in": "query",
            "description": "Internal unique report Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserExportQuerySettingsId",
            "in": "query",
            "description": "Internal unique user export query setting Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "FileAttachmentCreatedDateFrom",
            "in": "query",
            "description": "The created date range start date. If left null or empty, the query will not be limited to the date range.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "FileAttachmentCreatedDateTo",
            "in": "query",
            "description": "The created date range end date. If FileAttachmentCreatedDateTo is null or empty and the\r\nFileAttachmentCreatedDateFrom is not null or empty, then the query will be everything\r\ngreater and equal to FileAttachmentCreatedDateFrom.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "OnlyAvailableOnline",
            "in": "query",
            "description": "Return file attachments marked as Available Online. If the parameter is null\r\nor false, then all file attachments will be returned.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileAttachmentApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileAttachmentApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileAttachmentApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Approvals": {
      "get": {
        "tags": [
          "Approval"
        ],
        "summary": "Get approval activity.",
        "parameters": [
          {
            "name": "UserGuid",
            "in": "query",
            "description": "GUID of the Cheetah User. To obtain an Id use the /vX/Lookup service with the parameter GetActiveUserValues.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "ApprovalType",
            "in": "query",
            "description": "Approval type. Will return approvals that are equal to the given type.\r\nAccepted Values : Trade, Transaction, Scheduled Transaction, Scheduled Transaction Occurrence",
            "schema": {
              "$ref": "#/components/schemas/ApprovalType"
            }
          },
          {
            "name": "ApprovalActionType",
            "in": "query",
            "description": "Approval status type. Will return approvals that are equal to the given type.\r\nAccepted Values : Initiated, Acknowledged, Approved, Rejected, Exited Approval",
            "schema": {
              "$ref": "#/components/schemas/ApprovalActionType"
            }
          },
          {
            "name": "InstitutionIdentityRecordId",
            "in": "query",
            "description": "Used to restrict queries to specific Institutions. If not supplied, the query will be restricted\r\nto Institutions assigned to the user. To obtain an Id use the /vX/Lookup service with the parameter GetInstitutionIdentityRecordValues.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "AdminOnly",
            "in": "query",
            "description": "If supplied as true will only return approvals for accounts with an Admin of the UserGuid user (if supplied) or the requesting user.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApprovalActivityApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApprovalActivityApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApprovalActivityApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Approvals/{accountId}": {
      "get": {
        "tags": [
          "Approval"
        ],
        "summary": "Get approval activity for an account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Account Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userGuid",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalActivityApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalActivityApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalActivityApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Approvals/Approve": {
      "post": {
        "tags": [
          "Approval"
        ],
        "parameters": [
          {
            "name": "ApprovalActivityIds",
            "in": "query",
            "description": "Array of Approval Activity Ids.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "UserGuid",
            "in": "query",
            "description": "GUID of the Cheetah User to update the activity with. To obtain an Id use the /vX/Lookup service with the parameter GetActiveUserValues.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Comment",
            "in": "query",
            "description": "Comment to use on the resulting Approval Activity record.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SaveApprovalActivityResponseApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SaveApprovalActivityResponseApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SaveApprovalActivityResponseApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error processing request.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Request a new JWT.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Requested data not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unhandled exception."
          }
        }
      }
    },
    "/api/v6/Approvals/Acknowledge": {
      "post": {
        "tags": [
          "Approval"
        ],
        "parameters": [
          {
            "name": "ApprovalActivityIds",
            "in": "query",
            "description": "Array of Approval Activity Ids.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "UserGuid",
            "in": "query",
            "description": "GUID of the Cheetah User to update the activity with. To obtain an Id use the /vX/Lookup service with the parameter GetActiveUserValues.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Comment",
            "in": "query",
            "description": "Comment to use on the resulting Approval Activity record.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SaveApprovalActivityResponseApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SaveApprovalActivityResponseApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SaveApprovalActivityResponseApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error processing request.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Request a new JWT.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Requested data not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unhandled exception."
          }
        }
      }
    },
    "/api/v6/Approvals/Reject": {
      "post": {
        "tags": [
          "Approval"
        ],
        "parameters": [
          {
            "name": "ApprovalActivityIds",
            "in": "query",
            "description": "Array of Approval Activity Ids.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "UserGuid",
            "in": "query",
            "description": "GUID of the Cheetah User to update the activity with. To obtain an Id use the /vX/Lookup service with the parameter GetActiveUserValues.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Comment",
            "in": "query",
            "description": "Comment to use on the resulting Approval Activity record.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SaveApprovalActivityResponseApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SaveApprovalActivityResponseApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SaveApprovalActivityResponseApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error processing request.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Request a new JWT.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Requested data not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unhandled exception."
          }
        }
      }
    },
    "/api/v6/Assets": {
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Get Asset information.",
        "parameters": [
          {
            "name": "AssetCode",
            "in": "query",
            "description": "Asset CUSIP. If supplied, will retrieve the specified asset.",
            "schema": {
              "maxLength": 12,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "Symbol",
            "in": "query",
            "description": "Asset symbol. If supplied, will retrieve the specified asset.",
            "schema": {
              "maxLength": 22,
              "minLength": 0,
              "type": "string"
            }
          },
          {
            "name": "DomainModelClass",
            "in": "query",
            "description": "If supplied, will retrieve all assets for the given domain model class.",
            "schema": {
              "$ref": "#/components/schemas/DomainModelClass"
            }
          },
          {
            "name": "LastModifiedDate",
            "in": "query",
            "description": "Last modified date. If supplied will retrieve all assets that\r\nhave been modified since the given date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "InstitutionIdentityRecordId",
            "in": "query",
            "description": "Used to restrict queries to specific Institutions. If not supplied, the query will be restricted\r\nto Institutions assigned to the user.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "CoreAssetOnly",
            "in": "query",
            "description": "Used to determine the level of detail returned. If supplied as true, the query and response will only include the main asset information.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetAssetApiRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAssetApiRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAssetApiRequest"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": [
          "Asset"
        ],
        "summary": "Add a new Asset",
        "requestBody": {
          "description": "SaveAssetApiRequest",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveAssetApiRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveAssetApiRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveAssetApiRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveAssetApiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAssetResponseApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAssetResponseApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAssetResponseApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Assets/{assetId}": {
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Get Asset information for the given asset Id.",
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "description": "Internal unique asset Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AssetApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Assets/{id}": {
      "put": {
        "tags": [
          "Asset"
        ],
        "summary": "Update an Asset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "AssetId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "SaveAssetApiRequest",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveAssetApiRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveAssetApiRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveAssetApiRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveAssetApiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAssetResponseApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAssetResponseApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAssetResponseApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Assets/{assetId}/Holdings": {
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Get holdings for the given asset Id.",
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "description": "Internal unique asset Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "BalanceDateFrom",
            "in": "query",
            "description": "Balance date from. Must be supplied if BalanceDateTo is supplied and must be less\r\nthan or equal to BalanceDateTo.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "BalanceDateTo",
            "in": "query",
            "description": "Balance date to. If not supplied and BalanceDateFrom has a value, will retrieve\r\nholding records with a balance date greater than or equal to the BalanceDateFrom\r\nvalue. If BalanceDateTo is supplied it must be greater than or equal to BalanceDateFrom\r\nand will retrive holding records bewtween and inclusive of BalanceDateFrom and\r\nBalanceDateTo.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "InstitutionIdentityRecordId",
            "in": "query",
            "description": "Used to restrict queries to specific Institutions. If not supplied, the query will be restricted\r\nto Institutions assigned to the user. To obtain an Id use the /vX/Lookup service with the parameter GetInstitutionIdentityRecordValues.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Determines the number of objects returned by the query.\r\nExample: A limit of 100 will return a maximum of 100 objects.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Index to specify where to start returning data.\r\nExample: An offset of 100 will return objects starting from object 101.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountHoldingApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountHoldingApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountHoldingApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Assets/{assetId}/Activities": {
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Get activities for the given asset Id.",
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "description": "Internal unique asset Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "IdentityRecordId",
            "in": "query",
            "description": "Identity tax Id. If supplied, will return activities for the given identity record Id. To obtain an Id use the /vX/Lookup service with the parameter GetIdentityRecordValues.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ActivityCategoryId",
            "in": "query",
            "description": "Activity Category Id. If supplied, will return activities for the given activity category Id. To obtain an Id use the /vX/Lookup service with the parameter GetActivityCategoryValues.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ActivityDateTimeFrom",
            "in": "query",
            "description": "Activity date time from. Must be supplied if ActivityDateTimeTo is supplied and must be less\r\nthan or equal to ActivityDateTimeTo.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "ActivityDateTimeTo",
            "in": "query",
            "description": "Activity date time to. If not supplied and ActivityDateTimeFrom has a value, will retrieve\r\nactivity records with an activity date time greater than or equal to the ActivityDateTimeFrom\r\nvalue. If ActivityDateTimeTo is supplied it must be greater than or equal to ActivityDateTimeFrom\r\nand will retrieve activity records between and inclusive of ActivityDateTimeFrom and\r\nActivityDateTimeTo.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "LastModifiedDate",
            "in": "query",
            "description": "If last modified date is supplied, returns activities that have been modified since that date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "InstitutionIdentityRecordId",
            "in": "query",
            "description": "Used to restrict queries to specific Institutions. If not supplied, the query will be restricted\r\nto Institutions assigned to the user. To obtain an Id use the /vX/Lookup service with the parameter GetInstitutionIdentityRecordValues.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Assets/{assetId}/FileAttachments": {
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Get file attachments for the given asset Id.",
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "description": "Internal unique asset Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "IdentityRecordId",
            "in": "query",
            "description": "Internal unique identity record Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ReportId",
            "in": "query",
            "description": "Internal unique report Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserExportQuerySettingsId",
            "in": "query",
            "description": "Internal unique user export query setting Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "FileAttachmentCreatedDateFrom",
            "in": "query",
            "description": "The created date range start date. If left null or empty, the query will not be limited to the date range.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "FileAttachmentCreatedDateTo",
            "in": "query",
            "description": "The created date range end date. If FileAttachmentCreatedDateTo is null or empty and the\r\nFileAttachmentCreatedDateFrom is not null or empty, then the query will be everything\r\ngreater and equal to FileAttachmentCreatedDateFrom.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "OnlyAvailableOnline",
            "in": "query",
            "description": "Return file attachments marked as Available Online. If the parameter is null\r\nor false, then all file attachments will be returned.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileAttachmentApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileAttachmentApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileAttachmentApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Assets/Price": {
      "post": {
        "tags": [
          "Asset"
        ],
        "summary": "Add a Price History",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SavePriceApiRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SavePriceApiRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SavePriceApiRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SavePriceApiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAssetResponseApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAssetResponseApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAssetResponseApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Assets/PoolFactor": {
      "post": {
        "tags": [
          "Asset"
        ],
        "summary": "Add a Pool Factor",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SavePoolFactorApiRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SavePoolFactorApiRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SavePoolFactorApiRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SavePoolFactorApiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAssetResponseApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAssetResponseApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAssetResponseApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Assets/QualityRating": {
      "post": {
        "tags": [
          "Asset"
        ],
        "summary": "Add a Quality Rating",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveQualityRatingApiRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveQualityRatingApiRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveQualityRatingApiRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveQualityRatingApiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAssetResponseApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAssetResponseApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAssetResponseApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Assets/DailyFactor": {
      "post": {
        "tags": [
          "Asset"
        ],
        "summary": "Add a Daily Factor",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveDailyFactorApiRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveDailyFactorApiRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveDailyFactorApiRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveDailyFactorApiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAssetResponseApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAssetResponseApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAssetResponseApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Assets/InterestRate": {
      "post": {
        "tags": [
          "Asset"
        ],
        "summary": "Add a Interest Rate",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveInterestRateApiRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveInterestRateApiRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveInterestRateApiRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveInterestRateApiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAssetResponseApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAssetResponseApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAssetResponseApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Assets/DividendEvent": {
      "post": {
        "tags": [
          "Asset"
        ],
        "summary": "Add a Dividend Event",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveDividendEventApiRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveDividendEventApiRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveDividendEventApiRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveDividendEventApiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAssetResponseApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAssetResponseApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAssetResponseApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Assets/DividendReclassificationImport": {
      "post": {
        "tags": [
          "Asset"
        ],
        "summary": "Import dividend reclassification data.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DividendReclassificationImportApiRequest"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DividendReclassificationImportApiRequest"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DividendReclassificationImportApiRequest"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DividendReclassificationImportApiRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/NoApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/BusinessDate": {
      "get": {
        "tags": [
          "BusinessDate"
        ],
        "summary": "Used to obtain the internal Id values of Cheetah objects",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/CustomerStatements": {
      "get": {
        "tags": [
          "CustomerStatement"
        ],
        "summary": "Get customer statements.",
        "parameters": [
          {
            "name": "AccountId",
            "in": "query",
            "description": "Internal unique account Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "IdentityRecordId",
            "in": "query",
            "description": "Internal unique identity record Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ReportId",
            "in": "query",
            "description": "Internal unique report Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "CustomerStatementId",
            "in": "query",
            "description": "Internal unique customer statement Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "CustomerStatementDateSettledFrom",
            "in": "query",
            "description": "The settled date range start date. If left null or empty, the query will not be limited to the date range.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "CustomerStatementDateSettledTo",
            "in": "query",
            "description": "The settled date range end date. If CustomerStatementDateSettledTo is null or empty and the\r\nCustomerStatementDateSettledFrom is not null or empty, then the query will be everything\r\ngreater and equal to CustomerStatementDateSettledFrom.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "OnlyAvailableOnline",
            "in": "query",
            "description": "Return file attachments marked as Available Online. If the parameter is null\r\nor false, then all file attachments will be returned.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "FileAttachmentId",
            "in": "query",
            "description": "Return file attachments marked as Available Online. If the parameter is null\r\nor false, then all file attachments will be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerStatementApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerStatementApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerStatementApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetCustomerStatementApiRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCustomerStatementApiRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCustomerStatementApiRequest"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Depositories": {
      "post": {
        "tags": [
          "Depository"
        ],
        "summary": "Add a new Depository",
        "requestBody": {
          "description": "SaveDepositoryApiRequest",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveDepositoryApiRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveDepositoryApiRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveDepositoryApiRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveDepositoryApiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SaveDepositoryResponseApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveDepositoryResponseApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveDepositoryResponseApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      },
      "get": {
        "tags": [
          "Depository"
        ],
        "summary": "Get Depository information.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DepositoryApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DepositoryApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DepositoryApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetDepositoryApiRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDepositoryApiRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDepositoryApiRequest"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Depositories/{identityRecordId}": {
      "get": {
        "tags": [
          "Depository"
        ],
        "summary": "Get Depository information for the given IdentityRecord Id.",
        "parameters": [
          {
            "name": "identityRecordId",
            "in": "path",
            "description": "Internal unique IdentityRecord Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DepositoryApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepositoryApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepositoryApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Fees": {
      "get": {
        "tags": [
          "Fee"
        ],
        "summary": "Get fee information.",
        "parameters": [
          {
            "name": "DateEffectiveFrom",
            "in": "query",
            "description": "Date fee effective from.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateEffectiveTo",
            "in": "query",
            "description": "Date fee effective to.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateCollectedFrom",
            "in": "query",
            "description": "Date fee collected from.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateCollectedTo",
            "in": "query",
            "description": "Date fee collected to.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "FeeType",
            "in": "query",
            "description": "Fee type.",
            "schema": {
              "$ref": "#/components/schemas/FeeType"
            }
          },
          {
            "name": "PaymentFeeCollectionType",
            "in": "query",
            "description": "Fee collection type.",
            "schema": {
              "$ref": "#/components/schemas/FeeCollectionType"
            }
          },
          {
            "name": "TransactionCategoryIds",
            "in": "query",
            "description": "Collection of fee transaction category Ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "LastModifiedDate",
            "in": "query",
            "description": "Fee last modified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FeeApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FeeApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FeeApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetFeeApiRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFeeApiRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFeeApiRequest"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": [
          "Fee"
        ],
        "summary": "Add a new fee.",
        "requestBody": {
          "description": "SaveFeeApiRequest",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveFeeApiRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveFeeApiRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveFeeApiRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveFeeApiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SaveFeeResponseApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveFeeResponseApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveFeeResponseApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Fees/{feeId}": {
      "get": {
        "tags": [
          "Fee"
        ],
        "summary": "Get fee information for the given fee Id.",
        "parameters": [
          {
            "name": "feeId",
            "in": "path",
            "description": "Internal unique fee Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FeeApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeeApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeeApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Fees/FeeBalances": {
      "get": {
        "tags": [
          "Fee"
        ],
        "summary": "Get fee balances.",
        "parameters": [
          {
            "name": "AccountAdminOfficerIds",
            "in": "query",
            "description": "Collection account administrative officer Ids to return balances.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "InstitutionIdentityRecordIds",
            "in": "query",
            "description": "Collection of institution identity record Ids to return balances.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "AccountCategoryIds",
            "in": "query",
            "description": "Collection of account category Ids to return balances.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "BalanceAmountRangeLow",
            "in": "query",
            "description": "Return fee balances greater than or equal to this amount.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "BalanceAmountRangeHigh",
            "in": "query",
            "description": "Return fee balance less than or equal to this amount.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "FeeAgeCategoryType",
            "in": "query",
            "description": "Age category (i.e. 0 - 30 days, 30 - 60 days, etc.)",
            "schema": {
              "$ref": "#/components/schemas/FeeAgeCategoryType"
            }
          },
          {
            "name": "FeeTransactionCategoryIds",
            "in": "query",
            "description": "Collection of fee transaction category Ids to return balances.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "FeeStatusTypes",
            "in": "query",
            "description": "Collection of fee status types to return balances.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FeeStatusType"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FeeBalanceApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeeBalanceApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeeBalanceApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Fees/{id}/Void": {
      "post": {
        "tags": [
          "Fee"
        ],
        "summary": "Void Fee",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "FeeId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SaveFeeResponseApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveFeeResponseApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveFeeResponseApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Fees/FeePayments": {
      "post": {
        "tags": [
          "Fee"
        ],
        "summary": "Add a new fee payment.",
        "requestBody": {
          "description": "SaveFeePaymentApiRequest",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveFeePaymentApiRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveFeePaymentApiRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveFeePaymentApiRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveFeePaymentApiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SaveFeeResponseApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveFeeResponseApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveFeeResponseApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/FeeSchedules": {
      "get": {
        "tags": [
          "FeeSchedule"
        ],
        "summary": "Get fee schedule information.",
        "parameters": [
          {
            "name": "FeeScheduleId",
            "in": "query",
            "description": "Internal unique fee schedule Id. If supplied, will return holdings for that unique Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "InstitutionIdentityRecordId",
            "in": "query",
            "description": "Used to restrict queries to specific Institutions. If not supplied, the query will be restricted\r\nto Institutions assigned to the user. To obtain an Id use the /vX/Lookup service with the parameter GetInstitutionIdentityRecordValues.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FeeScheduleApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FeeScheduleApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FeeScheduleApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetFeeScheduleApiRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFeeScheduleApiRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFeeScheduleApiRequest"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/FeeSettings": {
      "get": {
        "tags": [
          "FeeSetting"
        ],
        "summary": "Get fee setting information.",
        "parameters": [
          {
            "name": "AccountId",
            "in": "query",
            "description": "Account Id to return fee settings for. To obtain an Id use the /vX/Lookup service with the parameter GetAccountValues or GetAccountsForInstitutionValues.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "FeeSettingId",
            "in": "query",
            "description": "The fee setting Id to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "FeeSettingIds",
            "in": "query",
            "description": "The list of fee setting Ids to retrieve.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FeeSettingApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FeeSettingApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FeeSettingApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetFeeSettingApiRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFeeSettingApiRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFeeSettingApiRequest"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": [
          "FeeSetting"
        ],
        "summary": "Add a new fee setting",
        "requestBody": {
          "description": "SaveFeeSettingApiRequest",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveFeeSettingApiRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveFeeSettingApiRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveFeeSettingApiRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveFeeSettingApiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SaveFeeSettingResponseApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveFeeSettingResponseApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveFeeSettingResponseApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/FeeSettings/{id}": {
      "put": {
        "tags": [
          "FeeSetting"
        ],
        "summary": "Update a fee setting",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "FeeSettingId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "SaveFeeSettingApiRequest",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveFeeSettingApiRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveFeeSettingApiRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveFeeSettingApiRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveFeeSettingApiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SaveFeeSettingResponseApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveFeeSettingResponseApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveFeeSettingResponseApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/FeeSettings/FeePaidFromAccount": {
      "get": {
        "tags": [
          "FeeSetting"
        ],
        "summary": "Get fee paid from accounts information.",
        "parameters": [
          {
            "name": "AccountId",
            "in": "query",
            "description": "Account Id to return fee settings for. To obtain an Id use the /vX/Lookup service with the parameter GetAccountValues or GetAccountsForInstitutionValues.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "FeeSettingId",
            "in": "query",
            "description": "The fee setting Id to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "FeeSettingIds",
            "in": "query",
            "description": "The list of fee setting Ids to retrieve.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FeePaidFromAccountApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FeePaidFromAccountApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FeePaidFromAccountApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetFeeSettingApiRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFeeSettingApiRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFeeSettingApiRequest"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": [
          "FeeSetting"
        ],
        "summary": "Save fee paid from account. This will delete any existing fee paid from account records for\r\nthe given fee setting Id and replace them with what is provided in the request.",
        "requestBody": {
          "description": "SaveFeePaidFromAccountApiRequest",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SaveFeePaidFromAccountApiRequest"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SaveFeePaidFromAccountApiRequest"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SaveFeePaidFromAccountApiRequest"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SaveFeePaidFromAccountApiRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SaveFeePaidFromAccountResponseApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SaveFeePaidFromAccountResponseApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SaveFeePaidFromAccountResponseApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/FeeSettings/FeeSettingSchedule": {
      "get": {
        "tags": [
          "FeeSetting"
        ],
        "summary": "Get fee setting schedule information.",
        "parameters": [
          {
            "name": "AccountId",
            "in": "query",
            "description": "Account Id to return fee settings for. To obtain an Id use the /vX/Lookup service with the parameter GetAccountValues or GetAccountsForInstitutionValues.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "FeeSettingId",
            "in": "query",
            "description": "The fee setting Id to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "FeeSettingIds",
            "in": "query",
            "description": "The list of fee setting Ids to retrieve.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FeeSettingScheduleApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FeeSettingScheduleApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FeeSettingScheduleApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetFeeSettingApiRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFeeSettingApiRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFeeSettingApiRequest"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": [
          "FeeSetting"
        ],
        "summary": "Save fee setting schedule.",
        "requestBody": {
          "description": "SaveFeeSettingScheduleApiRequest",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SaveFeeSettingScheduleApiRequest"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SaveFeeSettingScheduleApiRequest"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SaveFeeSettingScheduleApiRequest"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SaveFeeSettingScheduleApiRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SaveFeeSettingScheduleResponseApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SaveFeeSettingScheduleResponseApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SaveFeeSettingScheduleResponseApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/FileAttachments": {
      "get": {
        "tags": [
          "FileAttachment"
        ],
        "summary": "Get file attachments.",
        "parameters": [
          {
            "name": "IdentityRecordId",
            "in": "query",
            "description": "Internal unique identity record Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ReportId",
            "in": "query",
            "description": "Internal unique report Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserExportQuerySettingsId",
            "in": "query",
            "description": "Internal unique user export query setting Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "FileAttachmentCreatedDateFrom",
            "in": "query",
            "description": "The created date range start date. If left null or empty, the query will not be limited to the date range.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "FileAttachmentCreatedDateTo",
            "in": "query",
            "description": "The created date range end date. If FileAttachmentCreatedDateTo is null or empty and the\r\nFileAttachmentCreatedDateFrom is not null or empty, then the query will be everything\r\ngreater and equal to FileAttachmentCreatedDateFrom.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "OnlyAvailableOnline",
            "in": "query",
            "description": "Return file attachments marked as Available Online. If the parameter is null\r\nor false, then all file attachments will be returned.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileAttachmentApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileAttachmentApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileAttachmentApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetFileAttachmentApiRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFileAttachmentApiRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFileAttachmentApiRequest"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/FileAttachments/{fileAttachmentId}/Download": {
      "get": {
        "tags": [
          "FileAttachment"
        ],
        "summary": "Download given file Id.",
        "parameters": [
          {
            "name": "fileAttachmentId",
            "in": "path",
            "description": "Internal unique file attachment Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Holdings": {
      "get": {
        "tags": [
          "Holding"
        ],
        "summary": "Get account holding information.",
        "parameters": [
          {
            "name": "BalanceDateFrom",
            "in": "query",
            "description": "Balance date from. Must be supplied if BalanceDateTo is supplied and must be less\r\nthan or equal to BalanceDateTo.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "BalanceDateTo",
            "in": "query",
            "description": "Balance date to. If not supplied and BalanceDateFrom has a value, will retrieve\r\nholding records with a balance date greater than or equal to the BalanceDateFrom\r\nvalue. If BalanceDateTo is supplied it must be greater than or equal to BalanceDateFrom\r\nand will retrive holding records bewtween and inclusive of BalanceDateFrom and\r\nBalanceDateTo.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "InstitutionIdentityRecordId",
            "in": "query",
            "description": "Used to restrict queries to specific Institutions. If not supplied, the query will be restricted\r\nto Institutions assigned to the user. To obtain an Id use the /vX/Lookup service with the parameter GetInstitutionIdentityRecordValues.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Determines the number of objects returned by the query.\r\nExample: A limit of 100 will return a maximum of 100 objects.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Index to specify where to start returning data.\r\nExample: An offset of 100 will return objects starting from object 101.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountHoldingApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountHoldingApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountHoldingApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccountHoldingsApiRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccountHoldingsApiRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccountHoldingsApiRequest"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Installation/InstallationInfo": {
      "get": {
        "tags": [
          "Installation"
        ],
        "summary": "Get Installation information.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetInstallationApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetInstallationApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetInstallationApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetInstallationApiRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInstallationApiRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInstallationApiRequest"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/InterfaceMasterTypes": {
      "get": {
        "tags": [
          "InterfaceMasterType"
        ],
        "summary": "Get Interface Master Type Information.",
        "parameters": [
          {
            "name": "InterfaceMasterTypeId",
            "in": "query",
            "description": "The Interface Master Type Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "InterfaceTypeId",
            "in": "query",
            "description": "The Interface Type Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InterfaceMasterTypeApiResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InterfaceMasterTypeApiResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InterfaceMasterTypeApiResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetInterfaceMasterTypeApiRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInterfaceMasterTypeApiRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInterfaceMasterTypeApiRequest"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/InterfaceMasterTypes/AccountExtractSetups": {
      "get": {
        "tags": [
          "InterfaceMasterType"
        ],
        "summary": "Get Account Extract Setup Information.",
        "parameters": [
          {
            "name": "InterfaceMasterTypeId",
            "in": "query",
            "description": "The Interface Master Type Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "InterfaceMasterTypeName",
            "in": "query",
            "description": "The Interface Master Type Name.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountExtractSetupApiResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountExtractSetupApiResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountExtractSetupApiResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccountExtractSetupApiRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccountExtractSetupApiRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccountExtractSetupApiRequest"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/InterfaceMasterTypes/TransactionImportSetups": {
      "get": {
        "tags": [
          "InterfaceMasterType"
        ],
        "summary": "Get Transaction Import Setup Information.",
        "parameters": [
          {
            "name": "InterfaceMasterTypeId",
            "in": "query",
            "description": "Interface Master Type Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "interfaceTypeId",
            "in": "query",
            "description": "Id associated with a specific interface type.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransactionImportSetupApiResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransactionImportSetupApiResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransactionImportSetupApiResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransactionImportSetupApiRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransactionImportSetupApiRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransactionImportSetupApiRequest"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Lookup": {
      "get": {
        "tags": [
          "Lookup"
        ],
        "summary": "Used to obtain the internal Id values of Cheetah objects",
        "parameters": [
          {
            "name": "LookupService",
            "in": "query",
            "description": "This is what data you would like returned.",
            "schema": {
              "$ref": "#/components/schemas/LookupServiceType"
            },
            "example": "GetUserDivisionValues, GetAllOfficerValues, etc."
          },
          {
            "name": "InstitutionIdentityRecordId",
            "in": "query",
            "description": "If the data service takes an institution identity record\r\nId, supply the value with this property.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "IdentityClassificationTypeId",
            "in": "query",
            "description": "If the data service takes an identity classification type\r\nId, supply the value with this property.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "description": "Used to narrow the results.",
            "schema": {
              "type": "string",
              "example": "Will do a wildcard type search '%Filter%'."
            },
            "example": "Will do a wildcard type search '%Filter%'."
          },
          {
            "name": "Country",
            "in": "query",
            "description": "If requesting states, use this property to filter states by country.",
            "schema": {
              "$ref": "#/components/schemas/Country"
            }
          },
          {
            "name": "EnumType",
            "in": "query",
            "description": "If requesting Enum values, use this property to specify which Enum type.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LookupApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookupApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookupApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LookupApiRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookupApiRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookupApiRequest"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Modeling/InvestmentModel": {
      "get": {
        "tags": [
          "Modeling"
        ],
        "summary": "Get investment models.",
        "parameters": [
          {
            "name": "AccountId",
            "in": "query",
            "description": "Internal unique Cheetah Id for account. To obtain an Id use the /vX/Lookup service with the parameter GetAccountValues or GetAccountsForInstitutionValues.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "AccountGroupId",
            "in": "query",
            "description": "Internal unique Cheetah Id for account group. To obtain an Id use the /vX/Lookup service with the parameter GetAccountGroupValues.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "InvestmentModelSettingId",
            "in": "query",
            "description": "Internal unique Cheetah Id for investment models. To obtain an Id use the /vX/Lookup service with the parameter GetInvestmentModelValues.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvestmentModelSettingApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvestmentModelSettingApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvestmentModelSettingApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetInvesmentModelApiRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInvesmentModelApiRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInvesmentModelApiRequest"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": [
          "Modeling"
        ],
        "summary": "Add a new Investment Model",
        "requestBody": {
          "description": "SaveInvestmentModelSettingApiRequest",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SaveInvestmentModelSettingApiRequest"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SaveInvestmentModelSettingApiRequest"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SaveInvestmentModelSettingApiRequest"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SaveInvestmentModelSettingApiRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SaveInvestmentModelSettingResponseApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveInvestmentModelSettingResponseApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveInvestmentModelSettingResponseApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Models/InvestmentModels": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "Get Investment Models",
        "responses": {
          "200": {
            "description": "Successful request.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvestmentModelApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvestmentModelApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvestmentModelApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error processing request.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Requested data not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v6/NameAndAddresses": {
      "get": {
        "tags": [
          "NameAndAddress"
        ],
        "summary": "Get NameAndAddress (Identity Record) information.",
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "description": "Optional filter parameter. Will do a filter on full name where it contains the value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "TaxId",
            "in": "query",
            "description": "Optional filter parameter. Unformatted tax id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LastModifiedDate",
            "in": "query",
            "description": "If last modified date is supplied, returns name and addresses that have been modified since that date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "IdentityCode",
            "in": "query",
            "description": "Optional filter parameter. Will lookup name and address by identity code value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "InstitutionIdentityRecordId",
            "in": "query",
            "description": "Used to restrict queries to specific Institutions. If not supplied, the query will be restricted\r\nto Institutions assigned to the user.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NameAndAddressApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NameAndAddressApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NameAndAddressApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetNameAndAddressApiRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetNameAndAddressApiRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetNameAndAddressApiRequest"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": [
          "NameAndAddress"
        ],
        "summary": "Add a new NameAndAddress (Identity Record). Please do not use to add Users, Officers, or Brokers. This\r\nfunction is only meant to be used to add Individuals and Organizations. When including address, email,\r\nor phone contact information with an existing ContactMechanismId the current contact record will be updated.",
        "requestBody": {
          "description": "SaveNameAndAddressApiRequest",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveNameAndAddressApiRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveNameAndAddressApiRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveNameAndAddressApiRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveNameAndAddressApiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SaveNameAndAddressResponseApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveNameAndAddressResponseApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveNameAndAddressResponseApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/NameAndAddresses/{identityRecordId}": {
      "get": {
        "tags": [
          "NameAndAddress"
        ],
        "summary": "Get NameAndAddress (Identity Record) information.",
        "parameters": [
          {
            "name": "identityRecordId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/NameAndAddressApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NameAndAddressApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/NameAndAddressApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/NameAndAddresses/{id}": {
      "put": {
        "tags": [
          "NameAndAddress"
        ],
        "summary": "Update a NameAndAddress (Identity Record). When including address, email, or phone data a new contact\r\nrecord will be created that replaces the current contact record of the same type.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "IdentityRecordId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "SaveNameAndAddressApiRequest",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveNameAndAddressApiRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveNameAndAddressApiRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveNameAndAddressApiRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveNameAndAddressApiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SaveNameAndAddressResponseApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveNameAndAddressResponseApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveNameAndAddressResponseApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/NameAndAddresses/{identityRecordId}/RecipientBankInformation": {
      "post": {
        "tags": [
          "NameAndAddress"
        ],
        "summary": "Add a RecipientBankInformation record to a NameAndAddress (Identity Record)",
        "parameters": [
          {
            "name": "identityRecordId",
            "in": "path",
            "description": "IdentityRecordId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "SaveRecipientBankInformationApiRequest",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveRecipientBankInformationApiRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveRecipientBankInformationApiRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveRecipientBankInformationApiRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveRecipientBankInformationApiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RecipientBankInformationApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecipientBankInformationApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecipientBankInformationApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      },
      "get": {
        "tags": [
          "NameAndAddress"
        ],
        "summary": "Get RecipientBankInformation records for a NameAndAddress (Identity Record)",
        "parameters": [
          {
            "name": "identityRecordId",
            "in": "path",
            "description": "IdentityRecordId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RecipientBankInformationApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RecipientBankInformationApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RecipientBankInformationApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/NameAndAddresses/{identityRecordId}/FileAttachments": {
      "post": {
        "tags": [
          "NameAndAddress"
        ],
        "summary": "Adds file attachments to the given identity record.",
        "parameters": [
          {
            "name": "identityRecordId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  },
                  "availableOnline": {
                    "type": "boolean"
                  }
                }
              },
              "encoding": {
                "files": {
                  "style": "form"
                },
                "availableOnline": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SaveFileAttachmentsResponseApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SaveFileAttachmentsResponseApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SaveFileAttachmentsResponseApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Requested data not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Tasks": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Get task information.",
        "parameters": [
          {
            "name": "TaskId",
            "in": "query",
            "description": "Unique task Id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "DueAsOfDate",
            "in": "query",
            "description": "Task due as of date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "AssignedToUserGuid",
            "in": "query",
            "description": "Assigned to user guid",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "AccountIds",
            "in": "query",
            "description": "Comma-delimited account ID list",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AssetId",
            "in": "query",
            "description": "Asset ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "IdentityRecordId",
            "in": "query",
            "description": "Identity record ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "GetAllTasks",
            "in": "query",
            "description": "Get All Tasks, i.e. ignore status",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetTaskApiRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTaskApiRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTaskApiRequest"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      },
      "put": {
        "tags": [
          "Task"
        ],
        "summary": "Update a Task",
        "requestBody": {
          "description": "SaveTaskApiRequest",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveTaskApiRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveTaskApiRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveTaskApiRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveTaskApiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TaskApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Create a new Task.",
        "requestBody": {
          "description": "AddTaskApiRequest",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AddTaskApiRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddTaskApiRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddTaskApiRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddTaskApiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "TaskApiModel",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TaskApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Tasks/{taskId}": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Get Task information for the given Id.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "Internal unique task id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TaskApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Tasks/{id}/Dismiss": {
      "put": {
        "tags": [
          "Task"
        ],
        "summary": "Dismiss a task with optional comment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "TaskId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userGuid",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "dismissalComment",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TaskApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Tasks/{id}/Resolve": {
      "put": {
        "tags": [
          "Task"
        ],
        "summary": "Resolve a task",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "TaskId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userGuid",
            "in": "query",
            "description": "User GUID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TaskApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Token": {
      "post": {
        "tags": [
          "Token"
        ],
        "summary": "Used to authenticate the user.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LoginApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginApiModel"
                }
              }
            }
          },
          "400": {
            "description": "Error processing request.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Trades": {
      "get": {
        "tags": [
          "Trade"
        ],
        "summary": "Get Trade information.",
        "parameters": [
          {
            "name": "TradeBlockId",
            "in": "query",
            "description": "Trade Block Id. If supplied, will return trades for the given Trade Block Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "TradeStatusType",
            "in": "query",
            "description": "If supplied, will retrieve trades for the given tradestatus Type.",
            "schema": {
              "$ref": "#/components/schemas/TradeStatusType"
            }
          },
          {
            "name": "TradeType",
            "in": "query",
            "description": "If supplied, will retrieve trades for the given trade Type.",
            "schema": {
              "$ref": "#/components/schemas/TradeType"
            }
          },
          {
            "name": "AccountId",
            "in": "query",
            "description": "Account Id. If supplied, will return trades for the given account Id. To obtain an Id use the /vX/Lookup service with the parameter GetAccountValues or GetAccountsForInstitutionValues.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "AssetId",
            "in": "query",
            "description": "Asset Id. If supplied, will return trades for the given asset Id. To obtain an Id use the /vX/Lookup service with the parameter GetAssetValues or GetAssetsForInstitutionValues.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "AccountIds",
            "in": "query",
            "description": "Array of Account Ids. If supplied, will return trades for the given list of account Ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TradeApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TradeApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TradeApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetTradeApiRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTradeApiRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTradeApiRequest"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": [
          "Trade"
        ],
        "summary": "Add a new Trade",
        "requestBody": {
          "description": "SaveAssetApiRequest",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveTradeApiRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveTradeApiRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveTradeApiRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveTradeApiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SaveTradeResponseApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveTradeResponseApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveTradeResponseApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Trades/{tradeId}": {
      "get": {
        "tags": [
          "Trade"
        ],
        "summary": "Get Trade information for the given Id.",
        "parameters": [
          {
            "name": "tradeId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TradeApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradeApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradeApiModel"
                }
              }
            }
          },
          "400": {
            "description": "Error processing request.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Request a new JWT.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Requested data not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unhandled exception."
          }
        }
      }
    },
    "/api/v6/TradeBlocks/Execute": {
      "post": {
        "tags": [
          "TradeBlock"
        ],
        "summary": "Execute trade block(s)",
        "parameters": [
          {
            "name": "TradeBlockIds",
            "in": "query",
            "description": "Array of Trade Block Ids. If supplied, will execute the given list of  Trade Block Ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExecuteTradeBlockResponseApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExecuteTradeBlockResponseApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExecuteTradeBlockResponseApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          },
          "404": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/TradeBlocks": {
      "get": {
        "tags": [
          "TradeBlock"
        ],
        "summary": "Get Trade Block information.",
        "parameters": [
          {
            "name": "TradeBlockId",
            "in": "query",
            "description": "Internal unique TradeBlockId. If supplied, will return the record for that unique Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "IsSweep",
            "in": "query",
            "description": "Return trade blocks marked as sweep. \r\nIf supplied as true, will return only records that are sweeps.\r\nIf supplied as false, will return only records that aren't sweeps.\r\nIf not supplied, will return trade blocks regardless of sweep status.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "DateSettledFrom",
            "in": "query",
            "description": "Date settled from.\r\nMust be supplied if DateSettledTo is supplied and must be less than or equal to DateSettledTo.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateSettledTo",
            "in": "query",
            "description": "Date settled to. \r\nIf not supplied and DateSettledFrom has a value, will retrieve trade block records with a settle date greater than or equal to the DateSettledFrom value. \r\nIf DateSettledTo is supplied it must be greater than or equal to DateSettledFrom and will retrive trade block records bewtween and inclusive of DateSettledFrom and DateSettledTo.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TradeBlockApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TradeBlockApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TradeBlockApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetTradeBlockApiRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTradeBlockApiRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTradeBlockApiRequest"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Transactions": {
      "get": {
        "tags": [
          "Transaction"
        ],
        "summary": "Get Transactions. If AccountId (Cheetah internal Id for an Account) is supplied, this will return all transaction records for that Account.",
        "parameters": [
          {
            "name": "AccountId",
            "in": "query",
            "description": "Internal unique account Id. If supplied, will return all transaction histories for the given unique Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "DateSettledFrom",
            "in": "query",
            "description": "Date settled from. Must be supplied if DateSettledTo is supplied and must be less\r\nthan or equal to DateSettledTo.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateSettledTo",
            "in": "query",
            "description": "Date settled to. If not supplied and DateSettledFrom has a value, will retrieve\r\ntransaction records with a settle date greater than or equal to the DateSettledFrom\r\nvalue. If DateSettledTo is supplied it must be greater than or equal to DateSettledFrom\r\nand will retrive transaction records bewtween and inclusive of DateSettledFrom and\r\nDateSettledTo.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTradedFrom",
            "in": "query",
            "description": "Date settled from. Must be supplied if DateTradedTo is supplied and must be less\r\nthan or equal to DateTradedTo.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateTradedTo",
            "in": "query",
            "description": "Date settled to. If not supplied and DateTradedFrom has a value, will retrieve\r\ntransaction records with a settle date greater than or equal to the DateTradedFrom\r\nvalue. If DateTradedTo is supplied it must be greater than or equal to DateTradedFrom\r\nand will retrive transaction records bewtween and inclusive of DateTradedFrom and\r\nDateTradedTo.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "AssetId",
            "in": "query",
            "description": "Internal unique asset Id. If supplied, will return all transaction histories for the given unique Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "TransactionCategoryId",
            "in": "query",
            "description": "Transaction category code. If supplied, will return all transactions\r\nfor the given transaction category code.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "InstitutionIdentityRecordId",
            "in": "query",
            "description": "Used to restrict queries to specific Institutions. If not supplied, the query will be restricted\r\nto Institutions assigned to the user.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "LastModifiedDate",
            "in": "query",
            "description": "If last modified date is supplied, returns transactions that have been modified since that date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "CreatedDate",
            "in": "query",
            "description": "If last created date is supplied, returns transactions that have been created since that date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransactionApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransactionApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransactionApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransactionApiRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransactionApiRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransactionApiRequest"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Transactions/Pending": {
      "get": {
        "tags": [
          "Transaction"
        ],
        "summary": "Get pending transactions.(Accepted Values : Proposed, Pending Approval, Approved, Locked, Ready)",
        "parameters": [
          {
            "name": "TransactionBatchId",
            "in": "query",
            "description": "Internal unique transaction batch Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SourceTransactionReferenceNumbers",
            "in": "query",
            "description": "A collection of source transaction reference numbers.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "TransactionStatusType",
            "in": "query",
            "description": "Transaction status type. Will return transactions that are less than or equal to the given type.\r\nAccepted Values : Proposed, Pending Approval, Approved, Locked, Ready",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TransactionStatusType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PendingTransactionApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PendingTransactionApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PendingTransactionApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetPendingTransactionsApiRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPendingTransactionsApiRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPendingTransactionsApiRequest"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": [
          "Transaction"
        ],
        "summary": "Save a pending transaction",
        "requestBody": {
          "description": "SavePendingTransactionApiRequest",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SavePendingTransactionApiRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SavePendingTransactionApiRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SavePendingTransactionApiRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SavePendingTransactionApiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionBatchApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionBatchApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionBatchApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Transactions/Pending/{transactionId}": {
      "get": {
        "tags": [
          "Transaction"
        ],
        "summary": "Get a pending transaction",
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "description": "Internal unique transaction Id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "TransactionBatchId",
            "in": "query",
            "description": "Internal unique transaction batch Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SourceTransactionReferenceNumbers",
            "in": "query",
            "description": "A collection of source transaction reference numbers.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "TransactionStatusType",
            "in": "query",
            "description": "Transaction status type. Will return transactions that are less than or equal to the given type.\r\nAccepted Values : Proposed, Pending Approval, Approved, Locked, Ready",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TransactionStatusType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PendingTransactionApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PendingTransactionApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PendingTransactionApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Transactions/PendingScheduledTransactions": {
      "get": {
        "tags": [
          "Transaction"
        ],
        "summary": "Get preview pending scheduled transaction occurrences.(Accepted Values : Pending Approval, Approved, Ready)",
        "parameters": [
          {
            "name": "ScheduledTransactionIds",
            "in": "query",
            "description": "A collection of ScheduledTransaction Ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "AccountIds",
            "in": "query",
            "description": "A collection of internal unique Account Ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "TransactionStatusType",
            "in": "query",
            "description": "Transaction status type. Only PendingApproval, Approved, or Ready are allowed.",
            "schema": {
              "$ref": "#/components/schemas/TransactionStatusType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransactionApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransactionApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransactionApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetPendingScheduledTransactionsApiRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPendingScheduledTransactionsApiRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPendingScheduledTransactionsApiRequest"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Transactions/ScheduledTransactions": {
      "get": {
        "tags": [
          "Transaction"
        ],
        "summary": "Get scheduled transaction occurrences",
        "parameters": [
          {
            "name": "ScheduledTransactionOccurrenceIds",
            "in": "query",
            "description": "A collection of Scheduled Transaction Occurrence Ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "AccountIds",
            "in": "query",
            "description": "A collection of internal unique Account Ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "TransactionStatusType",
            "in": "query",
            "description": "Transaction status type.",
            "schema": {
              "$ref": "#/components/schemas/TransactionStatusType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduledTransactionOccurrenceApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduledTransactionOccurrenceApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduledTransactionOccurrenceApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetPendingScheduledTransactionsApiRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPendingScheduledTransactionsApiRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPendingScheduledTransactionsApiRequest"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Transactions/ScheduledTransactions/Ready": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "summary": "Ready scheduled transaction occurrences",
        "parameters": [
          {
            "name": "ScheduledTransactionOccurrenceIds",
            "in": "query",
            "description": "A collection of Scheduled Transaction Occurrence Ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "AccountIds",
            "in": "query",
            "description": "A collection of internal unique Account Ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduledTransactionOccurrenceApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduledTransactionOccurrenceApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduledTransactionOccurrenceApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Transactions/ScheduledTransactions/Release": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "summary": "Release scheduled transaction occurrences",
        "parameters": [
          {
            "name": "ScheduledTransactionOccurrenceIds",
            "in": "query",
            "description": "A collection of Scheduled Transaction Occurrence Ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "AccountIds",
            "in": "query",
            "description": "A collection of internal unique Account Ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduledTransactionOccurrenceApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduledTransactionOccurrenceApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduledTransactionOccurrenceApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Transactions/ScheduledTransactions/Cancel": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "summary": "Cancel scheduled transaction occurrences",
        "parameters": [
          {
            "name": "ScheduledTransactionOccurrenceIds",
            "in": "query",
            "description": "A collection of Scheduled Transaction Occurrence Ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "AccountIds",
            "in": "query",
            "description": "A collection of internal unique Account Ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduledTransactionOccurrenceApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduledTransactionOccurrenceApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduledTransactionOccurrenceApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/Transactions/ScheduledTransactions/Setup": {
      "get": {
        "tags": [
          "Transaction"
        ],
        "summary": "Get scheduled transaction setups",
        "parameters": [
          {
            "name": "ScheduledTransactionIds",
            "in": "query",
            "description": "A collection of ScheduledTransaction Ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "AccountIds",
            "in": "query",
            "description": "A collection of internal unique Account Ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "TransactionStatusType",
            "in": "query",
            "description": "Transaction status type.",
            "schema": {
              "$ref": "#/components/schemas/TransactionStatusType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduledTransactionApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduledTransactionApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduledTransactionApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetScheduledTransactionSetupsApiRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetScheduledTransactionSetupsApiRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetScheduledTransactionSetupsApiRequest"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      },
      "delete": {
        "tags": [
          "Transaction"
        ],
        "summary": "Delete scheduled transaction setups",
        "parameters": [
          {
            "name": "ScheduledTransactionIds",
            "in": "query",
            "description": "A collection of ScheduledTransaction Ids.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduledTransactionApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduledTransactionApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduledTransactionApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/TransactionBatches": {
      "post": {
        "tags": [
          "TransactionBatch"
        ],
        "summary": "Add a new transaction batch",
        "requestBody": {
          "description": "SaveTransactionBatchApiRequest",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveTransactionBatchApiRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveTransactionBatchApiRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveTransactionBatchApiRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveTransactionBatchApiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionBatchApiModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionBatchApiModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionBatchApiModel"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/TransactionBatches/Post": {
      "post": {
        "tags": [
          "TransactionBatch"
        ],
        "summary": "Post Transaction Batches",
        "parameters": [
          {
            "name": "TransactionBatchIds",
            "in": "query",
            "description": "Array of Transaction Batch Ids. If supplied, will post the given list of  Transaction Batch Ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransactionBatchApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransactionBatchApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransactionBatchApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          },
          "404": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/TransactionBatches/Ready": {
      "post": {
        "tags": [
          "TransactionBatch"
        ],
        "summary": "Ready Transaction Batches",
        "parameters": [
          {
            "name": "TransactionBatchIds",
            "in": "query",
            "description": "Array of Transaction Batch Ids. If supplied, will change status for the given list of  Transaction Batch Ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransactionBatchApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransactionBatchApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransactionBatchApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          },
          "404": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/TransactionBatches/Lock": {
      "post": {
        "tags": [
          "TransactionBatch"
        ],
        "summary": "Lock Transaction Batches",
        "parameters": [
          {
            "name": "TransactionBatchIds",
            "in": "query",
            "description": "Array of Transaction Batch Ids. If supplied, will change status for the given list of  Transaction Batch Ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransactionBatchApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransactionBatchApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransactionBatchApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          },
          "404": {
            "description": ""
          }
        }
      }
    },
    "/api/v6/TransactionBatches/Unlock": {
      "post": {
        "tags": [
          "TransactionBatch"
        ],
        "summary": "Unlock Transaction Batches",
        "parameters": [
          {
            "name": "TransactionBatchIds",
            "in": "query",
            "description": "Array of Transaction Batch Ids. If supplied, will change status for the given list of  Transaction Batch Ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransactionBatchApiModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransactionBatchApiModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransactionBatchApiModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          },
          "404": {
            "description": ""
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccountAlertApiRequest": {
        "required": [
          "AlertTypeId",
          "Message",
          "Subject"
        ],
        "type": "object",
        "properties": {
          "AlertId": {
            "type": "integer",
            "description": "Internal unique alert Id. If supplied, will return the record for that unique Id.\r\n[SwaggerIgnore]",
            "format": "int32",
            "nullable": true
          },
          "AlertTypeId": {
            "$ref": "#/components/schemas/AlertType"
          },
          "UserGuid": {
            "type": "string",
            "description": "GUID of the Cheetah User to post the alert to. To obtain an Id use the /vX/Lookup service with the parameter GetActiveUserValues.",
            "format": "uuid",
            "nullable": true
          },
          "UserName": {
            "type": "string",
            "description": "User Name of Cheetah user to receive the alert.",
            "nullable": true
          },
          "IdentityRecordId": {
            "type": "integer",
            "description": "Identity Record ID of Cheetah user to receive the alert.",
            "format": "int32",
            "nullable": true
          },
          "RelatedId": {
            "type": "integer",
            "description": "Related Alert ID.",
            "format": "int32",
            "nullable": true
          },
          "Subject": {
            "type": "string",
            "description": "Subject of Alert message."
          },
          "Message": {
            "type": "string",
            "description": "Alert message."
          }
        },
        "additionalProperties": false,
        "description": "Account Alert API Request Model"
      },
      "AccountApiModel": {
        "type": "object",
        "properties": {
          "InstitutionIdentityRecordId": {
            "type": "integer",
            "description": "Internal institution identity record Id. To obtain an Id use the /vX/Lookup service with the parameter GetInstitutionIdentityRecordValues.",
            "format": "int32"
          },
          "AccountId": {
            "type": "integer",
            "description": "Internal unique account Id.",
            "format": "int32"
          },
          "Number": {
            "type": "string",
            "description": "Account number.",
            "nullable": true
          },
          "Code": {
            "type": "string",
            "description": "Account code.",
            "nullable": true
          },
          "LegalName": {
            "type": "string",
            "description": "Account legal name.",
            "nullable": true
          },
          "DisplayName": {
            "type": "string",
            "description": "Account preferred display name.",
            "nullable": true
          },
          "AccountPurposeType": {
            "$ref": "#/components/schemas/AccountPurposeType"
          },
          "AccountPurposeTypeName": {
            "type": "string",
            "description": "Account purpose type.",
            "nullable": true,
            "readOnly": true
          },
          "AccountStatusType": {
            "$ref": "#/components/schemas/AccountStatusType"
          },
          "AccountStatusTypeName": {
            "type": "string",
            "description": "Account status type name.",
            "nullable": true,
            "readOnly": true
          },
          "DivisionIdentityRecordId": {
            "type": "integer",
            "description": "Internal unique division identity record Id.",
            "format": "int32"
          },
          "DateOpened": {
            "type": "string",
            "description": "Date account was opened.",
            "format": "date-time",
            "nullable": true
          },
          "DateEstablished": {
            "type": "string",
            "description": "Date account was established.",
            "format": "date-time",
            "nullable": true
          },
          "DateClosed": {
            "type": "string",
            "description": "Date account was closed.",
            "format": "date-time",
            "nullable": true
          },
          "TaxId": {
            "type": "string",
            "description": "The TaxID or SSN.",
            "nullable": true
          },
          "TaxIdType": {
            "$ref": "#/components/schemas/TaxIdType"
          },
          "TaxIdTypeName": {
            "type": "string",
            "description": "Tax Id type name.",
            "nullable": true,
            "readOnly": true
          },
          "TaxIdStatusType": {
            "$ref": "#/components/schemas/TaxIdStatusType"
          },
          "TaxIdStatusTypeName": {
            "type": "string",
            "description": "Tax Id status type name.",
            "nullable": true,
            "readOnly": true
          },
          "TaxIdTypeCode": {
            "type": "string",
            "description": "The type of the tax Id (SSN, TIN, SIN).",
            "nullable": true
          },
          "TaxIdTypeCountry": {
            "$ref": "#/components/schemas/Country"
          },
          "TaxIdTypeCountryName": {
            "type": "string",
            "description": "The country name for the tax Id type.",
            "nullable": true,
            "readOnly": true
          },
          "StateProvince": {
            "$ref": "#/components/schemas/StateProvince"
          },
          "StateProvinceName": {
            "type": "string",
            "description": "State province full name.",
            "nullable": true,
            "readOnly": true
          },
          "Country": {
            "$ref": "#/components/schemas/Country"
          },
          "CountryName": {
            "type": "string",
            "description": "Country full name.",
            "nullable": true,
            "readOnly": true
          },
          "Comments": {
            "type": "string",
            "description": "Account comments.",
            "nullable": true
          },
          "IsActive": {
            "type": "boolean",
            "description": "Is account still active."
          },
          "AccountSettingsId": {
            "type": "integer",
            "description": "Internal unique account settings Id.",
            "format": "int32"
          },
          "IsPrincipalOnly": {
            "type": "boolean",
            "description": "If true, income and principal balances are combined for reporting purposes."
          },
          "MarketValue": {
            "type": "number",
            "description": "Market Value.",
            "format": "double",
            "nullable": true
          },
          "PrincipalCashAmount": {
            "type": "number",
            "description": "Principal cash amount.",
            "format": "double",
            "nullable": true
          },
          "IncomeCashAmount": {
            "type": "number",
            "description": "Income cash amount.",
            "format": "double",
            "nullable": true
          },
          "PrincipalInvestAmount": {
            "type": "number",
            "description": "Principal investment amount.",
            "format": "double",
            "nullable": true
          },
          "IncomeInvestAmount": {
            "type": "number",
            "description": "Income investment amount.",
            "format": "double",
            "nullable": true
          },
          "PrincipalSweptAmount": {
            "type": "number",
            "description": "Principal swept amount.",
            "format": "double",
            "nullable": true
          },
          "IncomeSweptAmount": {
            "type": "number",
            "description": "Income swept amount.",
            "format": "double",
            "nullable": true
          },
          "PrincipalInventoryAmount": {
            "type": "number",
            "description": "Principal inventory amount.",
            "format": "double",
            "nullable": true
          },
          "IncomeInventoryAmount": {
            "type": "number",
            "description": "Income inventory amount.",
            "format": "double",
            "nullable": true
          },
          "AccountCategoryId": {
            "type": "integer",
            "description": "Internal account category Id. You can use\r\nApi/v2/AccountCategories to retrieve more information about the account category.",
            "format": "int32"
          },
          "AccountRelationships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountRelationshipApiModel"
            },
            "description": "A collection of account relationships.",
            "nullable": true
          },
          "AccountCustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldApiModel"
            },
            "description": "A collection of custom fields for the account.",
            "nullable": true
          },
          "AccountModifiedDate": {
            "type": "string",
            "description": "Account modification date.",
            "format": "date-time",
            "nullable": true
          },
          "AccountModifiedBy": {
            "type": "string",
            "description": "Account modified by.",
            "nullable": true
          },
          "AccountCreatedDate": {
            "type": "string",
            "description": "Account creation date.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountCategoryApiModel": {
        "type": "object",
        "properties": {
          "AccountCategoryId": {
            "type": "integer",
            "description": "Internal unique account category Id.",
            "format": "int32"
          },
          "Code": {
            "type": "integer",
            "description": "Account category code.",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Account category description.",
            "nullable": true
          },
          "CanReinvestIncome": {
            "type": "boolean",
            "description": "Account reinvest income option."
          },
          "InsuredAmount": {
            "type": "number",
            "description": "Insured amount.",
            "format": "double"
          },
          "IsActive": {
            "type": "boolean",
            "description": "Account category is active."
          },
          "RCTCategoryType": {
            "$ref": "#/components/schemas/RCTCategoryType"
          },
          "RCTCategoryTypeName": {
            "type": "string",
            "description": "RCT category type name.",
            "nullable": true,
            "readOnly": true
          },
          "RCTCode": {
            "type": "string",
            "description": "RCT code.",
            "nullable": true
          },
          "RetirementAccountCategory": {
            "$ref": "#/components/schemas/RetirementAccountCategory"
          },
          "RetirementAccountCategoryDescription": {
            "type": "string",
            "description": "Retirement account category description.",
            "nullable": true,
            "readOnly": true
          },
          "ReinvestOptionType": {
            "$ref": "#/components/schemas/ReinvestOptionType"
          },
          "ReinvestOptionTypeName": {
            "type": "string",
            "description": "Reinvest option type name.",
            "nullable": true,
            "readOnly": true
          },
          "TaxLotHarvestingType": {
            "$ref": "#/components/schemas/TaxLotHarvestingType"
          },
          "TaxLotHarvestingTypeName": {
            "type": "string",
            "description": "Tax lot harvesting type name.",
            "nullable": true,
            "readOnly": true
          },
          "AmortizationType": {
            "$ref": "#/components/schemas/AmortizationType"
          },
          "AmortizationTypeName": {
            "type": "string",
            "description": "Amortization type name.",
            "nullable": true,
            "readOnly": true
          },
          "CreatedDate": {
            "type": "string",
            "description": "Account category created date and time.",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "description": "Account category modified by.",
            "nullable": true
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Account category modified date and time.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountDepositApiRequest": {
        "required": [
          "AccountId",
          "BatchName",
          "DateSettled",
          "TaxYear",
          "TransactionCategoryId"
        ],
        "type": "object",
        "properties": {
          "BatchName": {
            "type": "string",
            "description": "Transaction batch name to be used."
          },
          "AccountId": {
            "type": "integer",
            "description": "The account Id to deposit into. To obtain an Id use the /vX/Lookup service with the parameter GetAccountValues or GetAccountsForInstitutionValues.",
            "format": "int32"
          },
          "TransactionCategoryId": {
            "type": "integer",
            "description": "The Transaction category for deposit.  To obtain an Id use the /vX/Lookup service with the parameter GetTransactionCategoryValues.",
            "format": "int32"
          },
          "DateSettled": {
            "type": "string",
            "description": "Date the transaction is settled.",
            "format": "date-time"
          },
          "TaxYear": {
            "type": "integer",
            "description": "Tax year the transaction should be applied to.",
            "format": "int32"
          },
          "PrincipalCash": {
            "type": "number",
            "description": "Principal cash amount.",
            "format": "double",
            "nullable": true
          },
          "IncomeCash": {
            "type": "number",
            "description": "Income cash amount.",
            "format": "double",
            "nullable": true
          },
          "Narrative": {
            "type": "string",
            "description": "Transaction narrative.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountExtractSetupApiResponse": {
        "type": "object",
        "properties": {
          "InterfaceAccountExtractSetupId": {
            "type": "integer",
            "format": "int32"
          },
          "InterfaceMasterTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "AccountId": {
            "type": "integer",
            "format": "int32"
          },
          "InterfaceTypeName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Account Extract Setup Api Response"
      },
      "AccountGroupApiModel": {
        "type": "object",
        "properties": {
          "AccountGroupId": {
            "type": "integer",
            "description": "Internal unique account group Id.",
            "format": "int32"
          },
          "AccountGroupName": {
            "type": "string",
            "description": "Account group name.",
            "nullable": true
          },
          "AccountGroupLongName": {
            "type": "string",
            "description": "Account group long name.",
            "nullable": true
          },
          "ParentAccountGroupId": {
            "type": "integer",
            "description": "Parent Account Group Id",
            "format": "int32"
          },
          "InvestmentObjectiveId": {
            "type": "integer",
            "description": "Investment Objective Id",
            "format": "int32"
          },
          "IsStatementGroup": {
            "type": "boolean",
            "description": "Is statement group"
          },
          "IsRelationshipView": {
            "type": "boolean",
            "description": "Is relationship view."
          },
          "IsForInvestmentProcessing": {
            "type": "boolean",
            "description": "Is for investment processing"
          },
          "IsActive": {
            "type": "boolean",
            "description": "Is active"
          },
          "MarketValueAmount": {
            "type": "number",
            "description": "Market value amount",
            "format": "double"
          },
          "AvailableCashAmount": {
            "type": "number",
            "description": "Available cash amount",
            "format": "double"
          },
          "AccountsInGroup": {
            "type": "integer",
            "description": "Accounts in group",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "AccountGroupRelationshipsApiModel": {
        "type": "object",
        "properties": {
          "AccountId": {
            "type": "integer",
            "description": "Internal unique account id.",
            "format": "int32"
          },
          "AccountNumber": {
            "type": "string",
            "description": "Account number.",
            "nullable": true
          },
          "IsPrimary": {
            "type": "boolean",
            "description": "Is Primary."
          },
          "EffectiveFrom": {
            "type": "string",
            "description": "Date from which the relationship is effective",
            "nullable": true
          },
          "EffectiveTo": {
            "type": "string",
            "description": "Date to which the relationship is effective",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountHoldingApiModel": {
        "type": "object",
        "properties": {
          "AccountId": {
            "type": "integer",
            "description": "Internal account Id.",
            "format": "int32"
          },
          "AccountNumber": {
            "type": "string",
            "description": "Account number.",
            "nullable": true
          },
          "AccountModifiedDate": {
            "type": "string",
            "description": "Account modified date.",
            "format": "date-time",
            "nullable": true
          },
          "AccountModifiedBy": {
            "type": "string",
            "description": "Account modified by name.",
            "nullable": true
          },
          "AccountCreatedDate": {
            "type": "string",
            "description": "Account created date.",
            "format": "date-time",
            "nullable": true
          },
          "Holdings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HoldingApiModel"
            },
            "description": "Array of holdings for the account.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountPurposeType": {
        "enum": [
          "Client",
          "FeeSuspense",
          "TaxWHSuspense",
          "AccountTemplate"
        ],
        "type": "string"
      },
      "AccountRelationshipApiModel": {
        "type": "object",
        "properties": {
          "AccountRelationshipId": {
            "type": "integer",
            "description": "Internal unique account relationship Id.",
            "format": "int32"
          },
          "AccountRelationshipTypeId": {
            "type": "integer",
            "description": "Account relationship type.",
            "format": "int32"
          },
          "AccountRelationshipTypeName": {
            "type": "string",
            "description": "Account relationship type name.",
            "nullable": true
          },
          "AccountId": {
            "type": "integer",
            "description": "Internal unique account Id.",
            "format": "int32"
          },
          "AccountNumber": {
            "type": "string",
            "description": "Account Number.",
            "nullable": true
          },
          "OwnershipPercent": {
            "type": "number",
            "description": "ownership percentage",
            "format": "double",
            "nullable": true
          },
          "IsProxyRecipient": {
            "type": "boolean",
            "description": "Is a proxy recipient."
          },
          "DoesReceiveApprovalLetter": {
            "type": "boolean",
            "description": "Does receive approval letters."
          },
          "DoesReceiveTradeNotification": {
            "type": "boolean",
            "description": "Does receive trade notifications."
          },
          "DoesUseAccunet": {
            "type": "boolean",
            "description": "Does use AccuNet."
          },
          "DomainModelClass": {
            "$ref": "#/components/schemas/DomainModelClass"
          },
          "DomainModelClassName": {
            "type": "string",
            "description": "Domain model class name.",
            "nullable": true,
            "readOnly": true
          },
          "IsActive": {
            "type": "boolean",
            "description": "Is the account relationship still active."
          },
          "IdentityClassificationType": {
            "$ref": "#/components/schemas/IdentityClassificationType"
          },
          "IdentityClassificationTypeName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ReportRelationships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountReportRelationshipApiModel"
            },
            "description": "A collection of report relationships.",
            "nullable": true
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Account relationship modified date.",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "description": "Account relationship modified by.",
            "nullable": true
          },
          "CreatedDate": {
            "type": "string",
            "description": "Account relationship creation date.",
            "format": "date-time",
            "nullable": true
          },
          "IdentityRecord": {
            "$ref": "#/components/schemas/IdentityRecordApiModel"
          }
        },
        "additionalProperties": false
      },
      "AccountRelationshipRecordApiModel": {
        "type": "object",
        "properties": {
          "AccountRelationshipId": {
            "type": "integer",
            "description": "Internal unique account relationship Id.",
            "format": "int32"
          },
          "AccountRelationshipTypeId": {
            "type": "integer",
            "description": "Account relationship type.",
            "format": "int32"
          },
          "AccountRelationshipTypeName": {
            "type": "string",
            "description": "Account relationship type name.",
            "nullable": true
          },
          "AccountId": {
            "type": "integer",
            "description": "Internal unique account Id.",
            "format": "int32"
          },
          "AccountNumber": {
            "type": "string",
            "description": "Account Number.",
            "nullable": true
          },
          "OwnershipPercent": {
            "type": "number",
            "description": "ownership percentage",
            "format": "double",
            "nullable": true
          },
          "IsProxyRecipient": {
            "type": "boolean",
            "description": "Is a proxy recipient."
          },
          "DoesReceiveApprovalLetter": {
            "type": "boolean",
            "description": "Does receive approval letters."
          },
          "DoesReceiveTradeNotification": {
            "type": "boolean",
            "description": "Does receive trade notifications."
          },
          "DoesUseAccunet": {
            "type": "boolean",
            "description": "Does use AccuNet."
          },
          "DomainModelClass": {
            "$ref": "#/components/schemas/DomainModelClass"
          },
          "DomainModelClassName": {
            "type": "string",
            "description": "Domain model class name.",
            "nullable": true,
            "readOnly": true
          },
          "IsActive": {
            "type": "boolean",
            "description": "Is the account relationship still active."
          },
          "IdentityClassificationType": {
            "$ref": "#/components/schemas/IdentityClassificationType"
          },
          "IdentityClassificationTypeName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ReportRelationships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountReportRelationshipApiModel"
            },
            "description": "A collection of report relationships.",
            "nullable": true
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Account relationship modified date.",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "description": "Account relationship modified by.",
            "nullable": true
          },
          "CreatedDate": {
            "type": "string",
            "description": "Account relationship creation date.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountRelationshipType": {
        "enum": [
          "AccountAdministrator",
          "InvestmentManager",
          "TaxManager",
          "OtherManager",
          "BeneficialOwner",
          "PrimaryBeneficiary",
          "PrimaryBeneficiarySpouse",
          "SecondaryBeneficiary",
          "CTABeneficiary",
          "DirectedBroker",
          "ManagingTrustee",
          "Trustee",
          "CoTrustee",
          "Donor",
          "Grantor",
          "Guardian",
          "InvestmentAdvisorManager",
          "AccountingFirm",
          "Attorney",
          "LawFirm",
          "ExecutorExecutrix",
          "Fiduciary",
          "CoFiduciary",
          "InsuranceCompany",
          "PowerOfAttorney",
          "Mortuary",
          "TaxAdvisorAccountant",
          "Unknown"
        ],
        "type": "string"
      },
      "AccountReportRelationshipApiModel": {
        "type": "object",
        "properties": {
          "AccountReportRelationshipId": {
            "type": "integer",
            "description": "Internal unique account report relationship Id.",
            "format": "int32"
          },
          "AccountRelationshipId": {
            "type": "integer",
            "description": "Internal unique account relationship Id.",
            "format": "int32"
          },
          "ReportId": {
            "type": "integer",
            "description": "Internal unique report Id.",
            "format": "int32"
          },
          "ReportName": {
            "type": "string",
            "description": "Report name.",
            "nullable": true
          },
          "ReportType": {
            "$ref": "#/components/schemas/ReportType"
          },
          "ReportTypeName": {
            "type": "string",
            "description": "Report type name.",
            "nullable": true,
            "readOnly": true
          },
          "FrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "FrequencyTypeName": {
            "type": "string",
            "description": "Frequency type name.",
            "nullable": true,
            "readOnly": true
          },
          "FrequencyMonth": {
            "type": "integer",
            "description": "Frequency Month.",
            "format": "int32",
            "nullable": true
          },
          "IsElectronic": {
            "type": "boolean",
            "description": "Is electronic report."
          },
          "IsPaper": {
            "type": "boolean",
            "description": "Is paper report."
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Account report relationship modified date.",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "description": "Account report relationship modified by.",
            "nullable": true
          },
          "CreatedDate": {
            "type": "string",
            "description": "Account report relationship creation date.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountSettingsApiModel": {
        "type": "object",
        "properties": {
          "BusinessDate": {
            "type": "string",
            "description": "Current business date.",
            "format": "date-time"
          },
          "AccountSettingsId": {
            "type": "integer",
            "description": "Interanl unique Cheetah Id for account settings.",
            "format": "int32"
          },
          "AccountId": {
            "type": "integer",
            "description": "Internal unique Cheetah Id for the account related to the account settings.",
            "format": "int32"
          },
          "AccountNumber": {
            "type": "string",
            "description": "The account number related to the account settings.",
            "nullable": true
          },
          "InvestmentObjectiveId": {
            "type": "integer",
            "description": "Internal unique Cheetah Id for investment objective.",
            "format": "int32",
            "nullable": true
          },
          "InvestmentReviewFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "InvestmentReviewFrequencyTypeName": {
            "type": "string",
            "description": "The name of the investment review frequency type.",
            "nullable": true,
            "readOnly": true
          },
          "InvestmentReviewFrequencyMonthOffset": {
            "type": "integer",
            "description": "The investment review frequency month offset.",
            "format": "int32",
            "nullable": true
          },
          "AdministrativeReviewFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "AdministrativeReviewFrequencyTypeName": {
            "type": "string",
            "description": "The name of the administrative review frequency type.",
            "nullable": true,
            "readOnly": true
          },
          "AdministrativeReviewFrequencyMonthOffset": {
            "type": "integer",
            "description": "The administrative review frequency month offset.",
            "format": "int32",
            "nullable": true
          },
          "IsPurchaseRestricted": {
            "type": "boolean",
            "description": "Ard purchases restricted."
          },
          "IsSalesRestricted": {
            "type": "boolean",
            "description": "Are sales restricted."
          },
          "DateOfRestrictionExpiration": {
            "type": "string",
            "description": "Date of restriction expiration.",
            "format": "date-time",
            "nullable": true
          },
          "IsMutualFundPurchaseRestricted": {
            "type": "boolean",
            "description": "Are mtual fund purchases restricted."
          },
          "IsMutualFundSalesRestricted": {
            "type": "boolean",
            "description": "Are mutual fund sales restricted."
          },
          "DateOfMutualFundRestrictionExpiration": {
            "type": "string",
            "description": "Date of mutual funde restriction expiration.",
            "format": "date-time",
            "nullable": true
          },
          "MutualFundStatus": {
            "type": "string",
            "description": "Mutual fund status.",
            "nullable": true,
            "readOnly": true
          },
          "IsInternalReportRecipient": {
            "type": "boolean",
            "description": "Is internal report recipient."
          },
          "ShowExtraordinaryFeeSummary": {
            "type": "boolean",
            "description": "Show extraordinary fee summary."
          },
          "ReinvestOptionType": {
            "$ref": "#/components/schemas/ReinvestOptionType"
          },
          "ReinvestOptionTypeName": {
            "type": "string",
            "description": "Reinvest option type name.",
            "nullable": true,
            "readOnly": true
          },
          "SpecificPowers": {
            "type": "string",
            "description": "Specific powers.",
            "nullable": true
          },
          "DistributionOfPrincipal": {
            "type": "string",
            "description": "Distribution of principal.",
            "nullable": true
          },
          "IsPrincipalOnly": {
            "type": "boolean",
            "description": "Is principal only."
          },
          "CapacityCategoryId": {
            "type": "integer",
            "description": "Internal unique Cheetah Id for capacity category.",
            "format": "int32",
            "nullable": true
          },
          "InvestmentPowerTypeId": {
            "type": "integer",
            "description": "Internal unique CheetahId for investment power type.",
            "format": "int32",
            "nullable": true
          },
          "ProxyInvestmentPowerType": {
            "$ref": "#/components/schemas/ProxyInvestmentPowerType"
          },
          "ProxyInvestmentPowerTypeName": {
            "type": "string",
            "description": "Proxy investment power type name.",
            "nullable": true,
            "readOnly": true
          },
          "LongTermLossCarryForwardAmount": {
            "type": "number",
            "description": "Long term loss carry forward amount.",
            "format": "double",
            "nullable": true
          },
          "ShortTermLossCarryForwardAmount": {
            "type": "number",
            "description": "Short term loss carry forward amount.",
            "format": "double",
            "nullable": true
          },
          "DateCarryForward": {
            "type": "string",
            "description": "Date carry forward.",
            "format": "date-time",
            "nullable": true
          },
          "TaxationType": {
            "$ref": "#/components/schemas/TaxationType"
          },
          "TaxationTypeName": {
            "type": "string",
            "description": "Taxation type name.",
            "nullable": true,
            "readOnly": true
          },
          "DateTaxYearEnd": {
            "type": "string",
            "description": "Date tax year end.",
            "format": "date-time",
            "nullable": true
          },
          "DateTaxYearMonth": {
            "type": "integer",
            "description": "Month of date tax year end.",
            "format": "int32",
            "nullable": true
          },
          "DateTaxYearDay": {
            "type": "integer",
            "description": "Day of date tax year end.",
            "format": "int32",
            "nullable": true
          },
          "CapitalGainRatePercent": {
            "type": "number",
            "description": "Capital gain rate percent.",
            "format": "double",
            "nullable": true
          },
          "TaxInterfaceType": {
            "$ref": "#/components/schemas/TaxInterfaceType"
          },
          "TaxInterfaceTypeName": {
            "type": "string",
            "description": "Tax interface type name.",
            "nullable": true,
            "readOnly": true
          },
          "Tax1099LevelType": {
            "$ref": "#/components/schemas/Tax1099LevelType"
          },
          "Tax1099LevelTypeName": {
            "type": "string",
            "description": "Tax 1099 level type name.",
            "nullable": true,
            "readOnly": true
          },
          "Tax1099RecipientType": {
            "$ref": "#/components/schemas/Tax1099RecipientType"
          },
          "Tax1099RecipientTypeName": {
            "type": "string",
            "description": "Tax 1099 recipient type name.",
            "nullable": true,
            "readOnly": true
          },
          "IsOverdraftAllowed": {
            "type": "boolean",
            "description": "Is overdraft allowed."
          },
          "IsNetCashOverdraft": {
            "type": "boolean",
            "description": "Is net cash overdraft."
          },
          "SweepSetupId": {
            "type": "integer",
            "description": "Internal uniques Cheetah Id for sweep setup.",
            "format": "int32",
            "nullable": true
          },
          "CashAutoTransferType": {
            "$ref": "#/components/schemas/AutoTransferType"
          },
          "CashAutoTransferTypeName": {
            "type": "string",
            "description": "Cash auto transfer type name.",
            "nullable": true,
            "readOnly": true
          },
          "PrincipalReserveAmount": {
            "type": "number",
            "description": "Principal reserve amount.",
            "format": "double"
          },
          "IncomeReserveAmount": {
            "type": "number",
            "description": "Income reserve amount.",
            "format": "double"
          },
          "SweepPrincipalReserveAmount": {
            "type": "number",
            "description": "Sweep principal reserve amount.",
            "format": "double"
          },
          "SweepIncomeReserveAmount": {
            "type": "number",
            "description": "Sweep income reservice amount.",
            "format": "double"
          },
          "TaxLotHarvestingType": {
            "$ref": "#/components/schemas/TaxLotHarvestingType"
          },
          "TaxLotHarvestingTypeName": {
            "type": "string",
            "description": "Tax log harvesting type name.",
            "nullable": true,
            "readOnly": true
          },
          "AmortizationType": {
            "$ref": "#/components/schemas/AmortizationType"
          },
          "AmortizationTypeName": {
            "type": "string",
            "description": "Amortization type name.",
            "nullable": true,
            "readOnly": true
          },
          "ComptrollerType": {
            "$ref": "#/components/schemas/ComptrollerType"
          },
          "ComptrollerTypeName": {
            "type": "string",
            "description": "Comptroller type name.",
            "nullable": true,
            "readOnly": true
          },
          "CashDescription": {
            "type": "string",
            "description": "Cash description.",
            "nullable": true
          },
          "PerformanceIndexSettingId": {
            "type": "integer",
            "description": "Internal unique Cheetah Id for performance index setting.",
            "format": "int32",
            "nullable": true
          },
          "LegacyPriorYearEnd": {
            "type": "string",
            "description": "Legacy prior year end.",
            "format": "date-time",
            "nullable": true
          },
          "LegacyPriorYearEndMarketValue": {
            "type": "number",
            "description": "Legacy prior year end market value.",
            "format": "double",
            "nullable": true
          },
          "LegacyYtdContributions": {
            "type": "number",
            "description": "Legacy year to date contributions.",
            "format": "double",
            "nullable": true
          },
          "LegacyYtdDistributions": {
            "type": "number",
            "description": "Legacy year to date distributions.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountStatusApiRequest": {
        "required": [
          "AccountIds",
          "AccountStatusType"
        ],
        "type": "object",
        "properties": {
          "AccountIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The account Ids of statuses to change. This can be one or many accounts."
          },
          "AccountStatusType": {
            "$ref": "#/components/schemas/AccountStatusType"
          },
          "DateClosed": {
            "type": "string",
            "description": "When the account status is set to Closed, a closed date is required. If account status is not Closed, this parameter is not used.",
            "format": "date-time",
            "nullable": true
          },
          "FinalFeeDate": {
            "type": "string",
            "description": "When the account status is set to Pending Closed, a final fee date is available. If account status is not Pending Closed, this parameter is not used.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountStatusErrorType": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "integer",
            "description": "Http return status",
            "format": "int32"
          },
          "AccountId": {
            "type": "integer",
            "description": "Account id",
            "format": "int32"
          },
          "Errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Error or list of errors retuned by status api call.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountStatusType": {
        "enum": [
          "PendingOpen",
          "Open",
          "PendingClosed",
          "Closed",
          "Frozen"
        ],
        "type": "string"
      },
      "AccrualMethodType": {
        "enum": [
          "DailyFactorSD",
          "ActAct",
          "Act365",
          "Act365L",
          "Act360",
          "_30360",
          "_30E360",
          "DailyFactorTD",
          "DailyFactorTOutSIn",
          "DailyFactorSOutS1In",
          "DailyFactorTOutS1In",
          "DailyFactorS1OutS1In"
        ],
        "type": "string"
      },
      "ActivityApiModel": {
        "type": "object",
        "properties": {
          "ActivityId": {
            "type": "integer",
            "description": "Internal unique activity record Id.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Activity name.",
            "nullable": true
          },
          "ActivityCategoryId": {
            "type": "integer",
            "description": "Internal unique activity category record Id.",
            "format": "int32"
          },
          "ActivityCategoryName": {
            "type": "string",
            "description": "Activity category name.",
            "nullable": true
          },
          "ActivityDescription": {
            "type": "string",
            "description": "Activity description.",
            "nullable": true
          },
          "Outcome": {
            "type": "string",
            "description": "Activity outcome.",
            "nullable": true
          },
          "DateOfActivity": {
            "type": "string",
            "description": "Date of activity.",
            "format": "date-time"
          },
          "TimeTakenMinutes": {
            "type": "integer",
            "description": "Time taken in minutes for activity.",
            "format": "int32",
            "nullable": true
          },
          "AccountId": {
            "type": "integer",
            "description": "Internal unique account record Id.",
            "format": "int32",
            "nullable": true
          },
          "AccountNumber": {
            "type": "string",
            "description": "Account number.",
            "nullable": true
          },
          "AssetId": {
            "type": "integer",
            "description": "Internal unique asset record Id.",
            "format": "int32",
            "nullable": true
          },
          "AssetCode": {
            "type": "string",
            "description": "Asset code or CUSIP.",
            "nullable": true
          },
          "IdentityRecordId": {
            "type": "integer",
            "description": "Internal unique identity record Id.",
            "format": "int32",
            "nullable": true
          },
          "IdentityRecordDisplayName": {
            "type": "string",
            "description": "Identity record display name.",
            "nullable": true
          },
          "TaskId": {
            "type": "integer",
            "description": "Internal unique task record Id.",
            "format": "int32",
            "nullable": true
          },
          "TaskName": {
            "type": "string",
            "description": "Task name.",
            "nullable": true
          },
          "PerformedByGuid": {
            "type": "string",
            "description": "Internal unique user Id for the performed by user.",
            "nullable": true
          },
          "PerformedByUsername": {
            "type": "string",
            "description": "Performed by username.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddAccountRelationshipApiRequest": {
        "required": [
          "DisplayName",
          "DomainModelClass",
          "FirstNameLegalName",
          "TaxIdStatusType"
        ],
        "type": "object",
        "properties": {
          "DomainModelClass": {
            "$ref": "#/components/schemas/DomainModelClass"
          },
          "FirstNameLegalName": {
            "type": "string",
            "description": "If the relationship is an Individual then it's first name,\r\nelse if organization then it is legal name."
          },
          "MiddleName": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "The middle name of the Individual.",
            "nullable": true
          },
          "LastName": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "The last name of the Individual.",
            "nullable": true
          },
          "Code": {
            "maxLength": 15,
            "minLength": 0,
            "type": "string",
            "description": "An alphanumeric code which the user can enter to aid searching.",
            "nullable": true
          },
          "ContactName": {
            "maxLength": 125,
            "minLength": 0,
            "type": "string",
            "description": "Name of contact individual.",
            "nullable": true
          },
          "DisplayName": {
            "maxLength": 125,
            "minLength": 0,
            "type": "string",
            "description": "The preferred name to be displayed."
          },
          "PayeeName": {
            "maxLength": 125,
            "minLength": 0,
            "type": "string",
            "description": "The name to be used for printing a check. If empty, use the entity's name.",
            "nullable": true
          },
          "SalutationType": {
            "$ref": "#/components/schemas/SalutationType"
          },
          "Title": {
            "maxLength": 60,
            "minLength": 0,
            "type": "string",
            "description": "The individual's title.",
            "nullable": true
          },
          "GenderType": {
            "$ref": "#/components/schemas/GenderType"
          },
          "DateOfBirth": {
            "type": "string",
            "description": "Individual's date of birth.",
            "format": "date-time"
          },
          "DateOfDeath": {
            "type": "string",
            "description": "Individual's date of death.",
            "format": "date-time",
            "nullable": true
          },
          "TaxIdStatusType": {
            "$ref": "#/components/schemas/TaxIdStatusType"
          },
          "TaxIdType": {
            "$ref": "#/components/schemas/TaxIdType"
          },
          "TaxId": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string",
            "description": "The TaxID or SSN.",
            "nullable": true
          },
          "Comments": {
            "type": "string",
            "description": "User entered comments.",
            "nullable": true
          },
          "PhoneNumber": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Phone number.",
            "nullable": true
          },
          "PhoneNumberContactMechanismUseType": {
            "$ref": "#/components/schemas/ContactMechanismUseType"
          },
          "EmailAddress": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Email address.",
            "nullable": true
          },
          "EmailContactMechanismUseType": {
            "$ref": "#/components/schemas/ContactMechanismUseType"
          },
          "PrimaryAddressAttention": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "\"Attention To\" for mailing address.",
            "nullable": true
          },
          "PrimaryAddressLine1": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Mailing address line 1.",
            "nullable": true
          },
          "PrimaryAddressLine2": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Mailing address line 2.",
            "nullable": true
          },
          "PrimaryAddressLine3": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Mailing address line 3.",
            "nullable": true
          },
          "PrimaryAddressCity": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Mailing address city.",
            "nullable": true
          },
          "PrimaryAddressStateProvince": {
            "$ref": "#/components/schemas/StateProvince"
          },
          "PrimaryAddressCountry": {
            "$ref": "#/components/schemas/Country"
          },
          "PrimaryAddressPostalCode": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Mailing addres postal code.",
            "nullable": true
          },
          "PrimaryAddressContactMechanismUseType": {
            "$ref": "#/components/schemas/ContactMechanismUseType"
          }
        },
        "additionalProperties": false
      },
      "AddTaskApiRequest": {
        "required": [
          "DateDue",
          "Name",
          "PriorityTypeId"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "maxLength": 25,
            "minLength": 0,
            "type": "string",
            "description": "Name"
          },
          "DateDue": {
            "type": "string",
            "description": "Task due as of date",
            "format": "date-time"
          },
          "PriorityTypeId": {
            "$ref": "#/components/schemas/PriorityType"
          },
          "Description": {
            "type": "string",
            "description": "Description",
            "nullable": true
          },
          "AccountId": {
            "type": "integer",
            "description": "Associated Account ID",
            "format": "int32",
            "nullable": true
          },
          "AssetId": {
            "type": "integer",
            "description": "Associated Asset ID",
            "format": "int32",
            "nullable": true
          },
          "IdentityRecordId": {
            "type": "integer",
            "description": "Associated Identity Record ID",
            "format": "int32",
            "nullable": true
          },
          "AssignedToUserGuid": {
            "type": "string",
            "description": "Assigned to User Guid",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Add task request model."
      },
      "AlertType": {
        "enum": [
          "ProcessingQueue",
          "PostingPreview",
          "Sweep",
          "CheckGeneration",
          "TaskAssignment",
          "Approval",
          "Notification",
          "ReportsAndExports",
          "CollectiveFund",
          "InvestmentExceptions"
        ],
        "type": "string"
      },
      "AmortizationType": {
        "enum": [
          "None",
          "AmortizationAccretion",
          "AmortizationAccretionWConstantYield",
          "Amortization",
          "AmortizationWConstantYield",
          "Accretion",
          "AccretionWConstantYield"
        ],
        "type": "string"
      },
      "ApprovalActionType": {
        "enum": [
          "Initiated",
          "Acknowledged",
          "Approved",
          "Rejected",
          "ExitedApproval"
        ],
        "type": "string"
      },
      "ApprovalActivityApiModel": {
        "type": "object",
        "properties": {
          "ApprovalActivityId": {
            "type": "integer",
            "description": "Internal unique approval activity record Id.",
            "format": "int32"
          },
          "ApprovalTypeId": {
            "type": "integer",
            "description": "Internal unique approval type Id.",
            "format": "int32"
          },
          "ApprovalType": {
            "$ref": "#/components/schemas/ApprovalType"
          },
          "ApprovalTypeName": {
            "type": "string",
            "description": "Internal unique approval type name.",
            "nullable": true,
            "readOnly": true
          },
          "ApprovalActionTypeId": {
            "type": "integer",
            "description": "Internal unique approval action type id.",
            "format": "int32"
          },
          "ApprovalActionType": {
            "$ref": "#/components/schemas/ApprovalActionType"
          },
          "ApprovalActionTypeName": {
            "type": "string",
            "description": "Internal unique approval action type name.",
            "nullable": true,
            "readOnly": true
          },
          "ApprovalConfigurationId": {
            "type": "integer",
            "description": "Internal unique approval configuration Id.",
            "format": "int32"
          },
          "AccountId": {
            "type": "integer",
            "description": "Internal unique account Id.",
            "format": "int32",
            "nullable": true
          },
          "AccountNumber": {
            "type": "string",
            "description": "Internal unique account number.",
            "nullable": true
          },
          "AccountName": {
            "type": "string",
            "description": "Internal unique account name.",
            "nullable": true
          },
          "AssetId": {
            "type": "integer",
            "description": "Internal unique asset Id.",
            "format": "int32",
            "nullable": true
          },
          "AssetName": {
            "type": "string",
            "description": "Internal unique asset name.",
            "nullable": true
          },
          "ApprovalAmount": {
            "type": "number",
            "description": "Approval amount.",
            "format": "double"
          },
          "Comment": {
            "type": "string",
            "description": "Comment.",
            "nullable": true
          },
          "InstitutionIdentityRecordId": {
            "type": "integer",
            "description": "Internal institution identity record Id. To obtain an Id use the /vX/Lookup service with the parameter GetInstitutionIdentityRecordValues.",
            "format": "int32"
          },
          "InstitutionName": {
            "type": "string",
            "description": "Institution name.",
            "nullable": true
          },
          "RequiredApprovalLevelId": {
            "type": "integer",
            "description": "Internal unique approval type name.",
            "format": "int32"
          },
          "RequiredApprovalLevelName": {
            "type": "string",
            "description": "Internal unique required approval level name.",
            "nullable": true
          },
          "RequiresSecondaryApproval": {
            "type": "boolean",
            "description": "Requires secondary approval."
          },
          "ApprovalsNeeded": {
            "type": "string",
            "description": "Count of remaining approvals needed.",
            "nullable": true
          },
          "SecondaryApprovalLevelId": {
            "type": "integer",
            "description": "Internal unique secondary approval level Id.",
            "format": "int32",
            "nullable": true
          },
          "SecondaryApprovalLevelName": {
            "type": "string",
            "description": "Internal unique secondary approval level name.",
            "nullable": true
          },
          "RelatedId": {
            "type": "integer",
            "description": "Related Id.",
            "format": "int32"
          },
          "DateSettled": {
            "type": "string",
            "description": "Date Settled.",
            "format": "date-time"
          },
          "IsAutoApproved": {
            "type": "boolean",
            "description": "Is auto approved."
          },
          "UserGuid": {
            "type": "string",
            "description": "GUID of the Cheetah User.",
            "format": "uuid",
            "nullable": true
          },
          "OriginatingUserCannotApprove": {
            "type": "boolean",
            "description": "Originating User cannot approve."
          },
          "AdminOfficer": {
            "type": "string",
            "description": "Admin Officer.",
            "nullable": true
          },
          "InvestOfficer": {
            "type": "string",
            "description": "Invest Officer.",
            "nullable": true
          },
          "CreatedDate": {
            "type": "string",
            "description": "Approval activity created date and time.",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Approval activity modified date and time.",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "description": "Approval activity modified by.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApprovalType": {
        "enum": [
          "Trade",
          "Transaction",
          "ScheduledTransaction",
          "ScheduledTransactionOccurrence"
        ],
        "type": "string"
      },
      "ApprovedListRuleType": {
        "enum": [
          "UseRules",
          "IsOnApprovedList",
          "NotOnApprovedList"
        ],
        "type": "string"
      },
      "AssetApiModel": {
        "type": "object",
        "properties": {
          "AssetId": {
            "type": "integer",
            "description": "Internal unique Id. Internal asset record Id.",
            "format": "int32"
          },
          "AssetCode": {
            "type": "string",
            "description": "Asset CUSIP.",
            "nullable": true
          },
          "AssetCodeType": {
            "$ref": "#/components/schemas/AssetCodeType"
          },
          "AssetCodeTypeName": {
            "type": "string",
            "description": "Asset code type name.",
            "nullable": true,
            "readOnly": true
          },
          "PortfolioReportCategoryId": {
            "type": "integer",
            "description": "Portfolio report category.",
            "format": "int32"
          },
          "AssetCategory": {
            "$ref": "#/components/schemas/AssetCategory"
          },
          "AssetCategoryDisplayName": {
            "type": "string",
            "description": "Asset category name.",
            "nullable": true,
            "readOnly": true
          },
          "AssetPrimaryClassTypeId": {
            "type": "integer",
            "description": "AssetPrimaryClassTypeId",
            "format": "int32"
          },
          "AssetPrimaryClassTypeName": {
            "type": "string",
            "description": "AssetPrimaryClassTypeName",
            "nullable": true
          },
          "Symbol": {
            "type": "string",
            "description": "Asset symbol.",
            "nullable": true
          },
          "Issue": {
            "type": "string",
            "description": "Asset issue.",
            "nullable": true
          },
          "Issuer": {
            "type": "string",
            "description": "Asset issuer.",
            "nullable": true
          },
          "IssueStatusType": {
            "$ref": "#/components/schemas/IssueStatusType"
          },
          "IssueStatusTypeName": {
            "type": "string",
            "description": "Issue status type name.",
            "nullable": true,
            "readOnly": true
          },
          "StateProvince": {
            "$ref": "#/components/schemas/StateProvince"
          },
          "StateProvinceAbbreviation": {
            "type": "string",
            "description": "State province abbreviation.",
            "nullable": true
          },
          "Country": {
            "$ref": "#/components/schemas/Country"
          },
          "CountryName": {
            "type": "string",
            "description": "Country name.",
            "nullable": true,
            "readOnly": true
          },
          "DomainModelClass": {
            "$ref": "#/components/schemas/DomainModelClass"
          },
          "DomainModelClassName": {
            "type": "string",
            "description": "Domain model class name.",
            "nullable": true,
            "readOnly": true
          },
          "TradeWhenInstitutionOpen": {
            "type": "boolean",
            "description": "Trade when institution open flag"
          },
          "UpdateFromInterface": {
            "type": "boolean",
            "description": "Update from interface."
          },
          "IraHardToValueType": {
            "$ref": "#/components/schemas/IRAHardToValueType"
          },
          "IraHardToValueTypeName": {
            "type": "string",
            "description": "IRA hard to value type name.",
            "nullable": true,
            "readOnly": true
          },
          "IsActive": {
            "type": "boolean",
            "description": "Is active."
          },
          "CreatedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "nullable": true
          },
          "Stock": {
            "$ref": "#/components/schemas/StockApiModel"
          },
          "Bond": {
            "$ref": "#/components/schemas/BondApiModel"
          },
          "CashEquivalent": {
            "$ref": "#/components/schemas/CashEquivalentApiModel"
          },
          "CertificateOfDeposit": {
            "$ref": "#/components/schemas/CertificateOfDepositApiModel"
          },
          "MutualFund": {
            "$ref": "#/components/schemas/MutualFundApiModel"
          },
          "OtherAsset": {
            "$ref": "#/components/schemas/OtherAssetApiModel"
          },
          "Option": {
            "$ref": "#/components/schemas/OptionApiModel"
          },
          "Property": {
            "$ref": "#/components/schemas/PropertyApiModel"
          },
          "Loan": {
            "$ref": "#/components/schemas/LoanApiModel"
          },
          "DailyFactors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DailyFactorApiModel"
            },
            "description": "Array of daily factors.",
            "nullable": true
          },
          "DividendEvents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DividendEventApiModel"
            },
            "description": "Array of dividend events.",
            "nullable": true
          },
          "InterestRates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InterestRateApiModel"
            },
            "description": "Array of interest rates.",
            "nullable": true
          },
          "PoolFactors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PoolFactorApiModel"
            },
            "description": "Array of pool factors.",
            "nullable": true
          },
          "PriceHistories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PriceHistoryApiModel"
            },
            "description": "Array of price histories.",
            "nullable": true
          },
          "QualityRatingHistories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QualityRatingApiModel"
            },
            "description": "Array of quality rating histories.",
            "nullable": true
          },
          "AssetInstitutionSettings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetInstitutionSettingApiModel"
            },
            "description": "Array of asset institution settings.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AssetCategory": {
        "enum": [
          "CommonStock",
          "IntlCommonStock",
          "PreferredStock",
          "Options",
          "MutualFunds",
          "IntlMutualFunds",
          "UnitTrusts",
          "CollectiveInvFunds",
          "USGovtObligations",
          "USAgencyObligations",
          "CorporateObligations",
          "ForeignObligations",
          "MunicipalObligations",
          "RealEstate",
          "Property",
          "BankDeposits",
          "CertificatesOfDeposit",
          "MoneyMarkets",
          "NotCategorized",
          "Other",
          "ExchangeTradedFund",
          "InternationalEquityETF",
          "FixedIncomeETF",
          "CorporateHighYieldBonds",
          "CMOAssetBackedSecurities",
          "ReverseMortgageBackedSecurities",
          "MortgageBackedSecurities",
          "GNMASerialNotes",
          "ChurchBonds",
          "Liabilities",
          "OptionsLiabilities",
          "LoansNotesReceivables",
          "InsurancePolicies"
        ],
        "type": "string"
      },
      "AssetCodeType": {
        "enum": [
          "CUSIP",
          "Foreign",
          "UserEntered",
          "Temporary",
          "ISIN"
        ],
        "type": "string"
      },
      "AssetInstitutionSettingApiModel": {
        "type": "object",
        "properties": {
          "AssetInstitutionSettingsId": {
            "type": "integer",
            "description": "Internal unique Id. Record Id for Asset Institution Settings.",
            "format": "int32"
          },
          "InstitutionIdentityRecordId": {
            "type": "integer",
            "description": "Internal unique Id. Record Id for the the instituion identity record.",
            "format": "int32"
          },
          "OverridePortfolioReportCategoryId": {
            "type": "integer",
            "description": "Override asset portfolio report category with this portfolio report\r\ncategory for this institution.",
            "format": "int32",
            "nullable": true
          },
          "OverrideIndustryId": {
            "type": "integer",
            "description": "Override asset industry with this industry for this institution.",
            "format": "int32",
            "nullable": true
          },
          "MarketCapType": {
            "$ref": "#/components/schemas/MarketCapType"
          },
          "MarketCapTypeName": {
            "type": "string",
            "description": "Market cap type name.",
            "nullable": true,
            "readOnly": true
          },
          "UnitDecimal": {
            "type": "number",
            "description": "Allowed significant digits for this asset and institution.",
            "format": "double"
          },
          "ApprovedListRuleType": {
            "$ref": "#/components/schemas/ApprovedListRuleType"
          },
          "ApprovedListRuleTypeName": {
            "type": "string",
            "description": "Approved list rule type name.",
            "nullable": true,
            "readOnly": true
          },
          "CreatedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "nullable": true
          },
          "AssetInstitutionSettingsCustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldApiModel"
            },
            "description": "Custom fields for the asset and institution.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AssetPrimaryClassType": {
        "enum": [
          "Equity",
          "FixedIncome",
          "Balanced",
          "CashEquivalents",
          "Liabilities",
          "Other",
          "Alternative",
          "International",
          "RealEstate"
        ],
        "type": "string"
      },
      "AutoTransferType": {
        "enum": [
          "None",
          "IncomeToPrincipal",
          "PrincipalToIncome",
          "Both"
        ],
        "type": "string"
      },
      "BondApiModel": {
        "type": "object",
        "properties": {
          "IndustryId": {
            "type": "integer",
            "description": "Industry Type.",
            "format": "int32",
            "nullable": true
          },
          "DateOfIssue": {
            "type": "string",
            "description": "Date of issue.",
            "format": "date-time",
            "nullable": true
          },
          "DateOfMaturity": {
            "type": "string",
            "description": "Date of maturity.",
            "format": "date-time",
            "nullable": true
          },
          "IncomePaymentFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "IncomePaymentFrequencyTypeName": {
            "type": "string",
            "description": "Income payment frequency type name.",
            "nullable": true,
            "readOnly": true
          },
          "IncomePaymentMonth": {
            "type": "integer",
            "description": "Income payment month.",
            "format": "int32",
            "nullable": true
          },
          "IncomePaymentDay": {
            "type": "integer",
            "description": "Income payment day.",
            "format": "int32",
            "nullable": true
          },
          "AmortizationFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "AmortizationFrequencyTypeName": {
            "type": "string",
            "description": "Amortization frequency type name.",
            "nullable": true,
            "readOnly": true
          },
          "AccrualMethodType": {
            "$ref": "#/components/schemas/AccrualMethodType"
          },
          "AccrualMethodTypeName": {
            "type": "string",
            "description": "Accrual method type name.",
            "nullable": true,
            "readOnly": true
          },
          "CallDate": {
            "type": "string",
            "description": "Call date.",
            "format": "date-time",
            "nullable": true
          },
          "CallPrice": {
            "type": "number",
            "description": "Call price.",
            "format": "double",
            "nullable": true
          },
          "CallType": {
            "$ref": "#/components/schemas/CallType"
          },
          "CallTypeName": {
            "type": "string",
            "description": "Call type name.",
            "nullable": true,
            "readOnly": true
          },
          "DateOfFirstPayment": {
            "type": "string",
            "description": "Date of first payment.",
            "format": "date-time",
            "nullable": true
          },
          "OIDPrice": {
            "type": "number",
            "description": "OID price.",
            "format": "double",
            "nullable": true
          },
          "Insurer": {
            "type": "string",
            "description": "Insurer",
            "nullable": true
          },
          "InsurerRating": {
            "type": "string",
            "description": "Insurer rating.",
            "nullable": true
          },
          "OddLastCouponType": {
            "$ref": "#/components/schemas/OddLastCouponType"
          },
          "OddLastCouponTypeName": {
            "type": "string",
            "description": "Odd last coupon type name.",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "BusinessDayRuleType": {
        "enum": [
          "NextBusinessDay",
          "PreviousBusinessDay"
        ],
        "type": "string"
      },
      "CallType": {
        "enum": [
          "Full",
          "Partial"
        ],
        "type": "string"
      },
      "CashEquivalentApiModel": {
        "type": "object",
        "properties": {
          "QualityRating": {
            "type": "string",
            "description": "Quality rating.",
            "nullable": true
          },
          "DateOfIssue": {
            "type": "string",
            "description": "Date of issue.",
            "format": "date-time",
            "nullable": true
          },
          "IncomePaymentFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "IncomePaymentFrequencyTypeName": {
            "type": "string",
            "description": "Income payment frequency type name.",
            "nullable": true,
            "readOnly": true
          },
          "IncomePaymentMonth": {
            "type": "integer",
            "description": "Income payment month.",
            "format": "int32",
            "nullable": true
          },
          "IncomePaymentDay": {
            "type": "integer",
            "description": "Income payment day.",
            "format": "int32",
            "nullable": true
          },
          "AmortizationFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "AmortizationFrequencyTypeName": {
            "type": "string",
            "description": "Amortization frequency type name.",
            "nullable": true,
            "readOnly": true
          },
          "AccrualMethodType": {
            "$ref": "#/components/schemas/AccrualMethodType"
          },
          "AccrualMethodTypeName": {
            "type": "string",
            "description": "Accrual method type name.",
            "nullable": true,
            "readOnly": true
          },
          "CompoundingFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "CompoundingFrequencyTypeName": {
            "type": "string",
            "description": "Compound frequency type name.",
            "nullable": true,
            "readOnly": true
          },
          "DepositoryIdentityRecordId": {
            "type": "integer",
            "description": "Depository identity record Id.",
            "format": "int32",
            "nullable": true
          },
          "StableNAV": {
            "type": "boolean",
            "description": "Stable NAV.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CertificateOfDepositApiModel": {
        "type": "object",
        "properties": {
          "DateOfIssue": {
            "type": "string",
            "description": "Date of issue.",
            "format": "date-time",
            "nullable": true
          },
          "DateOfMaturity": {
            "type": "string",
            "description": "Date of maturity.",
            "format": "date-time",
            "nullable": true
          },
          "IncomePaymentFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "IncomePaymentFrequencyTypeName": {
            "type": "string",
            "description": "Income payment frequency type name.",
            "nullable": true,
            "readOnly": true
          },
          "IncomePaymentMonth": {
            "type": "integer",
            "description": "Income payment month.",
            "format": "int32",
            "nullable": true
          },
          "IncomePaymentDay": {
            "type": "integer",
            "description": "Income payment day.",
            "format": "int32",
            "nullable": true
          },
          "AmortizationFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "AmortizationFrequencyTypeName": {
            "type": "string",
            "description": "Amortization frequency type name.",
            "nullable": true,
            "readOnly": true
          },
          "AccrualMethodType": {
            "$ref": "#/components/schemas/AccrualMethodType"
          },
          "AccrualMethodTypeName": {
            "type": "string",
            "description": "Accrual method type name.",
            "nullable": true,
            "readOnly": true
          },
          "CompoundingFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "CompoundingFrequencyTypeName": {
            "type": "string",
            "description": "Compound frequency type name.",
            "nullable": true,
            "readOnly": true
          },
          "DateOfFirstPayment": {
            "type": "string",
            "description": "Date of first payment.",
            "format": "date-time",
            "nullable": true
          },
          "DepositoryIdentityRecordId": {
            "type": "integer",
            "description": "Depository identity record Id.",
            "format": "int32",
            "nullable": true
          },
          "OddLastCouponType": {
            "$ref": "#/components/schemas/OddLastCouponType"
          },
          "OddLastCouponTypeName": {
            "type": "string",
            "description": "Odd last coupon type name.",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ComptrollerType": {
        "enum": [
          "NotOnReport",
          "NonInterestBearingDeposits",
          "InterestBearingDeposits",
          "USGovernmentAndAgencyObligations",
          "StateCountyAndMunicipalObligations",
          "MoneyMarketMutualFunds",
          "OtherShortTermObligations",
          "OtherNotesAndBonds",
          "CommonAndPreferredStock",
          "RealEstateMortgages",
          "RealEstate",
          "MiscellaneousAssets",
          "CommonFund",
          "EquityMutualFunds",
          "OtherMutualFunds",
          "UnregisteredFundsPrivateEquity"
        ],
        "type": "string"
      },
      "ContactMechanismPurposeType": {
        "enum": [
          "Default",
          "Mailing",
          "Shipping",
          "Invoice",
          "Statement",
          "Payee",
          "Tax",
          "Proxy",
          "TradeNotice",
          "TaxCopy",
          "TaxFormPayer"
        ],
        "type": "string"
      },
      "ContactMechanismType": {
        "enum": [
          "PostalAddress",
          "Telephone",
          "MobilePhone",
          "Fax",
          "EMail"
        ],
        "type": "string"
      },
      "ContactMechanismUseType": {
        "enum": [
          "Personal",
          "Work",
          "Other"
        ],
        "type": "string"
      },
      "Country": {
        "enum": [
          "UnitedStates",
          "Canada",
          "Mexico",
          "Afghanistan",
          "AlandIslands",
          "Albania",
          "Algeria",
          "AmericanSamoa",
          "Andorra",
          "Angola",
          "Anguilla",
          "Antarctica",
          "AntiguaAndBarbuda",
          "Argentina",
          "Armenia",
          "Aruba",
          "Australia",
          "Austria",
          "Azerbaijan",
          "Bahamas",
          "Bahrain",
          "Bangladesh",
          "Barbados",
          "Belarus",
          "Belgium",
          "Belize",
          "Benin",
          "Bermuda",
          "Bhutan",
          "Bolivia",
          "Bonaire",
          "BosniaAndHerzegovina",
          "Botswana",
          "BouvetIsland",
          "Brazil",
          "BritishIndianOceanTerritory",
          "BruneiDarussalam",
          "Bulgaria",
          "BurkinaFaso",
          "Burundi",
          "Cambodia",
          "Cameroon",
          "CapeVerde",
          "CaymanIslands",
          "CentralAfricanRepublic",
          "Chad",
          "Chile",
          "China",
          "ChristmasIsland",
          "CocosKeelingIslands",
          "Colombia",
          "Comoros",
          "CongoRepublic",
          "CongoDemocraticRepublic",
          "CookIslands",
          "CostaRica",
          "CoteDivoire",
          "Croatia",
          "Cuba",
          "Curaao",
          "Cyprus",
          "CzechRepublic",
          "Denmark",
          "Djibouti",
          "Dominica",
          "DominicanRepublic",
          "Ecuador",
          "Egypt",
          "ElSalvador",
          "EquatorialGuinea",
          "Eritrea",
          "Estonia",
          "Ethiopia",
          "FalklandIslandsMalvinas",
          "FaroeIslands",
          "Fiji",
          "Finland",
          "France",
          "FrenchGuiana",
          "FrenchPolynesia",
          "FrenchSouthernTerritories",
          "Gabon",
          "Gambia",
          "Georgia",
          "Germany",
          "Ghana",
          "Gibraltar",
          "Greece",
          "Greenland",
          "Grenada",
          "Guadeloupe",
          "Guam",
          "Guatemala",
          "Guernsey",
          "Guinea",
          "GuineaBissau",
          "Guyana",
          "Haiti",
          "HeardAndMcdonaldIslands",
          "HolySee",
          "Honduras",
          "HongKong",
          "Hungary",
          "Iceland",
          "India",
          "Indonesia",
          "Iran",
          "Iraq",
          "Ireland",
          "IsleOfMan",
          "Israel",
          "Italy",
          "Jamaica",
          "Japan",
          "Jersey",
          "Jordan",
          "Kazakhstan",
          "Kenya",
          "Kiribati",
          "KoreaNorth",
          "KoreaSouth",
          "Kuwait",
          "Kyrgyzstan",
          "LaoPeoplesDemocraticRepublic",
          "Latvia",
          "Lebanon",
          "Lesotho",
          "Liberia",
          "LibyanArabJamahiriya",
          "Liechtenstein",
          "Lithuania",
          "Luxembourg",
          "Macao",
          "Macedonia",
          "Madagascar",
          "Malawi",
          "Malaysia",
          "Maldives",
          "Mali",
          "Malta",
          "MarshallIslands",
          "Martinique",
          "Mauritania",
          "Mauritius",
          "Mayotte",
          "Micronesia",
          "Moldova",
          "Monaco",
          "Mongolia",
          "Montenegro",
          "Montserrat",
          "Morocco",
          "Mozambique",
          "Myanmar",
          "Namibia",
          "Nauru",
          "Nepal",
          "Netherlands",
          "NewCaledonia",
          "NewZealand",
          "Nicaragua",
          "Niger",
          "Nigeria",
          "Niue",
          "NorfolkIsland",
          "NorthernMarianaIslands",
          "Norway",
          "Oman",
          "Pakistan",
          "Palau",
          "Palestinian",
          "Panama",
          "PapuaNewGuinea",
          "Paraguay",
          "Peru",
          "Philippines",
          "Pitcairn",
          "Poland",
          "Portugal",
          "PuertoRico",
          "Qatar",
          "Runion",
          "Romania",
          "RussianFederation",
          "Rwanda",
          "SaintBarthelemy",
          "SaintHelena",
          "SaintKittsAndNevis",
          "SaintLucia",
          "SaintMartinFrenchPart",
          "SaintPierreAndMiquelon",
          "SaintVincentAndTheGrenadines",
          "Samoa",
          "SanMarino",
          "SaoTomeAndPrincipe",
          "SaudiArabia",
          "Senegal",
          "Serbia",
          "Seychelles",
          "SierraLeone",
          "Singapore",
          "SintMaartenDutchPart",
          "Slovakia",
          "Slovenia",
          "SolomonIslands",
          "Somalia",
          "SouthAfrica",
          "SouthGeorgiaAndTheSouthSandwichIslands",
          "Spain",
          "SriLanka",
          "Sudan",
          "Suriname",
          "SvalbardAndJanMayen",
          "Swaziland",
          "Sweden",
          "Switzerland",
          "SyrianArabRepublic",
          "TaiwanProvinceOfChina",
          "Tajikistan",
          "TanzaniaUnitedRepublicOf",
          "Thailand",
          "TimorLeste",
          "Togo",
          "Tokelau",
          "Tonga",
          "TrinidadAndTobago",
          "Tunisia",
          "Turkey",
          "Turkmenistan",
          "TurksAndCaicosIslands",
          "Tuvalu",
          "Uganda",
          "Ukraine",
          "UnitedArabEmirates",
          "UnitedKingdom",
          "UnitedStatesMinorOutlyingIslands",
          "Uruguay",
          "Uzbekistan",
          "Vanuatu",
          "Venezuela",
          "VietNam",
          "VirginIslandsBritish",
          "VirginIslandsUS",
          "WallisAndFutuna",
          "WesternSahara",
          "Yemen",
          "Zambia",
          "Zimbabwe"
        ],
        "type": "string"
      },
      "CustomerStatementApiModel": {
        "type": "object",
        "properties": {
          "FileAttachmentId": {
            "type": "integer",
            "description": "Internal unique file attachment Id.",
            "format": "int32"
          },
          "FileName": {
            "type": "string",
            "description": "File attachment filename",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "description": "File attachment name",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "File attachment description",
            "nullable": true
          },
          "CustomerStatementId": {
            "type": "integer",
            "description": "Internal unique customer statement Id.",
            "format": "int32"
          },
          "IdentityRecordId": {
            "type": "integer",
            "description": "Internal unique identity record Id.",
            "format": "int32"
          },
          "AccountId": {
            "type": "integer",
            "description": "Internal unique account Id.",
            "format": "int32"
          },
          "AccountNumber": {
            "type": "string",
            "description": "Internal unique account number.",
            "nullable": true
          },
          "AccountGroupId": {
            "type": "integer",
            "description": "Internal unique account group Id.",
            "format": "int32"
          },
          "AccountRelationshipId": {
            "type": "integer",
            "description": "Account relationship type.",
            "format": "int32"
          },
          "AccountRelationshipTypeId": {
            "type": "integer",
            "description": "Account relationship type.",
            "format": "int32"
          },
          "DateEffective": {
            "type": "string",
            "description": "Date customer statement is effective.",
            "format": "date-time",
            "nullable": true
          },
          "DateSettledFrom": {
            "type": "string",
            "description": "Date customer statement settles from.",
            "format": "date-time",
            "nullable": true
          },
          "DateSettledTo": {
            "type": "string",
            "description": "Date customer statement settles to.",
            "format": "date-time",
            "nullable": true
          },
          "CreatedDate": {
            "type": "string",
            "description": "Date file attachment was created.",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Date file attachment last modified.",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "description": "File attachment modified by.",
            "nullable": true
          },
          "FileAttachment": {
            "$ref": "#/components/schemas/CustomerStatementFileAttachmentApiModel"
          }
        },
        "additionalProperties": false
      },
      "CustomerStatementFileAttachmentApiModel": {
        "type": "object",
        "properties": {
          "FileAttachmentId": {
            "type": "integer",
            "description": "Internal unique file attachment Id.",
            "format": "int32"
          },
          "Link": {
            "type": "string",
            "description": "Link to download file.",
            "nullable": true
          },
          "FileName": {
            "type": "string",
            "description": "Filename",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "description": "Name",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "Description",
            "nullable": true
          },
          "AvailableOnline": {
            "type": "boolean",
            "description": "File attachment availability online."
          },
          "CreatedDate": {
            "type": "string",
            "description": "Date file attachment was created.",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Date file attachment last modified.",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "description": "File attachment modified by.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomerStatementSetupApiModel": {
        "type": "object",
        "properties": {
          "AccountReportRelationshipId": {
            "type": "integer",
            "description": "Internal  Id for the AccountReportRelationship",
            "format": "int32"
          },
          "AccountRelationshipId": {
            "type": "integer",
            "description": "Internal  Id for the AccountRelationship",
            "format": "int32"
          },
          "AccountId": {
            "type": "integer",
            "description": "Internal Id for the Account",
            "format": "int32"
          },
          "AccountNumber": {
            "type": "string",
            "description": "Account number",
            "nullable": true
          },
          "IdentityRecordId": {
            "type": "integer",
            "description": "Interal Id for the NameAndAddress record",
            "format": "int32"
          },
          "ReportId": {
            "type": "integer",
            "description": "Internal Id for the Report",
            "format": "int32"
          },
          "ReportName": {
            "type": "string",
            "description": "The Report name",
            "nullable": true
          },
          "FrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "FrequencyTypeName": {
            "type": "string",
            "description": "Frequency for the report",
            "nullable": true,
            "readOnly": true
          },
          "FrequencyMonth": {
            "type": "integer",
            "description": "Frequencey Month (1 to 12)",
            "format": "int32"
          },
          "IsElectronic": {
            "type": "boolean",
            "description": "Is the Report stored and sent electronically?"
          },
          "IsPaper": {
            "type": "boolean",
            "description": "Is the Report sent as a printed and mailed report?"
          }
        },
        "additionalProperties": false
      },
      "CustomFieldApiModel": {
        "type": "object",
        "properties": {
          "CustomFieldId": {
            "type": "integer",
            "description": "Internal unique custom field identifier.",
            "format": "int32"
          },
          "FieldName": {
            "type": "string",
            "description": "Internal custom field name.",
            "nullable": true
          },
          "LabelName": {
            "type": "string",
            "description": "Custom field name displayed on UI.",
            "nullable": true
          },
          "Value": {
            "type": "string",
            "description": "Custom field value.",
            "nullable": true
          },
          "IsRequired": {
            "type": "boolean",
            "description": "If true, user is required to enter a value for the custom field."
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Custom field modified date.",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "description": "Custom field modified by.",
            "nullable": true
          },
          "CreatedDate": {
            "type": "string",
            "description": "Custom field creation date.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DailyFactorApiModel": {
        "type": "object",
        "properties": {
          "DailyFactorId": {
            "type": "integer",
            "description": "Internal unique Id. Internal daily factor record Id.",
            "format": "int32"
          },
          "Factor": {
            "type": "number",
            "description": "Daily factor value.",
            "format": "double"
          },
          "DateEffectiveFrom": {
            "type": "string",
            "description": "Date effective from.",
            "format": "date-time",
            "nullable": true
          },
          "DateEffectiveTo": {
            "type": "string",
            "description": "Date effective to.",
            "format": "date-time",
            "nullable": true
          },
          "CreatedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Date": {
        "type": "object",
        "properties": {
          "DateTime": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "Display": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Day": {
            "type": "integer",
            "format": "int32"
          },
          "DayOfWeek": {
            "$ref": "#/components/schemas/DayOfWeek"
          },
          "Month": {
            "type": "integer",
            "format": "int32"
          },
          "Year": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "DayOfWeek": {
        "enum": [
          "Sunday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday"
        ],
        "type": "string"
      },
      "DeactivateAccountRelationshipApiRequest": {
        "required": [
          "AccountId",
          "IdentityRecordId"
        ],
        "type": "object",
        "properties": {
          "AccountId": {
            "type": "integer",
            "description": "Account to deactivate. To obtain an Id use the /vX/Lookup service with the parameter GetAccountValues or GetAccountsForInstitutionValues.",
            "format": "int32"
          },
          "IdentityRecordId": {
            "type": "integer",
            "description": "Internal unique identity record Id. If supplied, will update the relationship(s) for that unique identity.",
            "format": "int32"
          },
          "AccountRelationshipType": {
            "$ref": "#/components/schemas/AccountRelationshipType"
          },
          "InstitutionIdentityRecordId": {
            "type": "integer",
            "description": "Used to restrict queries to specific Institutions. If not supplied, the query will be restricted\r\nto Institutions assigned to the user. To obtain an Id use the /vX/Lookup service with the parameter GetInstitutionIdentityRecordValues.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DepositoryApiModel": {
        "type": "object",
        "properties": {
          "IdentityRecordId": {
            "type": "integer",
            "description": "The IdentityRecordId of the Depository",
            "format": "int32"
          },
          "DisplayName": {
            "type": "string",
            "description": "The display name of the Depository",
            "nullable": true
          },
          "DepositoryName": {
            "type": "string",
            "description": "The depository's name",
            "nullable": true
          },
          "RoutingNumber": {
            "type": "string",
            "description": "The routing number of the Depository",
            "nullable": true
          },
          "Address": {
            "$ref": "#/components/schemas/PostalAddressApiModel"
          },
          "PhoneNumber": {
            "$ref": "#/components/schemas/PhoneNumberApiModel"
          },
          "IsActive": {
            "type": "boolean",
            "description": "Is the record still active?"
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Identity record modified date.",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "description": "Identity record modified by.",
            "nullable": true
          },
          "CreatedDate": {
            "type": "string",
            "description": "Identity record creation date.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DividendEventApiModel": {
        "type": "object",
        "properties": {
          "DividendPaymentType": {
            "$ref": "#/components/schemas/DividendPaymentType"
          },
          "DividendPaymentTypeName": {
            "type": "string",
            "description": "Dividend payment type name.",
            "nullable": true,
            "readOnly": true
          },
          "DividendAmountPerShare": {
            "type": "number",
            "description": "Dividend amount per share.",
            "format": "double",
            "nullable": true
          },
          "DividendStockPerShare": {
            "type": "number",
            "description": "Dividend stock per share.",
            "format": "double",
            "nullable": true
          },
          "DividendSplitRatio": {
            "type": "string",
            "description": "Dividend split ratio.",
            "nullable": true
          },
          "IndicatedAnnualDividendPerShare": {
            "type": "number",
            "description": "Indicated annual dividend per share.",
            "format": "double",
            "nullable": true
          },
          "DateExDividend": {
            "type": "string",
            "description": "Date executed dividend.",
            "format": "date-time"
          },
          "DateOfRecord": {
            "type": "string",
            "description": "Date of record.",
            "format": "date-time"
          },
          "DateOfPayment": {
            "type": "string",
            "description": "Date of payment.",
            "format": "date-time"
          },
          "DateAnnounced": {
            "type": "string",
            "description": "Date announced.",
            "format": "date-time"
          },
          "EventCode": {
            "type": "string",
            "description": "Event code.",
            "nullable": true
          },
          "EventRevisionCode": {
            "type": "string",
            "description": "Event revision code.",
            "nullable": true
          },
          "IsActive": {
            "type": "boolean",
            "description": "Is active."
          },
          "CreatedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DividendPaymentType": {
        "enum": [
          "OrdinaryDividend",
          "SpecialDividend",
          "LongTermCapitalGain",
          "ShortTermCapitalGain",
          "StockDividend",
          "StockSplit",
          "ReturnOfCapital"
        ],
        "type": "string"
      },
      "DividendReclassificationImportApiRequest": {
        "required": [
          "AssetCode",
          "DateAddedTIRS",
          "DateFileCreated",
          "DateForMatchingFrom",
          "DateForMatchingTo",
          "DateLastUpdateTIRS",
          "DateOfPayment",
          "DateOfRecord",
          "IsForeign",
          "PaymentTaxTypeCode",
          "SecurityTypeCode",
          "TaxYear"
        ],
        "type": "object",
        "properties": {
          "AssetCode": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "Asset CUSIP"
          },
          "Symbol": {
            "maxLength": 22,
            "minLength": 0,
            "type": "string",
            "description": "Asset symbol.",
            "nullable": true
          },
          "Description": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Dividend reclassification description.",
            "nullable": true
          },
          "SecurityTypeCode": {
            "maxLength": 4,
            "minLength": 0,
            "type": "string",
            "description": "Security type code."
          },
          "SecurityTypeDescription": {
            "maxLength": 120,
            "minLength": 0,
            "type": "string",
            "description": "security type description.",
            "nullable": true
          },
          "PaymentTaxTypeCode": {
            "maxLength": 4,
            "minLength": 0,
            "type": "string",
            "description": "Payment Tax type code."
          },
          "PaymentTaxTypeDescription": {
            "maxLength": 120,
            "minLength": 0,
            "type": "string",
            "description": "Payment tax type  description.",
            "nullable": true
          },
          "IsForeign": {
            "type": "boolean",
            "description": "Security is of foreign origin."
          },
          "TaxYear": {
            "type": "integer",
            "description": "Tax year.",
            "format": "int32"
          },
          "DateOfPayment": {
            "type": "string",
            "description": "Date of payment.",
            "format": "date-time"
          },
          "DateOfRecord": {
            "type": "string",
            "description": "Date of record.",
            "format": "date-time"
          },
          "DateAddedTIRS": {
            "type": "string",
            "description": "Date added TIRS.",
            "format": "date-time"
          },
          "DateLastUpdateTIRS": {
            "type": "string",
            "description": "Date updated TIRS.",
            "format": "date-time"
          },
          "DateFileCreated": {
            "type": "string",
            "description": "Date file created.",
            "format": "date-time"
          },
          "DateForMatchingFrom": {
            "type": "string",
            "description": "Date for matching from.",
            "format": "date-time"
          },
          "DateForMatchingTo": {
            "type": "string",
            "description": "Date for matching to.",
            "format": "date-time"
          },
          "PaymentPerShareAmount": {
            "type": "number",
            "description": "Payment per share amount.",
            "format": "double",
            "nullable": true
          },
          "PaymentPercent": {
            "type": "number",
            "description": "Payment percent.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DomainModelClass": {
        "enum": [
          "IdentityRecord",
          "Individual",
          "Organization",
          "Institution",
          "Division",
          "Broker",
          "Account",
          "Stock",
          "Option",
          "Bond",
          "MutualFund",
          "CashEquivalent",
          "CertificateOfDeposit",
          "Property",
          "OtherAsset",
          "Depository",
          "TaxFormPayer",
          "Loan"
        ],
        "type": "string"
      },
      "EmailApiModel": {
        "type": "object",
        "properties": {
          "ContactMechanismId": {
            "type": "integer",
            "description": "Internal contact mechanism Id.",
            "format": "int32"
          },
          "ContactMechanismType": {
            "$ref": "#/components/schemas/ContactMechanismType"
          },
          "ContactMechanismTypeName": {
            "type": "string",
            "description": "Contact mechanism type name.",
            "nullable": true,
            "readOnly": true
          },
          "ContactMechanismUseType": {
            "$ref": "#/components/schemas/ContactMechanismUseType"
          },
          "ContactMechanismUseTypeName": {
            "type": "string",
            "description": "Contact mechanism use type.",
            "nullable": true,
            "readOnly": true
          },
          "IdentityRecordId": {
            "type": "integer",
            "description": "Internal identity record Id.",
            "format": "int32"
          },
          "IsPrimary": {
            "type": "boolean",
            "description": "Is primary contact information.",
            "nullable": true
          },
          "MonthEffectiveFrom": {
            "type": "integer",
            "description": "Starting month the contact information is valid for.",
            "format": "int32"
          },
          "MonthEffectiveTo": {
            "type": "integer",
            "description": "Ending month the contact information is valid for",
            "format": "int32"
          },
          "DayEffectiveFrom": {
            "type": "integer",
            "description": "Starting day of month the contact information is valid for.",
            "format": "int32"
          },
          "DayEffectiveTo": {
            "type": "integer",
            "description": "Ending day of month the contact information is valid for.",
            "format": "int32"
          },
          "IsActive": {
            "type": "boolean",
            "description": "True if the contact information is still used, else false (i.e. a previous valid record)."
          },
          "Note": {
            "type": "string",
            "format": "string",
            "nullable": true
          },
          "ContactMechanismPurposeTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactMechanismPurposeType"
            },
            "description": "A collection of contact purpose types (i.e. Default, Mailing, Shipping, Invoice, etc.)",
            "nullable": true
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Contact mechanism modified date.",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "description": "Contact mechanism modified by.",
            "nullable": true
          },
          "CreatedDate": {
            "type": "string",
            "description": "Contact mechanism creation date.",
            "format": "date-time",
            "nullable": true
          },
          "EmailAddress": {
            "type": "string",
            "description": "Email address.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExchangeType": {
        "enum": [
          "None",
          "NYSE",
          "AMEX",
          "NASDAQ",
          "OTCBB",
          "MUTFD",
          "OTCBOND",
          "NYBOND",
          "FOREIGN",
          "GOVTAG",
          "NASDQBX",
          "MISC",
          "CBOE",
          "MIDWEST",
          "MONTREAL",
          "BOSTONOPT",
          "ARCA",
          "NASDQPHLX",
          "TOR",
          "SPWKIND",
          "VLINDAVG",
          "NYSEOPT",
          "PHLXOPT",
          "ARCAOPT",
          "ISE",
          "NSDQOPT",
          "OTHEROTC",
          "CDNX",
          "TSXVENT",
          "NBBO",
          "BATSOPTX",
          "CMECBOT",
          "CME",
          "IMMCME",
          "COMEX",
          "ICEFUT",
          "NYCSEX",
          "NYBOT",
          "NYMEX",
          "KCBOT",
          "MINNGREX",
          "ICEFUTCA",
          "CBOEFUT",
          "LONCOCOA",
          "LONCOFFEE",
          "LONGRAIN",
          "NYSELIFFE",
          "UTSMA",
          "AMEXCOMM",
          "NOEX",
          "TFE",
          "ICEFUTEU",
          "SYDNEYFUT",
          "SIMEX",
          "HKFUT",
          "MATIF",
          "MDAMCOMM",
          "EUREX",
          "TOKYO",
          "TOKYOFINX",
          "TOCOM",
          "OSAKASTK",
          "NASDQFUT",
          "MERECFF",
          "ITALDX",
          "NYSEBRUSS",
          "AMSTEX",
          "NYSEAMST",
          "WNRBORS",
          "NSDQSTKHLM",
          "AUSSECEX",
          "NSDQCOPP",
          "SOM",
          "TGE",
          "OTHNASDQ",
          "FBOVESPA",
          "MYDX",
          "OSLOASA",
          "KOR",
          "KOREAFUT",
          "SAFEX",
          "CNTJPNCX",
          "TAIWANFUT",
          "MEXDER",
          "NSXINDIA",
          "LONDONMTL",
          "WARSAW",
          "RUSSIA",
          "BDPST",
          "THAIFUT",
          "ASE",
          "BBO",
          "BOX",
          "MON",
          "NYO",
          "PCO",
          "PSO",
          "LIP",
          "BAT",
          "BCO",
          "BER",
          "BRN",
          "DBA",
          "DCO",
          "EJV",
          "IEX",
          "LSE",
          "MEX",
          "NP",
          "PPB",
          "QTX",
          "STU"
        ],
        "type": "string"
      },
      "ExecuteTradeBlockResponseApiModel": {
        "type": "object",
        "properties": {
          "TradeBlockId": {
            "type": "integer",
            "description": "Trade Block Id",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Trade Block Name",
            "nullable": true
          },
          "IsManualProcess": {
            "type": "boolean",
            "description": "Is Manual Process"
          },
          "TradeStatusType": {
            "$ref": "#/components/schemas/TradeStatusType"
          },
          "TradeStatusTypeName": {
            "type": "string",
            "description": "Trade status type name",
            "nullable": true,
            "readOnly": true
          },
          "Errors": {
            "type": "string",
            "description": "Processing errors",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FeeAgeCategoryType": {
        "enum": [
          "ZeroToThirty",
          "ThirtyToSixty",
          "SixtyToNinety",
          "OlderThanNinety"
        ],
        "type": "string"
      },
      "FeeApiModel": {
        "type": "object",
        "properties": {
          "FeeId": {
            "type": "integer",
            "description": "Internal unique fee Id.",
            "format": "int32"
          },
          "AccountId": {
            "type": "integer",
            "description": "Internal unique account Id associated to the fee.",
            "format": "int32"
          },
          "AccountNumber": {
            "type": "string",
            "description": "Account number.",
            "nullable": true
          },
          "TransactionCategoryId": {
            "type": "integer",
            "description": "Fee transaction category Id.",
            "format": "int32",
            "nullable": true
          },
          "FeeType": {
            "$ref": "#/components/schemas/FeeType"
          },
          "FeeTypeName": {
            "type": "string",
            "description": "Fee type name.",
            "nullable": true,
            "readOnly": true
          },
          "FeeStatusType": {
            "$ref": "#/components/schemas/FeeStatusType"
          },
          "FeeStatusTypeName": {
            "type": "string",
            "description": "Fee status type name.",
            "nullable": true,
            "readOnly": true
          },
          "PaymentFeeCollectionType": {
            "$ref": "#/components/schemas/FeeCollectionType"
          },
          "PaymentFeeCollectionTypeName": {
            "type": "string",
            "description": "Payment fee collection type name.",
            "nullable": true,
            "readOnly": true
          },
          "PrincipalCashAmount": {
            "type": "number",
            "description": "Principal cash amount.",
            "format": "double"
          },
          "IncomeCashAmount": {
            "type": "number",
            "description": "Income cash amount.",
            "format": "double"
          },
          "DateEffective": {
            "type": "string",
            "description": "Date effective.",
            "format": "date-time",
            "nullable": true
          },
          "DateCollected": {
            "type": "string",
            "description": "Date collected.",
            "format": "date-time",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "Fee description.",
            "nullable": true
          },
          "CreditIdentityRecordId": {
            "type": "integer",
            "description": "Credit to identity record Id.",
            "format": "int32",
            "nullable": true
          },
          "DateVoided": {
            "type": "string",
            "description": "Date voided.",
            "format": "date-time",
            "nullable": true
          },
          "FeeSettingId": {
            "type": "integer",
            "description": "Fee setting Id.",
            "format": "int32",
            "nullable": true
          },
          "FeeGenerationBatchId": {
            "type": "integer",
            "description": "Fee generation batch Id.",
            "format": "int32",
            "nullable": true
          },
          "CreatedDate": {
            "type": "string",
            "description": "Fee create date.",
            "format": "date-time"
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Fee modified date.",
            "format": "date-time"
          },
          "ModifiedBy": {
            "type": "string",
            "description": "Fee modified by.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FeeBalanceApiModel": {
        "type": "object",
        "properties": {
          "AccountId": {
            "type": "integer",
            "description": "Internal unique Cheetah Id for account the fee balance is related.",
            "format": "int32"
          },
          "AccountNumber": {
            "type": "string",
            "description": "The account number the fee balance is related.",
            "nullable": true
          },
          "OlderThanNinety": {
            "type": "number",
            "description": "Fee balance 90 days and older.",
            "format": "double",
            "nullable": true
          },
          "NinetyToSixty": {
            "type": "number",
            "description": "Fee balance between 60 and 90 days old.",
            "format": "double",
            "nullable": true
          },
          "SixtyToThirty": {
            "type": "number",
            "description": "Fee balance between 30 and 60 days old.",
            "format": "double",
            "nullable": true
          },
          "ThirtyToZero": {
            "type": "number",
            "description": "Fee balance between 0 and 30 days old.",
            "format": "double",
            "nullable": true
          },
          "TotalFeesOwed": {
            "type": "number",
            "description": "Total fee balance owed.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FeeCollectionType": {
        "enum": [
          "DeductFromAccount",
          "OtherAutomatic",
          "Invoice",
          "PayThroughClientPortal"
        ],
        "type": "string"
      },
      "FeeCreditToIdentityRecordApiModel": {
        "type": "object",
        "properties": {
          "FeeCreditToIdentityRecordId": {
            "type": "integer",
            "description": "Internal unique Cheetah Id for the fee credit to identity record.",
            "format": "int32"
          },
          "FeeSettingId": {
            "type": "integer",
            "description": "Internal unique Cheetah Id for the fee setting the fee schedule setting is related.",
            "format": "int32"
          },
          "FeeSettingScheduleId": {
            "type": "integer",
            "description": "Internal unique Cheetah Id for the fee setting schedule.",
            "format": "int32"
          },
          "FeeScheduleId": {
            "type": "integer",
            "description": "Internal unique Cheetah Id for the fee schedule.",
            "format": "int32"
          },
          "IdentityRecordId": {
            "type": "integer",
            "description": "Internal unique Cheetah Id for the trustee of the account.",
            "format": "int32"
          },
          "TrusteeName": {
            "type": "string",
            "description": "Display name for the trustee of the account.",
            "nullable": true
          },
          "Percentage": {
            "type": "number",
            "description": "Trustee percentage.",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "FeePaidFromAccountApiModel": {
        "type": "object",
        "properties": {
          "FeePaidFromAccountId": {
            "type": "integer",
            "description": "Internal unique Cheetah Id for fee paid from account.",
            "format": "int32"
          },
          "FeeCollectionType": {
            "$ref": "#/components/schemas/FeeCollectionType"
          },
          "FeeCollectionTypeName": {
            "type": "string",
            "description": "Fee collection type display name.",
            "nullable": true,
            "readOnly": true
          },
          "FeeSettingId": {
            "type": "integer",
            "description": "Internal unique Cheetah Id for the fee setting related to the fee paid from account.",
            "format": "int32"
          },
          "AccountId": {
            "type": "integer",
            "description": "Internal unique Cheetah Id for the account related to the fee setting.",
            "format": "int32"
          },
          "AccountNumber": {
            "type": "string",
            "description": "The account number for the account related to the fee setting.",
            "nullable": true
          },
          "PaidByOtherAccountId": {
            "type": "integer",
            "description": "Internal unique Cheetah Id for the fee paid by other account.",
            "format": "int32",
            "nullable": true
          },
          "PaidByOtherAccountNumber": {
            "type": "string",
            "description": "Fee paid by other account number.",
            "nullable": true
          },
          "Percentage": {
            "type": "number",
            "description": "Percentage",
            "format": "double"
          },
          "PaysOwnFee": {
            "type": "boolean",
            "description": "Pays own fee"
          }
        },
        "additionalProperties": false
      },
      "FeeScheduleApiModel": {
        "type": "object",
        "properties": {
          "FeeScheduleId": {
            "type": "integer",
            "description": "Internal unique fee schedule Id.",
            "format": "int32"
          },
          "InstitutionIdentityRecordId": {
            "type": "integer",
            "description": "Internal institution identity record Id. To obtain an Id use the /vX/Lookup service with the parameter GetInstitutionIdentityRecordValues.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Fee schedule name.",
            "nullable": true
          },
          "AnnualMinimumFeeAmount": {
            "type": "number",
            "description": "Annual minimum fee amount.",
            "format": "double",
            "nullable": true
          },
          "IsMinimumFeeAssessmentCyclical": {
            "type": "boolean",
            "description": "Returns yes or no whether minimum fee amount is cyclical"
          }
        },
        "additionalProperties": false
      },
      "FeeSettingApiModel": {
        "type": "object",
        "properties": {
          "FeeSettingId": {
            "type": "integer",
            "description": "Internal unique Cheetah Id for fee setting.",
            "format": "int32"
          },
          "AccountIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Internal unique Cheetah Id for account the fee setting is related.",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "description": "Fee setting name.",
            "nullable": true
          },
          "InvoiceFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "InvoiceFrequencyTypeName": {
            "type": "string",
            "description": "The invoice frequency type name.",
            "nullable": true,
            "readOnly": true
          },
          "MinimumFeeFrequencyType": {
            "$ref": "#/components/schemas/MinimumFeeFrequencyType"
          },
          "MinimumFeeFrequencyTypeName": {
            "type": "string",
            "description": "The minimum fee frequency type name.",
            "nullable": true,
            "readOnly": true
          },
          "MonthYearEnd": {
            "type": "integer",
            "description": "Month year end.",
            "format": "int32"
          },
          "FinalFeeDate": {
            "type": "string",
            "description": "Final fee date.",
            "format": "date-time",
            "nullable": true
          },
          "AnnualMaximumFeeAmount": {
            "type": "number",
            "description": "Annual maximum fee amount.",
            "format": "double",
            "nullable": true
          },
          "AnnualMinimumFeeAmount": {
            "type": "number",
            "description": "Annual minimum fee amount.",
            "format": "double",
            "nullable": true
          },
          "PrincipalPercentageOverride": {
            "type": "number",
            "description": "Principal percentage override.",
            "format": "double",
            "nullable": true
          },
          "CollectFeesInAdvance": {
            "type": "boolean",
            "description": "Collect fees in advance."
          },
          "IsGroup": {
            "type": "boolean",
            "description": "Is fee group."
          },
          "IsActive": {
            "type": "boolean",
            "description": "Is active."
          },
          "FeePaidFromAccountList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeePaidFromAccountApiModel"
            },
            "description": "Collection of paid from accounts.",
            "nullable": true
          },
          "FeeSchedules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeeSettingScheduleApiModel"
            },
            "description": "Collection of fee schedules.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FeeSettingScheduleApiModel": {
        "type": "object",
        "properties": {
          "FeeSettingScheduleId": {
            "type": "integer",
            "description": "Internal unique Cheetah Id for fee setting schedule.",
            "format": "int32"
          },
          "FeeSettingId": {
            "type": "integer",
            "description": "Internal unique Cheetah Id for fee setting the fee schedule setting is related.",
            "format": "int32"
          },
          "FeeScheduleId": {
            "type": "integer",
            "description": "Internal unique Cheetah Id for fee schedule the fee schedule setting is related.",
            "format": "int32"
          },
          "FeeAssessmentFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "FeeAssessmentFrequencyTypeName": {
            "type": "string",
            "description": "The fee assessment frequency type name.",
            "nullable": true,
            "readOnly": true
          },
          "PrincipalPercentage": {
            "type": "number",
            "description": "Principal percentage.",
            "format": "double"
          },
          "DiscountPercentage": {
            "type": "number",
            "description": "Discount percentage.",
            "format": "double"
          },
          "UseGroupFeeSettingPrincipalPercentageOverride": {
            "type": "boolean",
            "description": "Use group fee setting principal percentage override."
          },
          "ExcludedAccounts": {
            "type": "string",
            "description": "Excluded account Ids.",
            "nullable": true
          },
          "IsActive": {
            "type": "boolean",
            "description": "Is active."
          },
          "FeeCreditToTrustees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeeCreditToIdentityRecordApiModel"
            },
            "description": "Collection of credit to trustees.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FeeStatusType": {
        "enum": [
          "Pending",
          "Approved",
          "Void"
        ],
        "type": "string"
      },
      "FeeType": {
        "enum": [
          "Fee",
          "Credit",
          "Payment"
        ],
        "type": "string"
      },
      "FileAttachmentApiModel": {
        "type": "object",
        "properties": {
          "FileAttachmentId": {
            "type": "integer",
            "description": "Internal unique file attachment Id.",
            "format": "int32"
          },
          "FileType": {
            "$ref": "#/components/schemas/FileType"
          },
          "FileTypeName": {
            "type": "string",
            "description": "File type name.",
            "nullable": true,
            "readOnly": true
          },
          "Link": {
            "type": "string",
            "description": "Link to download file.",
            "nullable": true
          },
          "FileName": {
            "type": "string",
            "description": "Filename",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "description": "Name",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "Description",
            "nullable": true
          },
          "FileAttachmentSourceType": {
            "$ref": "#/components/schemas/FileAttachmentSourceType"
          },
          "FileAttachmentSourceTypeName": {
            "type": "string",
            "description": "File attachment source type name.",
            "nullable": true,
            "readOnly": true
          },
          "FileAttachmentCategoryType": {
            "$ref": "#/components/schemas/FileAttachmentCategoryType"
          },
          "FileAttachmentCategoryTypeName": {
            "type": "string",
            "description": "File attachment category type name.",
            "nullable": true,
            "readOnly": true
          },
          "Tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags",
            "nullable": true
          },
          "AvailableOnline": {
            "type": "boolean",
            "description": "File attachment availability online."
          },
          "CreatedDate": {
            "type": "string",
            "description": "Date file attachment was created.",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Date file attachment last modified.",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "description": "File attachment modified by.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FileAttachmentCategoryType": {
        "enum": [
          "Document",
          "Image",
          "InstitutionReport",
          "AccountReport",
          "AssetReport",
          "NameAndAddressReport",
          "UserReport",
          "CustomerStatement",
          "CheckPayment",
          "TransmittalPayment",
          "WirePayment",
          "ACHPayment",
          "NACHAFile",
          "ConsolidatedPaymentReport",
          "OFACMatches",
          "FincenMatches",
          "InstitutionExport",
          "UserExport",
          "TaxDocument"
        ],
        "type": "string"
      },
      "FileAttachmentSourceType": {
        "enum": [
          "UploadedFile",
          "ReportOutputFile",
          "PaymentOutputFile",
          "ExportOutputFile"
        ],
        "type": "string"
      },
      "FileType": {
        "enum": [
          "ImageGIF",
          "ImageJPEG",
          "ImageJPG",
          "ImagePNG",
          "ImageTIFF",
          "ImageTIF",
          "ImageBMP",
          "HTML",
          "HTM",
          "TXT",
          "WordDoc",
          "PDF",
          "Postscript",
          "EPS",
          "Excel",
          "Powerpoint",
          "ExcelX",
          "WordDocX",
          "OpenofficeDocument",
          "RTF",
          "CSV",
          "XML",
          "ZIP",
          "PowerpointX"
        ],
        "type": "string"
      },
      "FrequencyType": {
        "enum": [
          "RunOnce",
          "Daily",
          "Weekly",
          "BiWeekly",
          "SemiMonthly",
          "Monthly",
          "BiMonthly",
          "Quarterly",
          "SemiAnnually",
          "Annually",
          "TaxCycle",
          "Biennial",
          "Triennial"
        ],
        "type": "string"
      },
      "FrequencyWeekOfMonthType": {
        "enum": [
          "First",
          "Second",
          "Third",
          "Fourth",
          "Last"
        ],
        "type": "string"
      },
      "FundStatusType": {
        "enum": [
          "Active",
          "Closed",
          "NoNewMoney",
          "AdmissionsProhibited"
        ],
        "type": "string"
      },
      "GenderType": {
        "enum": [
          "Male",
          "Female",
          "NotKnown"
        ],
        "type": "string"
      },
      "GetAccountApiRequest": {
        "type": "object",
        "properties": {
          "AccountId": {
            "type": "integer",
            "description": "Internal unique account Id. If supplied, will return the record for that unique Id.",
            "format": "int32",
            "nullable": true
          },
          "AccountNumber": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "If account number is supplied, returns account for that number.",
            "nullable": true
          },
          "InstitutionIdentityRecordId": {
            "type": "integer",
            "description": "Used to restrict queries to specific Institutions. If not supplied, the query will be restricted\r\nto Institutions assigned to the user. To obtain an Id use the /vX/Lookup service with the parameter GetInstitutionIdentityRecordValues.",
            "format": "int32",
            "nullable": true
          },
          "LastModifiedDate": {
            "type": "string",
            "description": "If last modified date is supplied, returns accounts that have been modified since that date.",
            "format": "date-time",
            "nullable": true
          },
          "AdminOnly": {
            "type": "boolean",
            "description": "If supplied as true will only return accounts with your user as the Admin Officer.",
            "nullable": true
          },
          "limit": {
            "type": "integer",
            "description": "Determines the number of objects returned by the query.\r\nExample: A limit of 100 will return a maximum of 100 objects.",
            "format": "int32",
            "nullable": true
          },
          "offset": {
            "type": "integer",
            "description": "Index to specify where to start returning data.\r\nExample: An offset of 100 will return objects starting from object 101.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Get account request model."
      },
      "GetAccountCategoryApiRequest": {
        "type": "object",
        "properties": {
          "AccountCategoryId": {
            "type": "integer",
            "description": "Internal unique account category Id. If suppled, will return the record for that unique Id.",
            "format": "int32",
            "nullable": true
          },
          "AccountCategoryCode": {
            "type": "integer",
            "description": "If supplied will return the account category Id for that code.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetAccountExtractSetupApiRequest": {
        "type": "object",
        "properties": {
          "AtoId": {
            "type": "integer",
            "description": "Internal unique ATO ID. If supplied, will filter based on ATO ID.",
            "format": "int32",
            "nullable": true
          },
          "InterfaceMasterTypeId": {
            "type": "integer",
            "description": "The Interface Master Type Id.",
            "format": "int32",
            "nullable": true
          },
          "InterfaceMasterTypeName": {
            "type": "string",
            "description": "The Interface Master Type Name.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Get Account Extract Setup request model."
      },
      "GetAccountGroupApiRequest": {
        "type": "object",
        "properties": {
          "AccountGroupId": {
            "type": "integer",
            "description": "Internal unique account group Id. If supplied, will return the record for that unique Id.",
            "format": "int32",
            "nullable": true
          },
          "IsStatementGroup": {
            "type": "boolean",
            "description": "If IsStatementGroup is true, only Account Groups marked as IsStatementGroup will be returned"
          },
          "IsRelationshipView": {
            "type": "boolean",
            "description": "If IsRelationshipView is true, only Account Groups marked as IsRelationshipView will be returned"
          },
          "IsForInvestmentProcessing": {
            "type": "boolean",
            "description": "If IsForInvestmentProcessing is true, only Account Groups marked as IsForInvestmentProcessing will be returned"
          },
          "AccountGroupIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "If one or more AccountGroupId values are passed in, only the corresponding Account Groups will be returned",
            "nullable": true
          },
          "InstitutionIdentityRecordIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "If one or more InstitutionIdentityRecordId values are passed in, only Account Groups for the given Institution(s) will be returned",
            "nullable": true
          },
          "IsActive": {
            "type": "boolean",
            "description": "Is IsActive is true, only active account groups will be returned."
          },
          "IsShowMarketValue": {
            "type": "boolean",
            "description": "If IsShowMarketValue is true, the Market Value will be computed."
          },
          "IsShowAvailableCash": {
            "type": "boolean",
            "description": "If IsShowAvailableCash is true, the Available Cash will be computed"
          }
        },
        "additionalProperties": false,
        "description": "Get account group request model."
      },
      "GetAccountGroupRelationshipsApiRequest": {
        "required": [
          "AccountGroupId"
        ],
        "type": "object",
        "properties": {
          "AccountGroupId": {
            "type": "integer",
            "description": "Internal unique account group Id.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Get account group accounts request model."
      },
      "GetAccountHoldingsApiRequest": {
        "type": "object",
        "properties": {
          "AccountId": {
            "type": "integer",
            "description": "Internal unique account Id. If supplied, will return holdings for that unique Id. To obtain an Id use the /vX/Lookup service with the parameter GetAccountValues or GetAccountsForInstitutionValues.",
            "format": "int32",
            "nullable": true
          },
          "AssetId": {
            "type": "integer",
            "description": "Internal unique asset Id. If supplied, will return holdings for that unique Id. To obtain an Id use the /vX/Lookup service with the parameter GetAssetValues or GetAssetsForInstitutionValues.",
            "format": "int32",
            "nullable": true
          },
          "GetCurrentHoldings": {
            "type": "boolean",
            "description": "Set to true when the Account/GetAccountCurrentHoldings endpoint is used.\r\nIf true, the request will get the \"live\" holdings. (CHEETAH-2415)",
            "nullable": true
          },
          "BalanceDateFrom": {
            "type": "string",
            "description": "Balance date from. Must be supplied if BalanceDateTo is supplied and must be less\r\nthan or equal to BalanceDateTo.",
            "format": "date-time",
            "nullable": true
          },
          "BalanceDateTo": {
            "type": "string",
            "description": "Balance date to. If not supplied and BalanceDateFrom has a value, will retrieve\r\nholding records with a balance date greater than or equal to the BalanceDateFrom\r\nvalue. If BalanceDateTo is supplied it must be greater than or equal to BalanceDateFrom\r\nand will retrive holding records bewtween and inclusive of BalanceDateFrom and\r\nBalanceDateTo.",
            "format": "date-time",
            "nullable": true
          },
          "InstitutionIdentityRecordId": {
            "type": "integer",
            "description": "Used to restrict queries to specific Institutions. If not supplied, the query will be restricted\r\nto Institutions assigned to the user. To obtain an Id use the /vX/Lookup service with the parameter GetInstitutionIdentityRecordValues.",
            "format": "int32",
            "nullable": true
          },
          "limit": {
            "type": "integer",
            "description": "Determines the number of objects returned by the query.\r\nExample: A limit of 100 will return a maximum of 100 objects.",
            "format": "int32",
            "nullable": true
          },
          "offset": {
            "type": "integer",
            "description": "Index to specify where to start returning data.\r\nExample: An offset of 100 will return objects starting from object 101.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetAccountRelationshipApiRequest": {
        "type": "object",
        "properties": {
          "AccountId": {
            "type": "integer",
            "description": "Internal unique account Id. If supplied, will return account relationships for that account.",
            "format": "int32",
            "nullable": true
          },
          "IdentityRecordId": {
            "type": "integer",
            "description": "Internal unique identity record Id. If supplied, will return the record for that unique Id.",
            "format": "int32",
            "nullable": true
          },
          "TaxId": {
            "type": "string",
            "description": "Tax Id of the identity record to search for.",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "description": "Identity name to search for.",
            "nullable": true
          },
          "IdentityCode": {
            "type": "string",
            "description": "Identity code to search for.",
            "nullable": true
          },
          "LastModifiedDate": {
            "type": "string",
            "description": "If last modified date is supplied, returns account relationships that have been modified since that date.",
            "format": "date-time",
            "nullable": true
          },
          "InstitutionIdentityRecordId": {
            "type": "integer",
            "description": "Used to restrict queries to specific Institutions. If not supplied, the query will be restricted\r\nto Institutions assigned to the user.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Get account relationship request model."
      },
      "GetActivityApiRequest": {
        "type": "object",
        "properties": {
          "ActivityId": {
            "type": "integer",
            "description": "Internal unique activity Id.",
            "format": "int32",
            "nullable": true
          },
          "AccountId": {
            "type": "integer",
            "description": "Account Id. If supplied, will return activities for the given account Id. To obtain an Id use the /vX/Lookup service with the parameter GetAccountValues or GetAccountsForInstitutionValues.",
            "format": "int32",
            "nullable": true
          },
          "AssetId": {
            "type": "integer",
            "description": "Asset Id. If supplied, will return activities for the given asset Id. To obtain an Id use the /vX/Lookup service with the parameter GetAssetValues or GetAssetsForInstitutionValues.",
            "format": "int32",
            "nullable": true
          },
          "IdentityRecordId": {
            "type": "integer",
            "description": "Identity tax Id. If supplied, will return activities for the given identity record Id. To obtain an Id use the /vX/Lookup service with the parameter GetIdentityRecordValues.",
            "format": "int32",
            "nullable": true
          },
          "ActivityCategoryId": {
            "type": "integer",
            "description": "Activity Category Id. If supplied, will return activities for the given activity category Id. To obtain an Id use the /vX/Lookup service with the parameter GetActivityCategoryValues.",
            "format": "int32",
            "nullable": true
          },
          "ActivityDateTimeFrom": {
            "type": "string",
            "description": "Activity date time from. Must be supplied if ActivityDateTimeTo is supplied and must be less\r\nthan or equal to ActivityDateTimeTo.",
            "format": "date-time",
            "nullable": true
          },
          "ActivityDateTimeTo": {
            "type": "string",
            "description": "Activity date time to. If not supplied and ActivityDateTimeFrom has a value, will retrieve\r\nactivity records with an activity date time greater than or equal to the ActivityDateTimeFrom\r\nvalue. If ActivityDateTimeTo is supplied it must be greater than or equal to ActivityDateTimeFrom\r\nand will retrieve activity records between and inclusive of ActivityDateTimeFrom and\r\nActivityDateTimeTo.",
            "format": "date-time",
            "nullable": true
          },
          "LastModifiedDate": {
            "type": "string",
            "description": "If last modified date is supplied, returns activities that have been modified since that date.",
            "format": "date-time",
            "nullable": true
          },
          "InstitutionIdentityRecordId": {
            "type": "integer",
            "description": "Used to restrict queries to specific Institutions. If not supplied, the query will be restricted\r\nto Institutions assigned to the user. To obtain an Id use the /vX/Lookup service with the parameter GetInstitutionIdentityRecordValues.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Get activity request model."
      },
      "GetAssetApiRequest": {
        "type": "object",
        "properties": {
          "AssetId": {
            "type": "integer",
            "description": "Internal unique Id. If supplied, will retrieve the specified asset.",
            "format": "int32",
            "nullable": true
          },
          "AssetCode": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "Asset CUSIP. If supplied, will retrieve the specified asset.",
            "nullable": true
          },
          "Symbol": {
            "maxLength": 22,
            "minLength": 0,
            "type": "string",
            "description": "Asset symbol. If supplied, will retrieve the specified asset.",
            "nullable": true
          },
          "DomainModelClass": {
            "$ref": "#/components/schemas/DomainModelClass"
          },
          "LastModifiedDate": {
            "type": "string",
            "description": "Last modified date. If supplied will retrieve all assets that\r\nhave been modified since the given date.",
            "format": "date-time",
            "nullable": true
          },
          "InstitutionIdentityRecordId": {
            "type": "integer",
            "description": "Used to restrict queries to specific Institutions. If not supplied, the query will be restricted\r\nto Institutions assigned to the user.",
            "format": "int32",
            "nullable": true
          },
          "CoreAssetOnly": {
            "type": "boolean",
            "description": "Used to determine the level of detail returned. If supplied as true, the query and response will only include the main asset information."
          }
        },
        "additionalProperties": false,
        "description": "Get asset request model."
      },
      "GetCustomerStatementApiRequest": {
        "type": "object",
        "properties": {
          "AccountId": {
            "type": "integer",
            "description": "Internal unique account Id.",
            "format": "int32",
            "nullable": true
          },
          "IdentityRecordId": {
            "type": "integer",
            "description": "Internal unique identity record Id.",
            "format": "int32",
            "nullable": true
          },
          "ReportId": {
            "type": "integer",
            "description": "Internal unique report Id.",
            "format": "int32",
            "nullable": true
          },
          "CustomerStatementId": {
            "type": "integer",
            "description": "Internal unique customer statement Id.",
            "format": "int32",
            "nullable": true
          },
          "CustomerStatementDateSettledFrom": {
            "type": "string",
            "description": "The settled date range start date. If left null or empty, the query will not be limited to the date range.",
            "format": "date-time",
            "nullable": true
          },
          "CustomerStatementDateSettledTo": {
            "type": "string",
            "description": "The settled date range end date. If CustomerStatementDateSettledTo is null or empty and the\r\nCustomerStatementDateSettledFrom is not null or empty, then the query will be everything\r\ngreater and equal to CustomerStatementDateSettledFrom.",
            "format": "date-time",
            "nullable": true
          },
          "OnlyAvailableOnline": {
            "type": "boolean",
            "description": "Return file attachments marked as Available Online. If the parameter is null\r\nor false, then all file attachments will be returned.",
            "nullable": true
          },
          "FileAttachmentId": {
            "type": "integer",
            "description": "Return file attachments marked as Available Online. If the parameter is null\r\nor false, then all file attachments will be returned.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetDepositoryApiRequest": {
        "type": "object",
        "properties": {
          "IdentityRecordId": {
            "type": "integer",
            "description": "Internal unique Id. If supplied, will retrieve the specified Depository.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Get Depository request model."
      },
      "GetFeeApiRequest": {
        "type": "object",
        "properties": {
          "FeeId": {
            "type": "integer",
            "description": "Internal unique fee Id.",
            "format": "int32",
            "nullable": true
          },
          "AccountId": {
            "type": "integer",
            "description": "Internal unique account Id.",
            "format": "int32",
            "nullable": true
          },
          "DateEffectiveFrom": {
            "type": "string",
            "description": "Date fee effective from.",
            "format": "date-time",
            "nullable": true
          },
          "DateEffectiveTo": {
            "type": "string",
            "description": "Date fee effective to.",
            "format": "date-time",
            "nullable": true
          },
          "DateCollectedFrom": {
            "type": "string",
            "description": "Date fee collected from.",
            "format": "date-time",
            "nullable": true
          },
          "DateCollectedTo": {
            "type": "string",
            "description": "Date fee collected to.",
            "format": "date-time",
            "nullable": true
          },
          "FeeType": {
            "$ref": "#/components/schemas/FeeType"
          },
          "PaymentFeeCollectionType": {
            "$ref": "#/components/schemas/FeeCollectionType"
          },
          "TransactionCategoryIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Collection of fee transaction category Ids.",
            "nullable": true
          },
          "LastModifiedDate": {
            "type": "string",
            "description": "Fee last modified.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetFeeScheduleApiRequest": {
        "type": "object",
        "properties": {
          "FeeScheduleId": {
            "type": "integer",
            "description": "Internal unique fee schedule Id. If supplied, will return holdings for that unique Id.",
            "format": "int32",
            "nullable": true
          },
          "InstitutionIdentityRecordId": {
            "type": "integer",
            "description": "Used to restrict queries to specific Institutions. If not supplied, the query will be restricted\r\nto Institutions assigned to the user. To obtain an Id use the /vX/Lookup service with the parameter GetInstitutionIdentityRecordValues.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetFeeSettingApiRequest": {
        "type": "object",
        "properties": {
          "AccountId": {
            "type": "integer",
            "description": "Account Id to return fee settings for. To obtain an Id use the /vX/Lookup service with the parameter GetAccountValues or GetAccountsForInstitutionValues.",
            "format": "int32",
            "nullable": true
          },
          "FeeSettingId": {
            "type": "integer",
            "description": "The fee setting Id to retrieve.",
            "format": "int32",
            "nullable": true
          },
          "FeeSettingIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The list of fee setting Ids to retrieve.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetFileAttachmentApiRequest": {
        "type": "object",
        "properties": {
          "AccountId": {
            "type": "integer",
            "description": "Internal unique account Id.",
            "format": "int32",
            "nullable": true
          },
          "AssetId": {
            "type": "integer",
            "description": "Internal unique asset Id.",
            "format": "int32",
            "nullable": true
          },
          "ActivityId": {
            "type": "integer",
            "description": "Internal unique activity Id.",
            "format": "int32",
            "nullable": true
          },
          "IdentityRecordId": {
            "type": "integer",
            "description": "Internal unique identity record Id.",
            "format": "int32",
            "nullable": true
          },
          "ReportId": {
            "type": "integer",
            "description": "Internal unique report Id.",
            "format": "int32",
            "nullable": true
          },
          "UserExportQuerySettingsId": {
            "type": "integer",
            "description": "Internal unique user export query setting Id.",
            "format": "int32",
            "nullable": true
          },
          "FileAttachmentCreatedDateFrom": {
            "type": "string",
            "description": "The created date range start date. If left null or empty, the query will not be limited to the date range.",
            "format": "date-time",
            "nullable": true
          },
          "FileAttachmentCreatedDateTo": {
            "type": "string",
            "description": "The created date range end date. If FileAttachmentCreatedDateTo is null or empty and the\r\nFileAttachmentCreatedDateFrom is not null or empty, then the query will be everything\r\ngreater and equal to FileAttachmentCreatedDateFrom.",
            "format": "date-time",
            "nullable": true
          },
          "OnlyAvailableOnline": {
            "type": "boolean",
            "description": "Return file attachments marked as Available Online. If the parameter is null\r\nor false, then all file attachments will be returned.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetInstallationApiModel": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Installation Name",
            "nullable": true
          },
          "Identifier": {
            "type": "string",
            "description": "Institution Identifier.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetInstallationApiRequest": {
        "type": "object",
        "additionalProperties": false,
        "description": "Get account group request model."
      },
      "GetInterfaceMasterTypeApiRequest": {
        "type": "object",
        "properties": {
          "AtoId": {
            "type": "integer",
            "description": "Internal unique ATO ID. If supplied, will filter based on ATO ID.",
            "format": "int32",
            "nullable": true
          },
          "InterfaceMasterTypeId": {
            "type": "integer",
            "description": "The Interface Master Type Id.",
            "format": "int32",
            "nullable": true
          },
          "InterfaceTypeId": {
            "type": "integer",
            "description": "The Interface Type Id.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetInvesmentModelApiRequest": {
        "type": "object",
        "properties": {
          "AccountId": {
            "type": "integer",
            "description": "Internal unique Cheetah Id for account. To obtain an Id use the /vX/Lookup service with the parameter GetAccountValues or GetAccountsForInstitutionValues.",
            "format": "int32",
            "nullable": true
          },
          "AccountGroupId": {
            "type": "integer",
            "description": "Internal unique Cheetah Id for account group. To obtain an Id use the /vX/Lookup service with the parameter GetAccountGroupValues.",
            "format": "int32",
            "nullable": true
          },
          "InvestmentModelSettingId": {
            "type": "integer",
            "description": "Internal unique Cheetah Id for investment models. To obtain an Id use the /vX/Lookup service with the parameter GetInvestmentModelValues.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetNameAndAddressApiRequest": {
        "type": "object",
        "properties": {
          "IdentityRecordId": {
            "type": "integer",
            "description": "Optional filter parameter. Will lookup name and address by internal unique key.",
            "format": "int32",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "description": "Optional filter parameter. Will do a filter on full name where it contains the value.",
            "nullable": true
          },
          "TaxId": {
            "type": "string",
            "description": "Optional filter parameter. Unformatted tax id.",
            "nullable": true
          },
          "LastModifiedDate": {
            "type": "string",
            "description": "If last modified date is supplied, returns name and addresses that have been modified since that date.",
            "format": "date-time",
            "nullable": true
          },
          "IdentityCode": {
            "type": "string",
            "description": "Optional filter parameter. Will lookup name and address by identity code value.",
            "nullable": true
          },
          "InstitutionIdentityRecordId": {
            "type": "integer",
            "description": "Used to restrict queries to specific Institutions. If not supplied, the query will be restricted\r\nto Institutions assigned to the user.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetPendingScheduledTransactionsApiRequest": {
        "type": "object",
        "properties": {
          "ScheduledTransactionIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "A collection of ScheduledTransaction Ids.",
            "nullable": true
          },
          "AccountIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "A collection of internal unique Account Ids.",
            "nullable": true
          },
          "TransactionStatusType": {
            "$ref": "#/components/schemas/TransactionStatusType"
          }
        },
        "additionalProperties": false
      },
      "GetPendingTransactionsApiRequest": {
        "required": [
          "TransactionStatusType"
        ],
        "type": "object",
        "properties": {
          "TransactionId": {
            "type": "integer",
            "description": "Internal unique transaction Id.",
            "format": "int32",
            "nullable": true
          },
          "TransactionBatchId": {
            "type": "integer",
            "description": "Internal unique transaction batch Id.",
            "format": "int32",
            "nullable": true
          },
          "AccountIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "A collection of internal unique account Ids.",
            "nullable": true
          },
          "SourceTransactionReferenceNumbers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A collection of source transaction reference numbers.",
            "nullable": true
          },
          "TransactionStatusType": {
            "$ref": "#/components/schemas/TransactionStatusType"
          }
        },
        "additionalProperties": false
      },
      "GetScheduledTransactionSetupsApiRequest": {
        "type": "object",
        "properties": {
          "ScheduledTransactionIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "A collection of ScheduledTransaction Ids.",
            "nullable": true
          },
          "AccountIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "A collection of internal unique Account Ids.",
            "nullable": true
          },
          "TransactionStatusType": {
            "$ref": "#/components/schemas/TransactionStatusType"
          }
        },
        "additionalProperties": false
      },
      "GetTaskApiRequest": {
        "type": "object",
        "properties": {
          "TaskId": {
            "type": "integer",
            "description": "Unique task Id",
            "format": "int32",
            "nullable": true
          },
          "DueAsOfDate": {
            "type": "string",
            "description": "Task due as of date",
            "format": "date-time",
            "nullable": true
          },
          "AssignedToUserGuid": {
            "type": "string",
            "description": "Assigned to user guid",
            "format": "uuid",
            "nullable": true
          },
          "AccountIds": {
            "type": "string",
            "description": "Comma-delimited account ID list",
            "nullable": true
          },
          "AssetId": {
            "type": "integer",
            "description": "Asset ID",
            "format": "int32",
            "nullable": true
          },
          "IdentityRecordId": {
            "type": "integer",
            "description": "Identity record ID",
            "format": "int32",
            "nullable": true
          },
          "GetAllTasks": {
            "type": "boolean",
            "description": "Get All Tasks, i.e. ignore status",
            "nullable": true
          },
          "UserGuid": {
            "type": "string",
            "description": "User Guid",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Get task request model."
      },
      "GetTradeApiRequest": {
        "type": "object",
        "properties": {
          "TradeId": {
            "type": "integer",
            "description": "Internal unique TradeId. If supplied, will return the record for that unique Id.",
            "format": "int32",
            "nullable": true
          },
          "TradeBlockId": {
            "type": "integer",
            "description": "Trade Block Id. If supplied, will return trades for the given Trade Block Id.",
            "format": "int32",
            "nullable": true
          },
          "TradeStatusType": {
            "$ref": "#/components/schemas/TradeStatusType"
          },
          "TradeType": {
            "$ref": "#/components/schemas/TradeType"
          },
          "AccountId": {
            "type": "integer",
            "description": "Account Id. If supplied, will return trades for the given account Id. To obtain an Id use the /vX/Lookup service with the parameter GetAccountValues or GetAccountsForInstitutionValues.",
            "format": "int32",
            "nullable": true
          },
          "AssetId": {
            "type": "integer",
            "description": "Asset Id. If supplied, will return trades for the given asset Id. To obtain an Id use the /vX/Lookup service with the parameter GetAssetValues or GetAssetsForInstitutionValues.",
            "format": "int32",
            "nullable": true
          },
          "AccountIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Array of Account Ids. If supplied, will return trades for the given list of account Ids.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Get Trades request model"
      },
      "GetTradeBlockApiRequest": {
        "type": "object",
        "properties": {
          "TradeBlockId": {
            "type": "integer",
            "description": "Internal unique TradeBlockId. If supplied, will return the record for that unique Id.",
            "format": "int32",
            "nullable": true
          },
          "IsSweep": {
            "type": "boolean",
            "description": "Return trade blocks marked as sweep. \r\nIf supplied as true, will return only records that are sweeps.\r\nIf supplied as false, will return only records that aren't sweeps.\r\nIf not supplied, will return trade blocks regardless of sweep status.",
            "nullable": true
          },
          "DateSettledFrom": {
            "type": "string",
            "description": "Date settled from.\r\nMust be supplied if DateSettledTo is supplied and must be less than or equal to DateSettledTo.",
            "format": "date-time",
            "nullable": true
          },
          "DateSettledTo": {
            "type": "string",
            "description": "Date settled to. \r\nIf not supplied and DateSettledFrom has a value, will retrieve trade block records with a settle date greater than or equal to the DateSettledFrom value. \r\nIf DateSettledTo is supplied it must be greater than or equal to DateSettledFrom and will retrive trade block records bewtween and inclusive of DateSettledFrom and DateSettledTo.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Get Trade Blocks request model"
      },
      "GetTransactionApiRequest": {
        "type": "object",
        "properties": {
          "AccountId": {
            "type": "integer",
            "description": "Internal unique account Id. If supplied, will return all transaction histories for the given unique Id.",
            "format": "int32",
            "nullable": true
          },
          "DateSettledFrom": {
            "type": "string",
            "description": "Date settled from. Must be supplied if DateSettledTo is supplied and must be less\r\nthan or equal to DateSettledTo.",
            "format": "date-time",
            "nullable": true
          },
          "DateSettledTo": {
            "type": "string",
            "description": "Date settled to. If not supplied and DateSettledFrom has a value, will retrieve\r\ntransaction records with a settle date greater than or equal to the DateSettledFrom\r\nvalue. If DateSettledTo is supplied it must be greater than or equal to DateSettledFrom\r\nand will retrive transaction records bewtween and inclusive of DateSettledFrom and\r\nDateSettledTo.",
            "format": "date-time",
            "nullable": true
          },
          "DateTradedFrom": {
            "type": "string",
            "description": "Date settled from. Must be supplied if DateTradedTo is supplied and must be less\r\nthan or equal to DateTradedTo.",
            "format": "date-time",
            "nullable": true
          },
          "DateTradedTo": {
            "type": "string",
            "description": "Date settled to. If not supplied and DateTradedFrom has a value, will retrieve\r\ntransaction records with a settle date greater than or equal to the DateTradedFrom\r\nvalue. If DateTradedTo is supplied it must be greater than or equal to DateTradedFrom\r\nand will retrive transaction records bewtween and inclusive of DateTradedFrom and\r\nDateTradedTo.",
            "format": "date-time",
            "nullable": true
          },
          "AssetId": {
            "type": "integer",
            "description": "Internal unique asset Id. If supplied, will return all transaction histories for the given unique Id.",
            "format": "int32",
            "nullable": true
          },
          "TransactionCategoryId": {
            "type": "integer",
            "description": "Transaction category code. If supplied, will return all transactions\r\nfor the given transaction category code.",
            "format": "int32",
            "nullable": true
          },
          "InstitutionIdentityRecordId": {
            "type": "integer",
            "description": "Used to restrict queries to specific Institutions. If not supplied, the query will be restricted\r\nto Institutions assigned to the user.",
            "format": "int32",
            "nullable": true
          },
          "LastModifiedDate": {
            "type": "string",
            "description": "If last modified date is supplied, returns transactions that have been modified since that date.",
            "format": "date-time",
            "nullable": true
          },
          "CreatedDate": {
            "type": "string",
            "description": "If last created date is supplied, returns transactions that have been created since that date.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetTransactionImportSetupApiRequest": {
        "type": "object",
        "properties": {
          "AtoId": {
            "type": "integer",
            "description": "Internal ATO ID.",
            "format": "int32",
            "nullable": true
          },
          "InterfaceMasterTypeId": {
            "type": "integer",
            "description": "Interface Master Type Id.",
            "format": "int32",
            "nullable": true
          },
          "interfaceTypeId": {
            "type": "integer",
            "description": "Id associated with a specific interface type.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "HoldingApiModel": {
        "type": "object",
        "properties": {
          "AssetId": {
            "type": "integer",
            "description": "Internal asset Id.",
            "format": "int32",
            "nullable": true
          },
          "AssetCode": {
            "type": "string",
            "description": "Asset code/CUSIP.",
            "nullable": true
          },
          "Symbol": {
            "type": "string",
            "description": "Asset symbol.",
            "nullable": true
          },
          "DomainModelClass": {
            "$ref": "#/components/schemas/DomainModelClass"
          },
          "DomainModelClassName": {
            "type": "string",
            "description": "Domain model class (i.e. Bond, Stock, etc.) name.",
            "nullable": true,
            "readOnly": true
          },
          "PortfolioReportCategoryId": {
            "type": "integer",
            "description": "Internal portfolio report category Id.",
            "format": "int32",
            "nullable": true
          },
          "AssetCategory": {
            "$ref": "#/components/schemas/AssetCategory"
          },
          "AssetCategoryName": {
            "type": "string",
            "description": "Asset category name.",
            "nullable": true,
            "readOnly": true
          },
          "IsPurchaseActivityRestricted": {
            "type": "boolean",
            "description": "Is Purchase Activity Restricted"
          },
          "IsSalesActivityRestricted": {
            "type": "boolean",
            "description": "Is Sales Activity Restricted"
          },
          "DateOfRestrictionExpiration": {
            "type": "string",
            "description": "Date of restriction expiration.",
            "format": "date-time",
            "nullable": true
          },
          "Lots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LotApiModel"
            },
            "description": "Array of individual lots.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IdentityAccountRelationshipApiModel": {
        "type": "object",
        "properties": {
          "IdentityRecordId": {
            "type": "integer",
            "description": "Internal unique identity record Id.",
            "format": "int32"
          },
          "IdentityCode": {
            "type": "string",
            "description": "An alphanumeric code which the user can enter to aid searching.",
            "nullable": true
          },
          "DisplayName": {
            "type": "string",
            "description": "The preferred name to be displayed.",
            "nullable": true
          },
          "DomainModelClass": {
            "$ref": "#/components/schemas/DomainModelClass"
          },
          "DomainModelClassName": {
            "type": "string",
            "description": "Will be either Individual or Organization",
            "nullable": true,
            "readOnly": true
          },
          "PayeeName": {
            "type": "string",
            "description": "The name to be used for printing a check. If empty, use the entity's name.",
            "nullable": true
          },
          "TaxId": {
            "type": "string",
            "description": "The TaxID or SSN.",
            "nullable": true
          },
          "TaxIdType": {
            "$ref": "#/components/schemas/TaxIdType"
          },
          "TaxIdTypeName": {
            "type": "string",
            "description": "The type of the tax Id (US Social Security Number, US Employee Identification Number, etc.).",
            "nullable": true,
            "readOnly": true
          },
          "TaxIdStatusType": {
            "$ref": "#/components/schemas/TaxIdStatusType"
          },
          "TaxIdStatusTypeName": {
            "type": "string",
            "description": "Known, Unknown, etc.",
            "nullable": true,
            "readOnly": true
          },
          "Comments": {
            "type": "string",
            "description": "User entered comments.",
            "nullable": true
          },
          "IsActive": {
            "type": "boolean",
            "description": "Is name and address record still active."
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Identity record modified date.",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "description": "Identity record modified by.",
            "nullable": true
          },
          "CreatedDate": {
            "type": "string",
            "description": "Identity record creation date.",
            "format": "date-time",
            "nullable": true
          },
          "IdentityCustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldApiModel"
            },
            "description": "A collection of custom fields for the name and address record.",
            "nullable": true
          },
          "AccountRelationships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountRelationshipRecordApiModel"
            },
            "description": "Collection of account relationships.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IdentityClassificationApiModel": {
        "type": "object",
        "properties": {
          "InstitutionIdentityRecordClassificationId": {
            "type": "integer",
            "description": "Internal institution identity record classification Id.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Identity classification type name.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "Identity classification description.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "These are things like (i.e. User, Officer, Beneficiary, etc.)"
      },
      "IdentityClassificationType": {
        "enum": [
          "User",
          "Officer",
          "Broker",
          "Vendor",
          "EBPlanParticipant",
          "Prospect",
          "Beneficiary",
          "Trustee",
          "DonorGrantor",
          "Guardian",
          "Informational"
        ],
        "type": "string"
      },
      "IdentityRecordApiModel": {
        "type": "object",
        "properties": {
          "IdentityRecordId": {
            "type": "integer",
            "description": "Internal unique identity record Id.",
            "format": "int32"
          },
          "IdentityCode": {
            "type": "string",
            "description": "An alphanumeric code which the user can enter to aid searching.",
            "nullable": true
          },
          "DisplayName": {
            "type": "string",
            "description": "The preferred name to be displayed.",
            "nullable": true
          },
          "DomainModelClass": {
            "$ref": "#/components/schemas/DomainModelClass"
          },
          "DomainModelClassName": {
            "type": "string",
            "description": "Will be either Individual or Organization",
            "nullable": true,
            "readOnly": true
          },
          "PayeeName": {
            "type": "string",
            "description": "The name to be used for printing a check. If empty, use the entity's name.",
            "nullable": true
          },
          "TaxId": {
            "type": "string",
            "description": "The TaxID or SSN.",
            "nullable": true
          },
          "TaxIdType": {
            "$ref": "#/components/schemas/TaxIdType"
          },
          "TaxIdTypeName": {
            "type": "string",
            "description": "The type of the tax Id (US Social Security Number, US Employee Identification Number, etc.).",
            "nullable": true,
            "readOnly": true
          },
          "TaxIdStatusType": {
            "$ref": "#/components/schemas/TaxIdStatusType"
          },
          "TaxIdStatusTypeName": {
            "type": "string",
            "description": "Known, Unknown, etc.",
            "nullable": true,
            "readOnly": true
          },
          "Comments": {
            "type": "string",
            "description": "User entered comments.",
            "nullable": true
          },
          "IsActive": {
            "type": "boolean",
            "description": "Is name and address record still active."
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Identity record modified date.",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "description": "Identity record modified by.",
            "nullable": true
          },
          "CreatedDate": {
            "type": "string",
            "description": "Identity record creation date.",
            "format": "date-time",
            "nullable": true
          },
          "IdentityCustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldApiModel"
            },
            "description": "A collection of custom fields for the name and address record.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InterestRateApiModel": {
        "type": "object",
        "properties": {
          "InterestRateId": {
            "type": "integer",
            "description": "Internal unique Id. Internal interest rate record Id.",
            "format": "int32"
          },
          "Rate": {
            "type": "number",
            "description": "Interest rate.",
            "format": "double"
          },
          "DateEffectiveFrom": {
            "type": "string",
            "description": "Date effective from.",
            "format": "date-time",
            "nullable": true
          },
          "DateEffectiveTo": {
            "type": "string",
            "description": "Date effective to.",
            "format": "date-time",
            "nullable": true
          },
          "CreatedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InterfaceMasterTypeApiResponse": {
        "type": "object",
        "properties": {
          "InterfaceMasterTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "InterfaceTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "AtoId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GetPricing": {
            "type": "boolean",
            "nullable": true
          },
          "GetRatesDividends": {
            "type": "boolean",
            "nullable": true
          },
          "GetAssetData": {
            "type": "boolean",
            "nullable": true
          },
          "CreatedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InvestmentModelApiModel": {
        "type": "object",
        "properties": {
          "InvestmentModelId": {
            "type": "integer",
            "format": "int32"
          },
          "InstitutionIdentityRecordId": {
            "type": "integer",
            "description": "Internal unique identity record Id.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Investment Model name",
            "nullable": true
          },
          "ModelComponentPrimaryClassTypeId": {
            "type": "integer",
            "description": "Investment model model component primary class type Id",
            "format": "int32",
            "nullable": true
          },
          "ModelComponentPrimaryClassTypeName": {
            "type": "string",
            "description": "Investment model model component primary class type Name",
            "nullable": true
          },
          "InvestmentSegmentAllocationTypeName": {
            "type": "string",
            "description": "Investment segment allocation type name",
            "nullable": true
          },
          "InvestmentModelSegmentAllocation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestmentModelSegmentAllocationApiModel"
            },
            "description": "Investment model segment allocation",
            "nullable": true
          },
          "CreatedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InvestmentModelSegmentAllocationApiModel": {
        "type": "object",
        "properties": {
          "AssetIssuer": {
            "type": "string",
            "description": "Asset Issuer",
            "nullable": true
          },
          "AssetIssue": {
            "type": "string",
            "description": "Asset Issue",
            "nullable": true
          },
          "AssetCode": {
            "type": "string",
            "description": "Asset Code",
            "nullable": true
          },
          "AssetSymbol": {
            "type": "string",
            "description": "Asset Symbol",
            "nullable": true
          },
          "TargetPercentage": {
            "type": "number",
            "description": "Investment Model Segment Allocation Target Percentage",
            "format": "double"
          },
          "HighPercentage": {
            "type": "number",
            "description": "Investment Model Segment Allocation High Percentage",
            "format": "double"
          },
          "LowPercentage": {
            "type": "number",
            "description": "Investment Model Segment Allocation Low Percentage",
            "format": "double"
          },
          "CreatedDate": {
            "type": "string",
            "description": "Created Date",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Modified Date",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "description": "Modified By",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InvestmentModelSettingApiModel": {
        "type": "object",
        "properties": {
          "InvestmentModelSettingId": {
            "type": "integer",
            "description": "Internal unique Cheetah Id for investment model setting.",
            "format": "int32"
          },
          "AccountId": {
            "type": "integer",
            "description": "Internal unique Cheetah Id for account Id from investment model setting is related.",
            "format": "int32",
            "nullable": true
          },
          "AccountNumber": {
            "type": "string",
            "description": "Account number.",
            "nullable": true
          },
          "InvestmentModelId": {
            "type": "integer",
            "description": "Internal unique Cheetah Id  for investment mode from investment model setting is related.",
            "format": "int32"
          },
          "AccountGroupId": {
            "type": "integer",
            "description": "Internal unique Cheetah Id for account group Id from investment model setting is related.",
            "format": "int32",
            "nullable": true
          },
          "MarketValuePercentage": {
            "type": "number",
            "description": "Market value percentage",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "InvestmentSegmentAllocationType": {
        "enum": [
          "IndividualAsset",
          "PortfolioReportCategory",
          "IndustryType",
          "AssetCategory",
          "AssetPrimaryClass",
          "IncomeCash",
          "InvestmentModel"
        ],
        "type": "string"
      },
      "IRAHardToValueType": {
        "enum": [
          "StockOrOtherOwnershipInterestInACorporationThatIsNotReadilyTradableOnAnEstablishedSecuritiesMarket",
          "ShortOrLongTermDebtObligationThatIsNotTradedOnAnEstablishedSecuritiesMarket",
          "OwnershipInterestInALimitedLiabilityCompanyOrSimilarEntityUnlessTheInterestIsTradedOnAnEstablishedSecuritiesMarket",
          "RealEstate",
          "OwnershipInterestInAPartnershipTrustOrSimilarEntityUnlessTheInterestIsTradedOnAnEstablishedSecuritiesMarket",
          "OptionContractOrSimilarProductThatIsNotOfferedForTradeOnAnEstablishedOptionExchange",
          "OtherAssetThatDoesNotHaveAReadilyAvailableFMV",
          "MoreThanTwoOfThePreviouslyIdentifiedCategories"
        ],
        "type": "string"
      },
      "IRATransactionType": {
        "enum": [
          "None",
          "ContributionTraditional",
          "Distribution",
          "Rollover",
          "EmployerContribution",
          "EmployeeDeferral",
          "RothConversion",
          "Recharacterization"
        ],
        "type": "string"
      },
      "IssueStatusType": {
        "enum": [
          "Active",
          "Frozen",
          "Called",
          "InDefault",
          "Inactive"
        ],
        "type": "string"
      },
      "LoanApiModel": {
        "type": "object",
        "properties": {
          "DateOfIssue": {
            "type": "string",
            "description": "Date of issue.",
            "format": "date-time",
            "nullable": true
          },
          "DateOfMaturity": {
            "type": "string",
            "description": "Date of maturity.",
            "format": "date-time",
            "nullable": true
          },
          "DateOfFirstPayment": {
            "type": "string",
            "description": "Date of first payment.",
            "format": "date-time",
            "nullable": true
          },
          "OddLastCouponType": {
            "$ref": "#/components/schemas/OddLastCouponType"
          },
          "OddLastCouponTypeName": {
            "type": "string",
            "description": "Odd last coupon type name.",
            "nullable": true,
            "readOnly": true
          },
          "PaymentFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "PaymentFrequencyTypeName": {
            "type": "string",
            "description": "Payment frequency type name.",
            "nullable": true,
            "readOnly": true
          },
          "IncomePaymentFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "IncomePaymentFrequencyTypeName": {
            "type": "string",
            "description": "Income payment frequency type name.",
            "nullable": true,
            "readOnly": true
          },
          "IncomePaymentMonth": {
            "type": "integer",
            "description": "Income payment month.",
            "format": "int32",
            "nullable": true
          },
          "IncomePaymentDay": {
            "type": "integer",
            "description": "Income payment day.",
            "format": "int32",
            "nullable": true
          },
          "CompoundingFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "CompoundingFrequencyTypeName": {
            "type": "string",
            "description": "Compounding frequency type name.",
            "nullable": true,
            "readOnly": true
          },
          "AmortizationFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "AmortizationFrequencyTypeName": {
            "type": "string",
            "description": "Amortization frequency type name.",
            "nullable": true,
            "readOnly": true
          },
          "AccrualMethodType": {
            "$ref": "#/components/schemas/AccrualMethodType"
          },
          "AccrualMethodTypeName": {
            "type": "string",
            "description": "Accrual method type name.",
            "nullable": true,
            "readOnly": true
          },
          "DepositoryIdentityRecordId": {
            "type": "integer",
            "description": "Depository identity record Id.",
            "format": "int32",
            "nullable": true
          },
          "LenderIdentityRecordId": {
            "type": "integer",
            "description": "Lender  identity record Id.",
            "format": "int32",
            "nullable": true
          },
          "BorrowerIdentityRecordId": {
            "type": "integer",
            "description": "Borrower identity record id.",
            "format": "int32",
            "nullable": true
          },
          "PeriodicPaymentAmount": {
            "type": "number",
            "description": "Periodic payment amount.",
            "format": "double"
          },
          "ExcludeFromDelinquencyReporting": {
            "type": "boolean",
            "description": "Exclude from delinquency reporting."
          },
          "DateExcludeFromDelinquencyExpiration": {
            "type": "string",
            "description": "Date of expiration for exlusion from delinquency reporting.",
            "format": "date-time",
            "nullable": true
          },
          "LoanPaymentOrderType": {
            "$ref": "#/components/schemas/LoanPaymentOrderType"
          },
          "LoanPaymentOrderTypeName": {
            "type": "string",
            "description": "Loan Payment Order Type type name.",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "LoanPaymentOrderType": {
        "enum": [
          "FeeInterestPrincipal",
          "InterestFeePrincipal",
          "InterestPrincipalFee"
        ],
        "type": "string"
      },
      "LoginApiModel": {
        "type": "object",
        "properties": {
          "Jwt": {
            "type": "string",
            "description": "JWT security token",
            "nullable": true
          },
          "ExpiresIn": {
            "type": "integer",
            "description": "Time in milliseconds the token will expire",
            "format": "int32"
          },
          "IssuedDateTime": {
            "type": "string",
            "description": "The date and time in UTC format the token was issued",
            "format": "date-time"
          },
          "ExpirationDateTime": {
            "type": "string",
            "description": "the date and time in UTC format the token will expire",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "LookupApiModel": {
        "type": "object",
        "properties": {
          "LookupServiceType": {
            "$ref": "#/components/schemas/LookupServiceType"
          },
          "Items": {
            "type": "array",
            "items": { },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LookupApiRequest": {
        "type": "object",
        "properties": {
          "LookupService": {
            "$ref": "#/components/schemas/LookupServiceType"
          },
          "InstitutionIdentityRecordId": {
            "type": "integer",
            "description": "If the data service takes an institution identity record\r\nId, supply the value with this property.",
            "format": "int32",
            "nullable": true
          },
          "IdentityClassificationTypeId": {
            "type": "integer",
            "description": "If the data service takes an identity classification type\r\nId, supply the value with this property.",
            "format": "int32",
            "nullable": true
          },
          "Filter": {
            "type": "string",
            "description": "Used to narrow the results.",
            "nullable": true,
            "example": "Will do a wildcard type search '%Filter%'."
          },
          "Country": {
            "$ref": "#/components/schemas/Country"
          },
          "EnumType": {
            "type": "string",
            "description": "If requesting Enum values, use this property to specify which Enum type.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LookupServiceType": {
        "enum": [
          "GetEnumTypeValues",
          "GetUserDivisionValues",
          "GetUserDivisionsForInstitutionValues",
          "GetAllOfficerValues",
          "GetAllOfficersForInstitutionValues",
          "GetCountryValues",
          "GetStateProvinceValues",
          "GetAccountCategoryValues",
          "GetInstitutionIdentityRecordValues",
          "GetActivityCategoryValues",
          "GetPricingSourceValues",
          "GetQualityRatingSourceValues",
          "GetIndustryValues",
          "GetFundFamilyValues",
          "GetFundCategoryValues",
          "GetInvestmentObjectiveValues",
          "GetSweepSetupValues",
          "GetPerformanceIndexValues",
          "GetFeeScheduleValues",
          "GetStatesForCountry",
          "GetAccountValues",
          "GetAccountsForInstitutionValues",
          "GetAssetValues",
          "GetAssetsForInstitutionValues",
          "GetTransactionCategoryValues",
          "GetDepositoryValues",
          "GetInvestmentModelValues",
          "GetAccountGroupValues",
          "GetPortfolioReportCategoryValues",
          "GetIdentityRecordValues",
          "GetActiveUserValues",
          "GetCapacityCategoryValues",
          "GetAllInvestmentObjectiveValues",
          "GetBrokerValues",
          "GetAccountRelationshipTypeValues",
          "GetRegistrationTypeValues",
          "GetLocationTypeValues",
          "GetReportValues",
          "GetUserExportQuerySettingValues",
          "GetInvestmentPowerTypeValues",
          "GetHowAcquiredTypeValues",
          "GetActiveUsersByIdentityRecord",
          "GetIdentityClassificationTypeValues",
          "GetAccountRelationshipTypesByIdentityClassificationTypeId"
        ],
        "type": "string"
      },
      "LotApiModel": {
        "type": "object",
        "properties": {
          "LotId": {
            "type": "integer",
            "description": "Internal lot Id.",
            "format": "int32",
            "nullable": true
          },
          "LotNumber": {
            "type": "integer",
            "description": "Lot number.",
            "format": "int32",
            "nullable": true
          },
          "BalanceDate": {
            "type": "string",
            "description": "Balance date.",
            "format": "date-time",
            "nullable": true
          },
          "DateAcquired": {
            "type": "string",
            "description": "Date acquired.",
            "format": "date-time",
            "nullable": true
          },
          "UnitsActual": {
            "type": "number",
            "description": "Units actual.",
            "format": "double",
            "nullable": true
          },
          "UnitsAvailable": {
            "type": "number",
            "description": "Units available.",
            "format": "double",
            "nullable": true
          },
          "RestrictedPledgedUnits": {
            "type": "number",
            "description": "Restricted pledged units.",
            "format": "double",
            "nullable": true
          },
          "IncomeInvestAmountActual": {
            "type": "number",
            "description": "Income invest amount actual.",
            "format": "double",
            "nullable": true
          },
          "IncomeInvestAmountAvailable": {
            "type": "number",
            "description": "Income invest amount available.",
            "format": "double",
            "nullable": true
          },
          "PrincipalInvestAmountActual": {
            "type": "number",
            "description": "Principal invest amount actual.",
            "format": "double",
            "nullable": true
          },
          "PrincipalInvestAmountAvailable": {
            "type": "number",
            "description": "Principal invest amount available.",
            "format": "double",
            "nullable": true
          },
          "CostBasisActual": {
            "type": "number",
            "description": "Cost basis actual.",
            "format": "double",
            "nullable": true
          },
          "CostBasisAvailable": {
            "type": "number",
            "description": "Cost basis available.",
            "format": "double",
            "nullable": true
          },
          "OriginalCostBasisActual": {
            "type": "number",
            "description": "Original cost basis actual.",
            "format": "double",
            "nullable": true
          },
          "OriginalCostBasisAvailable": {
            "type": "number",
            "description": "Original cost basis available.",
            "format": "double",
            "nullable": true
          },
          "CapitalGainLossActual": {
            "type": "number",
            "description": "Capital gain loss actual.",
            "format": "double",
            "nullable": true
          },
          "CapitalGainLossAvailable": {
            "type": "number",
            "description": "Capital gain loss available.",
            "format": "double",
            "nullable": true
          },
          "AssetPrice": {
            "type": "number",
            "description": "Asset price.",
            "format": "double",
            "nullable": true
          },
          "MarketValueActual": {
            "type": "number",
            "description": "Market value actual.",
            "format": "double",
            "nullable": true
          },
          "MarketValueAvailable": {
            "type": "number",
            "description": "Market value available.",
            "format": "double",
            "nullable": true
          },
          "IncomeCashAmountActual": {
            "type": "number",
            "description": "Income cash amount actual.",
            "format": "double",
            "nullable": true
          },
          "IncomeCashAmountAvailable": {
            "type": "number",
            "description": "Income cash amount available.",
            "format": "double",
            "nullable": true
          },
          "PrincipalCashAmountActual": {
            "type": "number",
            "description": "Principal cash amount actual.",
            "format": "double",
            "nullable": true
          },
          "PrincipalCashAmountAvailable": {
            "type": "number",
            "description": "Principal cash amount available.",
            "format": "double",
            "nullable": true
          },
          "LastModifiedTransactionDate": {
            "type": "string",
            "description": "Last modified transaction date.",
            "format": "date-time",
            "nullable": true
          },
          "MostRecentPriceModifiedDate": {
            "type": "string",
            "description": "Most recent price modified date.",
            "format": "date-time",
            "nullable": true
          },
          "LastRunDateTime": {
            "type": "string",
            "description": "Last run date time.",
            "format": "date-time",
            "nullable": true
          },
          "RegistrationTypeId": {
            "type": "integer",
            "description": "Registration Type Id.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MarketCapType": {
        "enum": [
          "MicroCap",
          "SmallCap",
          "MidCap",
          "LargeCap"
        ],
        "type": "string"
      },
      "MinimumFeeFrequencyType": {
        "enum": [
          "Monthly",
          "Quarterly",
          "Annually"
        ],
        "type": "string"
      },
      "MutualFundApiModel": {
        "type": "object",
        "properties": {
          "IncomePaymentFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "IncomePaymentFrequencyTypeName": {
            "type": "string",
            "description": "Income payment frequency type name.",
            "nullable": true,
            "readOnly": true
          },
          "IncomePaymentMonth": {
            "type": "integer",
            "description": "Income payment month.",
            "format": "int32",
            "nullable": true
          },
          "IncomePaymentDay": {
            "type": "integer",
            "description": "Income payment day.",
            "format": "int32",
            "nullable": true
          },
          "UseDailyFactor": {
            "type": "boolean",
            "description": "Use daily factor."
          },
          "AccrualMethodType": {
            "$ref": "#/components/schemas/AccrualMethodType"
          },
          "AccrualMethodTypeName": {
            "type": "string",
            "description": "Accrual method type name.",
            "nullable": true,
            "readOnly": true
          },
          "ExchangeType": {
            "$ref": "#/components/schemas/ExchangeType"
          },
          "ExchangeTypeName": {
            "type": "string",
            "description": "Exchange type name.",
            "nullable": true,
            "readOnly": true
          },
          "EarningsPerShareDiluted": {
            "type": "number",
            "description": "Earnings per share diluted.",
            "format": "double",
            "nullable": true
          },
          "FundFamilyId": {
            "type": "integer",
            "description": "Fund family.",
            "format": "int32",
            "nullable": true
          },
          "FundCategoryId": {
            "type": "integer",
            "description": "Fund category.",
            "format": "int32",
            "nullable": true
          },
          "FundNumber": {
            "type": "string",
            "description": "Fund number.",
            "nullable": true
          },
          "FundStatusType": {
            "$ref": "#/components/schemas/FundStatusType"
          },
          "FundStatusTypeName": {
            "type": "string",
            "description": "Fund status type name.",
            "nullable": true,
            "readOnly": true
          },
          "ShortTermRedemptionFeePercent": {
            "type": "number",
            "description": "Short term redemption fee percent.",
            "format": "double",
            "nullable": true
          },
          "ShortTermHoldingPeriod": {
            "type": "integer",
            "description": "Short term holding period.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NameAndAddressApiModel": {
        "type": "object",
        "properties": {
          "IdentityRecordId": {
            "type": "integer",
            "description": "Internal unique identity record Id.",
            "format": "int32"
          },
          "IdentityCode": {
            "type": "string",
            "description": "An alphanumeric code which the user can enter to aid searching.",
            "nullable": true
          },
          "DisplayName": {
            "type": "string",
            "description": "The preferred name to be displayed.",
            "nullable": true
          },
          "DomainModelClass": {
            "$ref": "#/components/schemas/DomainModelClass"
          },
          "DomainModelClassName": {
            "type": "string",
            "description": "Will be either Individual or Organization",
            "nullable": true,
            "readOnly": true
          },
          "PayeeName": {
            "type": "string",
            "description": "The name to be used for printing a check. If empty, use the entity's name.",
            "nullable": true
          },
          "TaxId": {
            "type": "string",
            "description": "The TaxID or SSN.",
            "nullable": true
          },
          "TaxIdType": {
            "$ref": "#/components/schemas/TaxIdType"
          },
          "TaxIdTypeName": {
            "type": "string",
            "description": "The type of the tax Id (US Social Security Number, US Employee Identification Number, etc.).",
            "nullable": true,
            "readOnly": true
          },
          "TaxIdStatusType": {
            "$ref": "#/components/schemas/TaxIdStatusType"
          },
          "TaxIdStatusTypeName": {
            "type": "string",
            "description": "Known, Unknown, etc.",
            "nullable": true,
            "readOnly": true
          },
          "Comments": {
            "type": "string",
            "description": "User entered comments.",
            "nullable": true
          },
          "IsActive": {
            "type": "boolean",
            "description": "Is name and address record still active."
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Identity record modified date.",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "description": "Identity record modified by.",
            "nullable": true
          },
          "CreatedDate": {
            "type": "string",
            "description": "Identity record creation date.",
            "format": "date-time",
            "nullable": true
          },
          "IdentityCustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldApiModel"
            },
            "description": "A collection of custom fields for the name and address record.",
            "nullable": true
          },
          "InstitutionIdentityRecordId": {
            "type": "integer",
            "description": "Internal institution identity record Id.",
            "format": "int32"
          },
          "TaxIdTypeCountry": {
            "$ref": "#/components/schemas/Country"
          },
          "TaxIdTypeCountryName": {
            "type": "string",
            "description": "The country name for the tax Id type.",
            "nullable": true,
            "readOnly": true
          },
          "TaxIdTypeCountryAbbreviation": {
            "type": "string",
            "description": "The country abbreviation for the tax Id type.",
            "nullable": true
          },
          "FirstName": {
            "type": "string",
            "description": "The first name of the Individual.",
            "nullable": true
          },
          "MiddleName": {
            "type": "string",
            "description": "The middle name of the Individual.",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "description": "The last name of the Individual.",
            "nullable": true
          },
          "SalutationType": {
            "$ref": "#/components/schemas/SalutationType"
          },
          "SalutationTypeName": {
            "type": "string",
            "description": "Mr., Mrs., etc.",
            "nullable": true,
            "readOnly": true
          },
          "Title": {
            "type": "string",
            "description": "The individual's title.",
            "nullable": true
          },
          "DateOfBirth": {
            "type": "string",
            "description": "Individual's date of birth.",
            "format": "date-time",
            "nullable": true
          },
          "DateOfDeath": {
            "type": "string",
            "description": "Individual's date of death.",
            "format": "date-time",
            "nullable": true
          },
          "GenderType": {
            "$ref": "#/components/schemas/GenderType"
          },
          "GenderTypeName": {
            "type": "string",
            "description": "Male or Female.",
            "nullable": true,
            "readOnly": true
          },
          "OrganizationLegalName": {
            "type": "string",
            "description": "Organization legal name.",
            "nullable": true
          },
          "OrganizationContactName": {
            "type": "string",
            "description": "Contact at organization.",
            "nullable": true
          },
          "IdentityClassifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityClassificationApiModel"
            },
            "description": "A collection of identity classifications (i.e. Officer, Beneficiary, User, etc.)",
            "nullable": true
          },
          "EmailAddresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailApiModel"
            },
            "description": "A collection of email addresses.",
            "nullable": true
          },
          "PhoneNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumberApiModel"
            },
            "description": "A collection of phone numbers.",
            "nullable": true
          },
          "PostalAddresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostalAddressApiModel"
            },
            "description": "A collection of postal addresses.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NoApiModel": {
        "type": "object",
        "additionalProperties": false
      },
      "OddLastCouponType": {
        "enum": [
          "NotSuppliedNormal",
          "RegularGenerallyZeroCouponAndShortTermDiscountBonds",
          "Short",
          "Long",
          "OtherSituation"
        ],
        "type": "string"
      },
      "OptionApiModel": {
        "type": "object",
        "properties": {
          "IndustryId": {
            "type": "integer",
            "description": "Industry type.",
            "format": "int32",
            "nullable": true
          },
          "ExchangeType": {
            "$ref": "#/components/schemas/ExchangeType"
          },
          "ExchangeTypeName": {
            "type": "string",
            "description": "Exchange type name.",
            "nullable": true,
            "readOnly": true
          },
          "DateOfExpiration": {
            "type": "string",
            "description": "Date of expiration.",
            "format": "date-time",
            "nullable": true
          },
          "AssociatedAssetId": {
            "type": "integer",
            "description": "Associated asset internal Id.",
            "format": "int32",
            "nullable": true
          },
          "AssociatedAssetCode": {
            "type": "string",
            "description": "Associated asset CUSIP.",
            "nullable": true
          },
          "StrikePriceAmount": {
            "type": "number",
            "description": "Strike price amount.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OtherAssetApiModel": {
        "type": "object",
        "properties": {
          "IncomePaymentFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "IncomePaymentFrequencyTypeName": {
            "type": "string",
            "description": "Income payment frequency type name.",
            "nullable": true,
            "readOnly": true
          },
          "IncomePaymentMonth": {
            "type": "integer",
            "description": "Income payment month.",
            "format": "int32",
            "nullable": true
          },
          "IncomePaymentDay": {
            "type": "integer",
            "description": "Income payment day.",
            "format": "int32",
            "nullable": true
          },
          "AmortizationFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "AmortizationFrequencyTypeName": {
            "type": "string",
            "description": "Amortization frequency type name.",
            "nullable": true,
            "readOnly": true
          },
          "AccrualMethodType": {
            "$ref": "#/components/schemas/AccrualMethodType"
          },
          "AccrualMethodTypeName": {
            "type": "string",
            "description": "Accrual method type name.",
            "nullable": true,
            "readOnly": true
          },
          "CompoundingFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "CompoundingFrequencyTypeName": {
            "type": "string",
            "description": "Compound frequency type name.",
            "nullable": true,
            "readOnly": true
          },
          "DepositoryIdentityRecordId": {
            "type": "integer",
            "description": "Depository identity record Id.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentRegister": {
        "type": "object",
        "properties": {
          "PaymentRegisterId": {
            "type": "integer",
            "format": "int32"
          },
          "PaymentPrintBatchId": {
            "type": "integer",
            "format": "int32"
          },
          "PaymentGroupKey": {
            "type": "string",
            "nullable": true
          },
          "PaymentTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "PaymentStatusTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "ItemNumber": {
            "type": "integer",
            "format": "int32"
          },
          "DatePayment": {
            "$ref": "#/components/schemas/Date"
          },
          "PaymentAmount": {
            "type": "number",
            "format": "double"
          },
          "AccountNumber": {
            "type": "string",
            "nullable": true
          },
          "AccountName": {
            "type": "string",
            "nullable": true
          },
          "PayeeName": {
            "type": "string",
            "nullable": true
          },
          "PayeeAddressAttention": {
            "type": "string",
            "nullable": true
          },
          "PayeeAddressLine1": {
            "type": "string",
            "nullable": true
          },
          "PayeeAddressLine2": {
            "type": "string",
            "nullable": true
          },
          "PayeeAddressLine3": {
            "type": "string",
            "nullable": true
          },
          "PayeeAddressCity": {
            "type": "string",
            "nullable": true
          },
          "PayeeAddressPostalCode": {
            "type": "string",
            "nullable": true
          },
          "PayeeAddressStateProvince": {
            "type": "string",
            "nullable": true
          },
          "PayeeAddressCountry": {
            "type": "string",
            "nullable": true
          },
          "PayeeAddressSpecialInstructions": {
            "type": "string",
            "nullable": true
          },
          "PayeeAccountNumber": {
            "type": "string",
            "nullable": true
          },
          "PayeeRoutingNumber": {
            "type": "string",
            "nullable": true
          },
          "InstitutionPaymentAccountId": {
            "type": "integer",
            "format": "int32"
          },
          "InstitutionName": {
            "type": "string",
            "nullable": true
          },
          "InstitutionAddressAttention": {
            "type": "string",
            "nullable": true
          },
          "InstitutionAddressLine1": {
            "type": "string",
            "nullable": true
          },
          "InstitutionAddressLine2": {
            "type": "string",
            "nullable": true
          },
          "InstitutionAddressLine3": {
            "type": "string",
            "nullable": true
          },
          "InstitutionAddressCity": {
            "type": "string",
            "nullable": true
          },
          "InstitutionAddressPostalCode": {
            "type": "string",
            "nullable": true
          },
          "InstitutionAddressStateProvince": {
            "type": "string",
            "nullable": true
          },
          "InstitutionAddressCountry": {
            "type": "string",
            "nullable": true
          },
          "InstitutionAddressSpecialInstructions": {
            "type": "string",
            "nullable": true
          },
          "InstitutionPaymentAccountNumber": {
            "type": "string",
            "nullable": true
          },
          "InstitutionPaymentAccountRoutingNumber": {
            "type": "string",
            "nullable": true
          },
          "Memo": {
            "type": "string",
            "nullable": true
          },
          "UseElectronicSignature": {
            "type": "boolean"
          },
          "IsPaymentAutoCombined": {
            "type": "boolean"
          },
          "DateGenerated": {
            "$ref": "#/components/schemas/Date"
          },
          "DateCleared": {
            "$ref": "#/components/schemas/Date"
          },
          "CreatedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "nullable": true
          },
          "Timestamp": {
            "type": "string",
            "format": "byte",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentType": {
        "enum": [
          "Informational",
          "ACH",
          "Check",
          "TransmittalForCheck",
          "TransmittalForWire"
        ],
        "type": "string"
      },
      "PendingTransactionApiModel": {
        "type": "object",
        "properties": {
          "TransactionId": {
            "type": "integer",
            "description": "Internal unique transaction Id.",
            "format": "int32"
          },
          "TransactionCategoryId": {
            "type": "integer",
            "description": "Internal unique transaction category Id.",
            "format": "int32"
          },
          "TransactionBatchId": {
            "type": "integer",
            "description": "Internal unique transaction batch Id.",
            "format": "int32",
            "nullable": true
          },
          "TransactionStatusType": {
            "$ref": "#/components/schemas/TransactionStatusType"
          },
          "TransactionStatusTypeName": {
            "type": "string",
            "description": "Transaction status type name.",
            "nullable": true,
            "readOnly": true
          },
          "OverrideTaxLotHarvestingType": {
            "$ref": "#/components/schemas/TaxLotHarvestingType"
          },
          "OverrideTaxLotHarvestingTypeName": {
            "type": "string",
            "description": "Override tax lot harvesting type name.",
            "nullable": true,
            "readOnly": true
          },
          "UseSpecifiedLot": {
            "type": "string",
            "description": "Use these specified lots.",
            "nullable": true
          },
          "AccountId": {
            "type": "integer",
            "description": "Internal unique account Id.",
            "format": "int32"
          },
          "Price": {
            "type": "number",
            "description": "Price",
            "format": "double",
            "nullable": true
          },
          "AssetId": {
            "type": "integer",
            "description": "Internal unique asset Id.",
            "format": "int32",
            "nullable": true
          },
          "DateTraded": {
            "type": "string",
            "description": "Date traded.",
            "format": "date-time",
            "nullable": true
          },
          "DateSettled": {
            "type": "string",
            "description": "Date transaction settled.",
            "format": "date-time",
            "nullable": true
          },
          "DateStatementEffective": {
            "type": "string",
            "description": "Date statement effective.",
            "format": "date-time",
            "nullable": true
          },
          "TaxYear": {
            "type": "integer",
            "description": "Tax year.",
            "format": "int32"
          },
          "Units": {
            "type": "number",
            "description": "Units",
            "format": "double"
          },
          "PrincipalCashAmount": {
            "type": "number",
            "description": "Principal cash amount.",
            "format": "double"
          },
          "IncomeCashAmount": {
            "type": "number",
            "description": "Income cash amount.",
            "format": "double",
            "nullable": true
          },
          "PrincipalInvestAmount": {
            "type": "number",
            "description": "Principal invest amount.",
            "format": "double"
          },
          "IncomeInvestAmount": {
            "type": "number",
            "description": "Income invest amount.",
            "format": "double"
          },
          "StateInvestAmount": {
            "type": "number",
            "description": "State invest amount.",
            "format": "double"
          },
          "PrincipalInventoryAmount": {
            "type": "number",
            "description": "Principal inventory amount.",
            "format": "double"
          },
          "IncomeInventoryAmount": {
            "type": "number",
            "description": "Income inventory amount.",
            "format": "double"
          },
          "BalanceAdjustmentOverride": {
            "type": "boolean",
            "description": "Balance adjustment override."
          },
          "TransactionNarrativeId": {
            "type": "integer",
            "description": "Internal unique transaction narrative Id.",
            "format": "int32",
            "nullable": true
          },
          "Narrative": {
            "type": "string",
            "description": "Transaction narrative.",
            "nullable": true
          },
          "PaymentId": {
            "type": "integer",
            "description": "Internal unique payment Id.",
            "format": "int32",
            "nullable": true
          },
          "PostingErrors": {
            "type": "string",
            "description": "Post errors message.",
            "nullable": true
          },
          "RegistrationTypeId": {
            "type": "integer",
            "description": "Internal unique registration type Id.",
            "format": "int32",
            "nullable": true
          },
          "LocationTypeId": {
            "type": "integer",
            "description": "Internal unique location type Id.",
            "format": "int32",
            "nullable": true
          },
          "StatementReportOptionType": {
            "$ref": "#/components/schemas/StatementReportOptionType"
          },
          "StatementReportOptionTypeName": {
            "type": "string",
            "description": "Statement report option type name.",
            "nullable": true,
            "readOnly": true
          },
          "BrokerIdentityRecordId": {
            "type": "integer",
            "description": "Internal unique broker identity record Id.",
            "format": "int32",
            "nullable": true
          },
          "CommissionFee": {
            "type": "number",
            "description": "Commission fee.",
            "format": "double",
            "nullable": true
          },
          "CalculatedCommissionFee": {
            "type": "number",
            "description": "Calculate commission fee.",
            "format": "double",
            "nullable": true
          },
          "SecFee": {
            "type": "number",
            "description": "Sec fee.",
            "format": "double",
            "nullable": true
          },
          "OtherFee": {
            "type": "number",
            "description": "Other fee.",
            "format": "double",
            "nullable": true
          },
          "TradingFeeOverride": {
            "type": "boolean",
            "description": "Trading fee override."
          },
          "TransactionBatchCode": {
            "type": "string",
            "description": "Transaction batch code.",
            "nullable": true
          },
          "TransactionBatchName": {
            "type": "string",
            "description": "Transaction batch name.",
            "nullable": true
          },
          "TransactionCategoryDescription": {
            "type": "string",
            "description": "Transaction Category Description.",
            "nullable": true
          },
          "AssetCode": {
            "type": "string",
            "description": "CUSIP",
            "nullable": true
          },
          "AccountNumber": {
            "type": "string",
            "description": "Account number.",
            "nullable": true
          },
          "CreatedDate": {
            "type": "string",
            "description": "Transaction created date.",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Transaction modified date.",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "description": "Transaction modified by.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PhoneNumberApiModel": {
        "type": "object",
        "properties": {
          "ContactMechanismId": {
            "type": "integer",
            "description": "Internal contact mechanism Id.",
            "format": "int32"
          },
          "ContactMechanismType": {
            "$ref": "#/components/schemas/ContactMechanismType"
          },
          "ContactMechanismTypeName": {
            "type": "string",
            "description": "Contact mechanism type name.",
            "nullable": true,
            "readOnly": true
          },
          "ContactMechanismUseType": {
            "$ref": "#/components/schemas/ContactMechanismUseType"
          },
          "ContactMechanismUseTypeName": {
            "type": "string",
            "description": "Contact mechanism use type.",
            "nullable": true,
            "readOnly": true
          },
          "IdentityRecordId": {
            "type": "integer",
            "description": "Internal identity record Id.",
            "format": "int32"
          },
          "IsPrimary": {
            "type": "boolean",
            "description": "Is primary contact information.",
            "nullable": true
          },
          "MonthEffectiveFrom": {
            "type": "integer",
            "description": "Starting month the contact information is valid for.",
            "format": "int32"
          },
          "MonthEffectiveTo": {
            "type": "integer",
            "description": "Ending month the contact information is valid for",
            "format": "int32"
          },
          "DayEffectiveFrom": {
            "type": "integer",
            "description": "Starting day of month the contact information is valid for.",
            "format": "int32"
          },
          "DayEffectiveTo": {
            "type": "integer",
            "description": "Ending day of month the contact information is valid for.",
            "format": "int32"
          },
          "IsActive": {
            "type": "boolean",
            "description": "True if the contact information is still used, else false (i.e. a previous valid record)."
          },
          "Note": {
            "type": "string",
            "format": "string",
            "nullable": true
          },
          "ContactMechanismPurposeTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactMechanismPurposeType"
            },
            "description": "A collection of contact purpose types (i.e. Default, Mailing, Shipping, Invoice, etc.)",
            "nullable": true
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Contact mechanism modified date.",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "description": "Contact mechanism modified by.",
            "nullable": true
          },
          "CreatedDate": {
            "type": "string",
            "description": "Contact mechanism creation date.",
            "format": "date-time",
            "nullable": true
          },
          "Number": {
            "type": "string",
            "description": "Telephone number",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PoolFactorApiModel": {
        "type": "object",
        "properties": {
          "PoolFactorId": {
            "type": "integer",
            "description": "Internal unique Id. Internal pool factory record Id.",
            "format": "int32"
          },
          "Factor": {
            "type": "number",
            "description": "Pool factor value.",
            "format": "double"
          },
          "PaymentDelay": {
            "type": "integer",
            "description": "Payment delay.",
            "format": "int32"
          },
          "DateEffectiveFrom": {
            "type": "string",
            "description": "Date effective from.",
            "format": "date-time",
            "nullable": true
          },
          "DateEffectiveTo": {
            "type": "string",
            "description": "Date effective to.",
            "format": "date-time",
            "nullable": true
          },
          "CreatedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostalAddressApiModel": {
        "type": "object",
        "properties": {
          "ContactMechanismId": {
            "type": "integer",
            "description": "Internal contact mechanism Id.",
            "format": "int32"
          },
          "ContactMechanismType": {
            "$ref": "#/components/schemas/ContactMechanismType"
          },
          "ContactMechanismTypeName": {
            "type": "string",
            "description": "Contact mechanism type name.",
            "nullable": true,
            "readOnly": true
          },
          "ContactMechanismUseType": {
            "$ref": "#/components/schemas/ContactMechanismUseType"
          },
          "ContactMechanismUseTypeName": {
            "type": "string",
            "description": "Contact mechanism use type.",
            "nullable": true,
            "readOnly": true
          },
          "IdentityRecordId": {
            "type": "integer",
            "description": "Internal identity record Id.",
            "format": "int32"
          },
          "IsPrimary": {
            "type": "boolean",
            "description": "Is primary contact information.",
            "nullable": true
          },
          "MonthEffectiveFrom": {
            "type": "integer",
            "description": "Starting month the contact information is valid for.",
            "format": "int32"
          },
          "MonthEffectiveTo": {
            "type": "integer",
            "description": "Ending month the contact information is valid for",
            "format": "int32"
          },
          "DayEffectiveFrom": {
            "type": "integer",
            "description": "Starting day of month the contact information is valid for.",
            "format": "int32"
          },
          "DayEffectiveTo": {
            "type": "integer",
            "description": "Ending day of month the contact information is valid for.",
            "format": "int32"
          },
          "IsActive": {
            "type": "boolean",
            "description": "True if the contact information is still used, else false (i.e. a previous valid record)."
          },
          "Note": {
            "type": "string",
            "format": "string",
            "nullable": true
          },
          "ContactMechanismPurposeTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactMechanismPurposeType"
            },
            "description": "A collection of contact purpose types (i.e. Default, Mailing, Shipping, Invoice, etc.)",
            "nullable": true
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Contact mechanism modified date.",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "description": "Contact mechanism modified by.",
            "nullable": true
          },
          "CreatedDate": {
            "type": "string",
            "description": "Contact mechanism creation date.",
            "format": "date-time",
            "nullable": true
          },
          "Attention": {
            "type": "string",
            "description": "\"Attention To\" for mailing address.",
            "nullable": true
          },
          "Line1": {
            "type": "string",
            "description": "Mailing address line 1.",
            "nullable": true
          },
          "Line2": {
            "type": "string",
            "description": "Mailing address line 2.",
            "nullable": true
          },
          "Line3": {
            "type": "string",
            "description": "Mailing address line 3.",
            "nullable": true
          },
          "City": {
            "type": "string",
            "description": "Mailing address city.",
            "nullable": true
          },
          "PostalCode": {
            "type": "string",
            "description": "Mailing address postal code.",
            "nullable": true
          },
          "StateProvince": {
            "$ref": "#/components/schemas/StateProvince"
          },
          "StateProvinceName": {
            "type": "string",
            "description": "Mailing address state name.",
            "nullable": true,
            "readOnly": true
          },
          "Country": {
            "$ref": "#/components/schemas/Country"
          },
          "CountryName": {
            "type": "string",
            "description": "Mailing address country name.",
            "nullable": true,
            "readOnly": true
          },
          "SpecialInstructions": {
            "type": "string",
            "description": "Mailing address special instructions.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PriceHistoryApiModel": {
        "type": "object",
        "properties": {
          "PriceHistoryId": {
            "type": "integer",
            "description": "Internal unique Id. Internal price history record Id.",
            "format": "int32"
          },
          "Price": {
            "type": "number",
            "description": "Price.",
            "format": "double"
          },
          "Volume": {
            "type": "integer",
            "description": "Volume.",
            "format": "int32",
            "nullable": true
          },
          "AskPrice": {
            "type": "number",
            "description": "Ask price.",
            "format": "double",
            "nullable": true
          },
          "BidPrice": {
            "type": "number",
            "description": "Bid price.",
            "format": "double",
            "nullable": true
          },
          "PricingSourceId": {
            "type": "integer",
            "description": "Pricing source.",
            "format": "int32"
          },
          "DateEffectiveFrom": {
            "type": "string",
            "description": "Date effective from.",
            "format": "date-time",
            "nullable": true
          },
          "DateEffectiveTo": {
            "type": "string",
            "description": "Date effective to.",
            "format": "date-time",
            "nullable": true
          },
          "CreatedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PriorityType": {
        "enum": [
          "Urgent",
          "Normal",
          "Low"
        ],
        "type": "string"
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "ProcessingExceptionType": {
        "enum": [
          "InsufficientFundsAvailable",
          "InsufficientUnitsAvailable",
          "InsufficientUnitsAvailableDueToRegLoc",
          "AccountPendingClosed",
          "AccountClosed",
          "AccountFrozen",
          "AccountNotOpened",
          "AccountPurchaseRestriction",
          "AccountSalesRestriction",
          "AccountHoldingPurchaseRestriction",
          "AccountHoldingSalesRestriction",
          "MutualFundPurchaseRestriction",
          "MutualFundSalesRestriction",
          "FundClosed",
          "FundClosedToNewMoney",
          "AssetFrozen",
          "AssetClosed",
          "TransactionCannotBePostedTwice",
          "SettleDateRequired",
          "SettleDateInFuture",
          "InsufficientFundsInPrincipalCash",
          "InsufficientFundsInIncomeCash",
          "RegistrationAndLocationRequired",
          "RegistrationRequired",
          "LocationRequired",
          "RegistrationAndLocationDoNotMatch",
          "LotRequired",
          "SettleDateBeforeAccountEstablished",
          "ShortTermRedemptionFeeCharge",
          "PossibleWashCondition",
          "OriginalCostBasisCannotBeZero",
          "AssetAndAccountFormACollectiveFund"
        ],
        "type": "string"
      },
      "PropertyApiModel": {
        "type": "object",
        "properties": {
          "IncomePaymentFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "IncomePaymentFrequencyTypeName": {
            "type": "string",
            "description": "Income payment frequency type name.",
            "nullable": true,
            "readOnly": true
          },
          "IncomePaymentMonth": {
            "type": "integer",
            "description": "Income payment month.",
            "format": "int32",
            "nullable": true
          },
          "IncomePaymentDay": {
            "type": "integer",
            "description": "Income payment day.",
            "format": "int32",
            "nullable": true
          },
          "RealEstateParcelNumber": {
            "type": "string",
            "description": "Real estate parcel number.",
            "nullable": true
          },
          "InsurancePolicyNumber": {
            "type": "string",
            "description": "Insurance policy number.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProxyInvestmentPowerType": {
        "enum": [
          "FullOBO",
          "FullNOBO",
          "SharedOBO",
          "SharedNOBO",
          "NoneOBO",
          "NoneNOBO"
        ],
        "type": "string"
      },
      "QualityRatingApiModel": {
        "type": "object",
        "properties": {
          "QualityRatingHistoryId": {
            "type": "integer",
            "description": "Internal unique Id. Internal quality rating history record Id.",
            "format": "int32"
          },
          "QualityRatingSourceId": {
            "type": "integer",
            "description": "Quality rating source Id.",
            "format": "int32"
          },
          "QualityRating": {
            "type": "string",
            "description": "Quality rating.",
            "nullable": true
          },
          "DateEffectiveFrom": {
            "type": "string",
            "description": "Date effective from.",
            "format": "date-time",
            "nullable": true
          },
          "DateEffectiveTo": {
            "type": "string",
            "description": "Date effective to.",
            "format": "date-time",
            "nullable": true
          },
          "CreatedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RCTCategoryType": {
        "enum": [
          "PersonalTrustAgencyAccounts",
          "NotOnReport",
          "MutualFund",
          "InvestmentManagementAccounts",
          "EmployeeBenefitDefinedContrib",
          "EmployeeBenefitDefinedBenefit",
          "OtherRetirementAccounts",
          "CorporateTrustAgencyAccounts",
          "CustodySafekeepingAccounts",
          "ForeignAccounts",
          "OtherFiduciaryAccounts",
          "IndividualRetirementAccounts",
          "FoundationEndowmentTrusts"
        ],
        "type": "string"
      },
      "RecipientBankInformationApiModel": {
        "type": "object",
        "properties": {
          "RecipientBankInformationId": {
            "type": "integer",
            "description": "Internal RecipientBankInformation Id.",
            "format": "int32"
          },
          "IdentityRecordId": {
            "type": "integer",
            "description": "The IdentityRecordId of the Name and Address record.",
            "format": "int32"
          },
          "DepositoryIdentityRecordId": {
            "type": "integer",
            "description": "The IdentityRecordId of the Depository",
            "format": "int32"
          },
          "RecipientAccountName": {
            "type": "string",
            "description": "The Bank Account Name",
            "nullable": true
          },
          "RecipientAccountNumber": {
            "type": "string",
            "description": "The Bacnk Account Number",
            "nullable": true
          },
          "IsSavings": {
            "type": "boolean",
            "description": "Is the account a savings account?"
          },
          "IsActive": {
            "type": "boolean",
            "description": "Is the record still active?"
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Identity record modified date.",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "description": "Identity record modified by.",
            "nullable": true
          },
          "CreatedDate": {
            "type": "string",
            "description": "Identity record creation date.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReinvestOptionType": {
        "enum": [
          "SystemDefault",
          "Auto",
          "CashPurchaseFromIncome",
          "CashPurchaseFromPrincipal",
          "CashPurchaseWithTransfer",
          "CannotReinvest"
        ],
        "type": "string"
      },
      "ReportType": {
        "enum": [
          "Institution",
          "Account",
          "Asset",
          "NameAndAddress",
          "CheckPrinting",
          "CustomerStatement",
          "AccountGroup",
          "CollectiveFund"
        ],
        "type": "string"
      },
      "RetirementAccountCategory": {
        "enum": [
          "EmployeeBenefitPlan",
          "SEP",
          "SARSEP",
          "TraditionalIRA",
          "SimpleIRA",
          "RothIRA",
          "CoverdellESA",
          "HealthSavingsAccount",
          "ArcherMSA",
          "MSA",
          "DesignatedRoth",
          "EBPlanInheritedIRA",
          "InheritedIRA"
        ],
        "type": "string"
      },
      "SalutationType": {
        "enum": [
          "Mr",
          "Ms",
          "Mrs",
          "Miss",
          "Dr"
        ],
        "type": "string"
      },
      "SaveAccountAlertResponseApiModel": {
        "type": "object",
        "properties": {
          "AlertId": {
            "type": "integer",
            "format": "int32"
          },
          "AlertTypeId": {
            "$ref": "#/components/schemas/AlertType"
          },
          "RelatedId": {
            "type": "integer",
            "description": "Related Alert ID.",
            "format": "int32",
            "nullable": true
          },
          "UserGuid": {
            "type": "string",
            "description": "User Guid.",
            "format": "uuid"
          },
          "UserName": {
            "type": "string",
            "description": "User Name.",
            "nullable": true
          },
          "IdentityRecordId": {
            "type": "integer",
            "description": "User Identity Record ID.",
            "format": "int32",
            "nullable": true
          },
          "Subject": {
            "type": "string",
            "description": "Alert Subject.",
            "nullable": true
          },
          "Message": {
            "type": "string",
            "description": "Alert Message.",
            "nullable": true
          },
          "IsSent": {
            "type": "boolean",
            "description": "Alert IsSent Flag."
          },
          "IsRead": {
            "type": "boolean",
            "description": "Alert IsRead Flag."
          }
        },
        "additionalProperties": false
      },
      "SaveAccountApiRequest": {
        "required": [
          "AccountCategoryId",
          "Country",
          "DateEstablished",
          "DateOpened",
          "DisplayName",
          "DivisionIdentityRecordId",
          "LegalName",
          "TaxIdStatusType"
        ],
        "type": "object",
        "properties": {
          "AccountId": {
            "type": "integer",
            "description": "Internal unique Cheetah Id. If not zero will attempt to update\r\nthe account for the given Id. To obtain an Id use the /vX/Lookup service with the parameter GetAccountValues or GetAccountsForInstitutionValues.",
            "format": "int32"
          },
          "FailOnRelationshipLookup": {
            "type": "boolean",
            "description": "If Beneficial Owner or Officer lookup fails, then if true\r\nthe account will not be created, if false the account will\r\nbe created without the relationship."
          },
          "Number": {
            "type": "string",
            "description": "If Cheetah is configured to auto increment the account number,\r\nthis field will be ignored.",
            "nullable": true
          },
          "Code": {
            "type": "string",
            "description": "The Account code.",
            "nullable": true
          },
          "LegalName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Legal name of account."
          },
          "DisplayName": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "Preferred display name of account."
          },
          "DivisionIdentityRecordId": {
            "type": "integer",
            "description": "The division identity record Id the account belongs. To obtain an Id use the /vX/Lookup service with the parameter GetUserDivisionValues or GetUserDivisionsForInstitutionValues.",
            "format": "int32"
          },
          "AccountCategoryId": {
            "type": "integer",
            "description": "The account category Id. To obtain an Id use the /vX/Lookup service with the parameter GetAccountCategoryValues.",
            "format": "int32"
          },
          "DateOpened": {
            "type": "string",
            "description": "The date that the institution took control of the account.",
            "format": "date-time"
          },
          "DateEstablished": {
            "type": "string",
            "description": "The date in which the Trust was legally established.",
            "format": "date-time"
          },
          "Country": {
            "$ref": "#/components/schemas/Country"
          },
          "StateProvince": {
            "$ref": "#/components/schemas/StateProvince"
          },
          "TaxIdStatusType": {
            "$ref": "#/components/schemas/TaxIdStatusType"
          },
          "TaxId": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string",
            "description": "The TaxID or SSN.",
            "nullable": true
          },
          "TaxIdType": {
            "$ref": "#/components/schemas/TaxIdType"
          },
          "Comments": {
            "type": "string",
            "description": "User entered comments.",
            "nullable": true
          },
          "OfficerId": {
            "type": "integer",
            "description": "The officer Id assigned to the account. To obtain an Id use the /vX/Lookup service with the parameter GetAllOfficerValues or GetAllOfficersForInstitutionValues.",
            "format": "int32",
            "nullable": true
          },
          "BeneficialOwnerTaxId": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string",
            "description": "Used to search for an existing beneficial owner.",
            "nullable": true
          },
          "AccountRelationship": {
            "$ref": "#/components/schemas/AddAccountRelationshipApiRequest"
          },
          "AccountSettings": {
            "$ref": "#/components/schemas/SaveAccountSettingsApiRequest"
          },
          "FeeSetting": {
            "$ref": "#/components/schemas/SaveFeeSettingApiRequest"
          },
          "InvestmentModelSettings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SaveInvestmentModelSettingApiRequest"
            },
            "description": "Collection of investment models.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SaveAccountRelationshipApiRequest": {
        "required": [
          "AccountId",
          "AccountRelationshipTypeId"
        ],
        "type": "object",
        "properties": {
          "AccountId": {
            "type": "integer",
            "description": "The account Id to associate the relationship. To obtain an Id use the /vX/Lookup service with the parameter GetAccountValues or GetAccountsForInstitutionValues.",
            "format": "int32"
          },
          "AccountRelationshipId": {
            "type": "integer",
            "description": "Internal unique Cheetah Id. If not zero will attempt to update the account relationship for the given Id.",
            "format": "int32"
          },
          "IdentityRecordId": {
            "type": "integer",
            "format": "int32"
          },
          "AccountRelationshipTypeId": {
            "type": "integer",
            "description": "Account realtionship type.",
            "format": "int32"
          },
          "OwnershipPercent": {
            "maximum": 1,
            "minimum": 0,
            "type": "number",
            "description": "Owner percentage.",
            "format": "double",
            "nullable": true
          },
          "TrusteePercent": {
            "maximum": 1,
            "minimum": 0,
            "type": "number",
            "description": "Trustee percentage.",
            "format": "double",
            "nullable": true
          },
          "IsProxyRecipient": {
            "type": "boolean",
            "description": "Relationship is a proxy recipient.",
            "nullable": true
          },
          "DoesReceiveApprovalLetter": {
            "type": "boolean",
            "description": "Relationship does receive approval letters.",
            "nullable": true
          },
          "DoesReceiveTradeNotification": {
            "type": "boolean",
            "description": "Relationship does receive trade notifications.",
            "nullable": true
          },
          "DoesUseAccunet": {
            "type": "boolean",
            "description": "Relationship does use Accunet.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SaveAccountRelationshipResponseApiModel": {
        "type": "object",
        "properties": {
          "Link": {
            "type": "string",
            "description": "Link to GET the resource.",
            "nullable": true
          },
          "AccountRelationshipId": {
            "type": "integer",
            "description": "Internal unique account relationship Id.",
            "format": "int32"
          },
          "AccountId": {
            "type": "integer",
            "description": "Internal unique account Id.",
            "format": "int32"
          },
          "AccountNumber": {
            "type": "string",
            "description": "Account Number.",
            "nullable": true
          },
          "IdentityRecordId": {
            "type": "integer",
            "description": "Internal unique identity record Id.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SaveAccountResponseApiModel": {
        "type": "object",
        "properties": {
          "Link": {
            "type": "string",
            "description": "Link to GET the resource.",
            "nullable": true
          },
          "AccountId": {
            "type": "integer",
            "description": "Internal unique account Id.",
            "format": "int32"
          },
          "AccountNumber": {
            "type": "string",
            "description": "Account number.",
            "nullable": true
          },
          "AccountLegalName": {
            "type": "string",
            "description": "Account legal name.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SaveAccountSettingsApiRequest": {
        "required": [
          "CashAutoTransferType",
          "ComptrollerType",
          "DateTaxYearEnd",
          "IncomeReserveAmount",
          "IsInternalReportRecipient",
          "IsMutualFundPurchaseRestricted",
          "IsMutualFundSalesRestricted",
          "IsNetCashOverdraft",
          "IsOverdraftAllowed",
          "IsPrincipalOnly",
          "IsPurchaseRestricted",
          "IsSalesRestricted",
          "PrincipalReserveAmount",
          "ShowExtraordinaryFeeSummary",
          "SweepIncomeReserveAmount",
          "SweepPrincipalReserveAmount"
        ],
        "type": "object",
        "properties": {
          "AccountId": {
            "type": "integer",
            "description": "Account Id related to the settings. To obtain an Id use the /vX/Lookup service with the parameter GetAccountValues or GetAccountsForInstitutionValues.",
            "format": "int32"
          },
          "InvestmentObjectiveId": {
            "type": "integer",
            "description": "The investment objective Id. To obtain an Id use the /vX/Lookup service with the parameter GetInvestmentObjectiveValues.",
            "format": "int32",
            "nullable": true
          },
          "InvestmentReviewFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "InvestmentReviewFrequencyMonthOffset": {
            "maximum": 12,
            "minimum": 1,
            "type": "integer",
            "description": "Investment review frequency month offset. Must be a number 1 (January) thru 12 (December).",
            "format": "int32",
            "nullable": true
          },
          "AdministrativeReviewFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "AdministrativeReviewFrequencyMonthOffset": {
            "maximum": 12,
            "minimum": 1,
            "type": "integer",
            "description": "Administrative review frequency month offset. Must be a number 1 (January) thru 12 (December).",
            "format": "int32",
            "nullable": true
          },
          "IsPurchaseRestricted": {
            "type": "boolean",
            "description": "Is purchase of assets restricted."
          },
          "IsSalesRestricted": {
            "type": "boolean",
            "description": "Is sales of assets restricted."
          },
          "DateOfRestrictionExpiration": {
            "type": "string",
            "description": "Date of restriction expiration.",
            "format": "date-time",
            "nullable": true
          },
          "IsMutualFundPurchaseRestricted": {
            "type": "boolean",
            "description": "Are mutual fund purchases restricted."
          },
          "IsMutualFundSalesRestricted": {
            "type": "boolean",
            "description": "Are mutual fund sales restricted."
          },
          "DateOfMutualFundRestrictionExpiration": {
            "type": "string",
            "description": "Date of mutual fund restriction expiration.",
            "format": "date-time",
            "nullable": true
          },
          "IsInternalReportRecipient": {
            "type": "boolean",
            "description": "Is internal report recipient."
          },
          "ShowExtraordinaryFeeSummary": {
            "type": "boolean",
            "description": "Show extraordinary fee summary."
          },
          "ReinvestOptionType": {
            "$ref": "#/components/schemas/ReinvestOptionType"
          },
          "SpecificPowers": {
            "maxLength": 2000,
            "minLength": 0,
            "type": "string",
            "description": "Specific powers.",
            "nullable": true
          },
          "DistributionOfPrincipal": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Distribution of principal.",
            "nullable": true
          },
          "IsPrincipalOnly": {
            "type": "boolean",
            "description": "Is principal only."
          },
          "CapacityCategoryId": {
            "type": "integer",
            "description": "Capacity category.",
            "format": "int32",
            "nullable": true
          },
          "InvestmentPowerTypeId": {
            "type": "integer",
            "description": "The investment power type Id. To obtain an Id use the /vX/Lookup service with the parameter GetInvestmentPowerTypeValues.",
            "format": "int32",
            "nullable": true
          },
          "ProxyInvestmentPowerType": {
            "$ref": "#/components/schemas/ProxyInvestmentPowerType"
          },
          "LongTermLossCarryForwardAmount": {
            "type": "number",
            "description": "Long term loss carry forward amount.",
            "format": "double",
            "nullable": true
          },
          "ShortTermLossCarryForwardAmount": {
            "type": "number",
            "description": "Short term loss carry forward amount",
            "format": "double",
            "nullable": true
          },
          "DateCarryForward": {
            "type": "string",
            "description": "Date carry forward.",
            "format": "date-time",
            "nullable": true
          },
          "TaxationType": {
            "$ref": "#/components/schemas/TaxationType"
          },
          "DateTaxYearEnd": {
            "type": "string",
            "description": "Date tax year end.",
            "format": "date-time"
          },
          "CapitalGainRatePercent": {
            "maximum": 1,
            "minimum": 0,
            "type": "number",
            "description": "Capital gain rate percent. Must be a value between 0.0 and 1.0.",
            "format": "double",
            "nullable": true
          },
          "TaxInterfaceType": {
            "$ref": "#/components/schemas/TaxInterfaceType"
          },
          "Tax1099LevelType": {
            "$ref": "#/components/schemas/Tax1099LevelType"
          },
          "IsOverdraftAllowed": {
            "type": "boolean",
            "description": "Is overdraft allowed."
          },
          "IsNetCashOverdraft": {
            "type": "boolean",
            "description": "Is net cash overdraft."
          },
          "SweepSetupId": {
            "type": "integer",
            "description": "The sweep setup Id. To obtain an Id use the /vX/Lookup service with the parameter GetSweepSetupValues.",
            "format": "int32",
            "nullable": true
          },
          "CashAutoTransferType": {
            "$ref": "#/components/schemas/AutoTransferType"
          },
          "PrincipalReserveAmount": {
            "type": "number",
            "description": "Principal reserve amount.",
            "format": "double"
          },
          "IncomeReserveAmount": {
            "type": "number",
            "description": "Income reserve amount.",
            "format": "double"
          },
          "SweepPrincipalReserveAmount": {
            "type": "number",
            "description": "Sweep principal reserve amount.",
            "format": "double"
          },
          "SweepIncomeReserveAmount": {
            "type": "number",
            "description": "Sweep income reserve amount.",
            "format": "double"
          },
          "TaxLotHarvestingType": {
            "$ref": "#/components/schemas/TaxLotHarvestingType"
          },
          "AmortizationType": {
            "$ref": "#/components/schemas/AmortizationType"
          },
          "ComptrollerType": {
            "$ref": "#/components/schemas/ComptrollerType"
          },
          "CashDescription": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "Cash description.",
            "nullable": true
          },
          "PerformanceIndexSettingId": {
            "type": "integer",
            "description": "The performance index setting Id. To obtain an Id use the /vX/Lookup service with the parameter GetPerformanceIndexValues.",
            "format": "int32",
            "nullable": true
          },
          "PerformanceExclusions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SavePerformanceExclusionApiRequest"
            },
            "description": "A collection of performance exclusions for the account.",
            "nullable": true
          },
          "LegacyPriorYearEndMarketValue": {
            "type": "number",
            "description": "Legacy prior year end market value.",
            "format": "double",
            "nullable": true
          },
          "LegacyYtdContributions": {
            "type": "number",
            "description": "Legacy year to date contributions.",
            "format": "double",
            "nullable": true
          },
          "LegacyYtdDistributions": {
            "type": "number",
            "description": "Legacy year to date distributions.",
            "format": "double",
            "nullable": true
          },
          "Tax1099RecipientType": {
            "$ref": "#/components/schemas/Tax1099RecipientType"
          }
        },
        "additionalProperties": false
      },
      "SaveAccountStatusResponseApiModel": {
        "type": "object",
        "properties": {
          "Title": {
            "type": "string",
            "description": "Title of the response to the status api call.",
            "nullable": true
          },
          "Status": {
            "type": "integer",
            "description": "Http return status",
            "format": "int32"
          },
          "Errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountStatusErrorType"
            },
            "description": "Error or list of errors retuned by status api call.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SaveActivityApiRequest": {
        "required": [
          "ActivityCategoryId",
          "ActivityName",
          "DateOfActivity",
          "PerformedByUserGuid"
        ],
        "type": "object",
        "properties": {
          "ActivityId": {
            "type": "integer",
            "description": "Internal unique activity Id. If not zero will attempt to update the activity for the given Id.",
            "format": "int32"
          },
          "ActivityName": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Activity name."
          },
          "ActivityCategoryId": {
            "type": "integer",
            "description": "Activity category Id. To obtain an Id use the /vX/Lookup service with the parameter GetActivityCategoryValues.",
            "format": "int32"
          },
          "ActivityDescription": {
            "type": "string",
            "description": "Activity description.",
            "nullable": true
          },
          "Outcome": {
            "type": "string",
            "description": "Outcome.",
            "nullable": true
          },
          "DateOfActivity": {
            "type": "string",
            "description": "Date of activity.",
            "format": "date-time"
          },
          "TimeTakenMinutes": {
            "type": "integer",
            "description": "Time taken in minutes.",
            "format": "int32",
            "nullable": true
          },
          "AccountId": {
            "type": "integer",
            "description": "Account Id. To obtain an Id use the /vX/Lookup service with the parameter GetAccountValues or GetAccountsForInstitutionValues.",
            "format": "int32",
            "nullable": true
          },
          "AssetId": {
            "type": "integer",
            "description": "Asset Id. To obtain an Id use the /vX/Lookup service with the parameter GetAssetValues or GetAssetsForInstitutionValues.",
            "format": "int32",
            "nullable": true
          },
          "IdentityRecordId": {
            "type": "integer",
            "description": "Identity record Id. To obtain an Id use the /vX/Lookup service with the parameter GetIdentityRecordValues.",
            "format": "int32",
            "nullable": true
          },
          "PerformedByUserGuid": {
            "type": "string",
            "description": "Activity performed by user Guid.To obtain an Id use the /vX/Lookup service with the parameter GetActiveUserValues.",
            "format": "uuid"
          },
          "InstitutionIdentityRecordId": {
            "type": "integer",
            "description": "Used to restrict queries to specific Institutions. If not supplied, the query will be restricted\r\nto Institutions assigned to the user.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SaveActivityResponseApiModel": {
        "type": "object",
        "properties": {
          "Link": {
            "type": "string",
            "description": "Link to GET the resource.",
            "nullable": true
          },
          "ActivityId": {
            "type": "integer",
            "description": "Internal unique activity record Id.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Activity name.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SaveApprovalActivityResponseApiModel": {
        "type": "object",
        "properties": {
          "ApprovalActivityId": {
            "type": "integer",
            "description": "Internal unique approval activity record Id.",
            "format": "int32"
          },
          "ApprovalConfigurationId": {
            "type": "integer",
            "description": "Internal unique approval configuration Id.",
            "format": "int32"
          },
          "ApprovalTypeId": {
            "type": "integer",
            "description": "Internal unique approval type Id.",
            "format": "int32"
          },
          "ApprovalType": {
            "$ref": "#/components/schemas/ApprovalType"
          },
          "ApprovalTypeName": {
            "type": "string",
            "description": "Internal unique approval type name.",
            "nullable": true,
            "readOnly": true
          },
          "RequiredApprovalLevelId": {
            "type": "integer",
            "description": "Internal unique required approval level Id.",
            "format": "int32"
          },
          "RequiredApprovalLevelName": {
            "type": "string",
            "description": "Internal unique required approval level name.",
            "nullable": true
          },
          "ApprovalActionTypeId": {
            "type": "integer",
            "description": "Internal unique approval action type id.",
            "format": "int32"
          },
          "ApprovalActionType": {
            "$ref": "#/components/schemas/ApprovalActionType"
          },
          "ApprovalActionTypeName": {
            "type": "string",
            "description": "Internal unique approval action type name.",
            "nullable": true,
            "readOnly": true
          },
          "RelatedId": {
            "type": "integer",
            "description": "Internal Related Id.",
            "format": "int32"
          },
          "InstitutionIdentityRecordId": {
            "type": "integer",
            "description": "Internal institution identity record Id. To obtain an Id use the /vX/Lookup service with the parameter GetInstitutionIdentityRecordValues.",
            "format": "int32"
          },
          "InstitutionName": {
            "type": "string",
            "description": "Institution name.",
            "nullable": true
          },
          "AccountId": {
            "type": "integer",
            "description": "Internal unique account Id.",
            "format": "int32",
            "nullable": true
          },
          "AccountNumber": {
            "type": "string",
            "description": "Internal unique account number.",
            "nullable": true
          },
          "AccountName": {
            "type": "string",
            "description": "Internal unique account name.",
            "nullable": true
          },
          "AssetId": {
            "type": "integer",
            "description": "Internal unique asset Id.",
            "format": "int32",
            "nullable": true
          },
          "AssetName": {
            "type": "string",
            "description": "Asset name.",
            "nullable": true
          },
          "ApprovalAmount": {
            "type": "number",
            "description": "Approval amount.",
            "format": "double"
          },
          "IsAutoApproved": {
            "type": "boolean",
            "description": "Is auto approved."
          },
          "Comment": {
            "type": "string",
            "description": "Comment.",
            "nullable": true
          },
          "RequiresSecondaryApproval": {
            "type": "boolean",
            "description": "Requires secondary approval."
          },
          "SecondaryApprovalLevelId": {
            "type": "integer",
            "description": "Internal unique secondary approval level Id.",
            "format": "int32",
            "nullable": true
          },
          "SecondaryApprovalLevelName": {
            "type": "string",
            "description": "Internal unique secondary approval level name.",
            "nullable": true
          },
          "OriginatingUserCannotApprove": {
            "type": "boolean",
            "description": "Originating User cannot approve."
          },
          "UserGuid": {
            "type": "string",
            "description": "GUID of the Cheetah User.",
            "format": "uuid",
            "nullable": true
          },
          "CreatedDate": {
            "type": "string",
            "description": "Approval activity created date and time.",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Approval activity modified date and time.",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "description": "Approval activity modified by.",
            "nullable": true
          },
          "Errors": {
            "type": "string",
            "description": "Used to indicate processing errors.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SaveAssetApiRequest": {
        "required": [
          "AssetCode",
          "AssetCodeType",
          "IssueStatusType",
          "PortfolioReportCategoryId",
          "TradeWhenInstitutionOpen",
          "UpdateFromInterface"
        ],
        "type": "object",
        "properties": {
          "AssetId": {
            "type": "integer",
            "description": "Internal unique Id. If not zero will attempt to update for the given Id.",
            "format": "int32"
          },
          "AssetCode": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "Asset code."
          },
          "AssetCodeType": {
            "$ref": "#/components/schemas/AssetCodeType"
          },
          "PortfolioReportCategoryId": {
            "type": "integer",
            "description": "Portfolio report category.",
            "format": "int32"
          },
          "Symbol": {
            "maxLength": 22,
            "minLength": 0,
            "type": "string",
            "description": "Asset symbol.",
            "nullable": true
          },
          "Issue": {
            "maxLength": 150,
            "minLength": 0,
            "type": "string",
            "description": "Asset issue.",
            "nullable": true
          },
          "Issuer": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Asset issuer.",
            "nullable": true
          },
          "IssueStatusType": {
            "$ref": "#/components/schemas/IssueStatusType"
          },
          "StateProvince": {
            "$ref": "#/components/schemas/StateProvince"
          },
          "Country": {
            "$ref": "#/components/schemas/Country"
          },
          "TradeWhenInstitutionOpen": {
            "type": "boolean",
            "description": "Trade when institution open flag"
          },
          "UpdateFromInterface": {
            "type": "boolean",
            "description": "Update from interface."
          },
          "IraHardToValueType": {
            "$ref": "#/components/schemas/IRAHardToValueType"
          },
          "IsActive": {
            "type": "boolean",
            "description": "Is active."
          },
          "Stock": {
            "$ref": "#/components/schemas/SaveStockApiRequest"
          },
          "Bond": {
            "$ref": "#/components/schemas/SaveBondApiRequest"
          },
          "CashEquivalent": {
            "$ref": "#/components/schemas/SaveCashEquivalentApiRequest"
          },
          "CertificateOfDeposit": {
            "$ref": "#/components/schemas/SaveCertificateOfDepositApiRequest"
          },
          "MutualFund": {
            "$ref": "#/components/schemas/SaveMutualFundApiRequest"
          },
          "OtherAsset": {
            "$ref": "#/components/schemas/SaveOtherAssetApiRequest"
          },
          "Option": {
            "$ref": "#/components/schemas/SaveOptionApiRequest"
          },
          "Property": {
            "$ref": "#/components/schemas/SavePropertyApiRequest"
          },
          "Loan": {
            "$ref": "#/components/schemas/SaveLoanApiRequest"
          },
          "DailyFactor": {
            "$ref": "#/components/schemas/SaveDailyFactorApiRequest"
          },
          "DividendEvent": {
            "$ref": "#/components/schemas/SaveDividendEventApiRequest"
          },
          "InterestRate": {
            "$ref": "#/components/schemas/SaveInterestRateApiRequest"
          },
          "PoolFactor": {
            "$ref": "#/components/schemas/SavePoolFactorApiRequest"
          },
          "PriceHistory": {
            "$ref": "#/components/schemas/SavePriceApiRequest"
          },
          "QualityRatingHistory": {
            "$ref": "#/components/schemas/SaveQualityRatingApiRequest"
          },
          "AssetInstitutionSettings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SaveAssetInstitutionSettingApiRequest"
            },
            "description": "Array of asset institution settings. When adding a new asset, at least one asset institution setting is required.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Save asset request model."
      },
      "SaveAssetInstitutionSettingApiRequest": {
        "required": [
          "InstitutionIdentityRecordId"
        ],
        "type": "object",
        "properties": {
          "AssetInstitutionSettingsId": {
            "type": "integer",
            "description": "Asset Institution Settings Id.",
            "format": "int32"
          },
          "AssetId": {
            "type": "integer",
            "description": "Asset Id",
            "format": "int32"
          },
          "InstitutionIdentityRecordId": {
            "type": "integer",
            "description": "Institution identity record Id.",
            "format": "int32"
          },
          "OverridePortfolioReportCategoryId": {
            "type": "integer",
            "description": "Override portfolio category.",
            "format": "int32",
            "nullable": true
          },
          "OverrideIndustryId": {
            "type": "integer",
            "description": "Override industry.",
            "format": "int32",
            "nullable": true
          },
          "MarketCapType": {
            "$ref": "#/components/schemas/MarketCapType"
          },
          "UnitDecimal": {
            "type": "number",
            "description": "Allowed significant digits for this asset and institution.",
            "format": "double"
          },
          "ApprovedListRuleType": {
            "$ref": "#/components/schemas/ApprovedListRuleType"
          },
          "IncomeTransactionCategoryId": {
            "type": "integer",
            "description": "Income transaction category.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SaveAssetResponseApiModel": {
        "type": "object",
        "properties": {
          "Link": {
            "type": "string",
            "description": "Link to GET the resource.",
            "nullable": true
          },
          "AssetId": {
            "type": "integer",
            "description": "Internal unique Id. Internal asset record Id.",
            "format": "int32"
          },
          "AssetCode": {
            "type": "string",
            "description": "Asset CUSIP.",
            "nullable": true
          },
          "Symbol": {
            "type": "string",
            "description": "Asset symbol.",
            "nullable": true
          },
          "Issue": {
            "type": "string",
            "description": "Asset issue.",
            "nullable": true
          },
          "Issuer": {
            "type": "string",
            "description": "Asset issuer.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SaveBondApiRequest": {
        "required": [
          "OddLastCouponType"
        ],
        "type": "object",
        "properties": {
          "IndustryId": {
            "type": "integer",
            "description": "Industry type.",
            "format": "int32",
            "nullable": true
          },
          "DateOfIssue": {
            "type": "string",
            "description": "Date of issue.",
            "format": "date-time",
            "nullable": true
          },
          "DateOfMaturity": {
            "type": "string",
            "description": "Date of maturity.",
            "format": "date-time",
            "nullable": true
          },
          "IncomePaymentFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "IncomePaymentMonth": {
            "type": "integer",
            "description": "Income payment month.",
            "format": "int32",
            "nullable": true
          },
          "IncomePaymentDay": {
            "type": "integer",
            "description": "Income payment day.",
            "format": "int32",
            "nullable": true
          },
          "AmortizationFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "AccrualMethodType": {
            "$ref": "#/components/schemas/AccrualMethodType"
          },
          "CallDate": {
            "type": "string",
            "description": "Call date.",
            "format": "date-time",
            "nullable": true
          },
          "CallPrice": {
            "type": "number",
            "description": "Call price.",
            "format": "double",
            "nullable": true
          },
          "CallType": {
            "$ref": "#/components/schemas/CallType"
          },
          "DateOfFirstPayment": {
            "type": "string",
            "description": "Date of first payment.",
            "format": "date-time",
            "nullable": true
          },
          "OIDPrice": {
            "type": "number",
            "description": "OID price.",
            "format": "double",
            "nullable": true
          },
          "Insurer": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Insurer",
            "nullable": true
          },
          "InsurerRating": {
            "maxLength": 5,
            "minLength": 0,
            "type": "string",
            "description": "Insurer rating.",
            "nullable": true
          },
          "OddLastCouponType": {
            "$ref": "#/components/schemas/OddLastCouponType"
          }
        },
        "additionalProperties": false
      },
      "SaveCashEquivalentApiRequest": {
        "type": "object",
        "properties": {
          "QualityRating": {
            "maxLength": 5,
            "minLength": 0,
            "type": "string",
            "description": "Quality rating.",
            "nullable": true
          },
          "DateOfIssue": {
            "type": "string",
            "description": "Date of issue.",
            "format": "date-time",
            "nullable": true
          },
          "IncomePaymentFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "IncomePaymentMonth": {
            "type": "integer",
            "description": "Income payment month.",
            "format": "int32",
            "nullable": true
          },
          "IncomePaymentDay": {
            "type": "integer",
            "description": "Income payment day.",
            "format": "int32",
            "nullable": true
          },
          "AmortizationFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "AccrualMethodType": {
            "$ref": "#/components/schemas/AccrualMethodType"
          },
          "CompoundFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "DepositoryIdentityRecordId": {
            "type": "integer",
            "description": "Depository",
            "format": "int32",
            "nullable": true
          },
          "StableNAV": {
            "type": "boolean",
            "description": "Stable NAV.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SaveCertificateOfDepositApiRequest": {
        "required": [
          "OddLastCouponType"
        ],
        "type": "object",
        "properties": {
          "DateOfIssue": {
            "type": "string",
            "description": "Date of issue.",
            "format": "date-time",
            "nullable": true
          },
          "DateOfMaturity": {
            "type": "string",
            "description": "Date of maturity.",
            "format": "date-time",
            "nullable": true
          },
          "IncomePaymentFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "IncomePaymentMonth": {
            "type": "integer",
            "description": "Income payment month.",
            "format": "int32",
            "nullable": true
          },
          "IncomePaymentDay": {
            "type": "integer",
            "description": "Income payment day.",
            "format": "int32",
            "nullable": true
          },
          "AmortizationFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "AccrualMethodType": {
            "$ref": "#/components/schemas/AccrualMethodType"
          },
          "CompoundFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "DateOfFirstPayment": {
            "type": "string",
            "description": "Date of first payment.",
            "format": "date-time",
            "nullable": true
          },
          "DepositoryIdentityRecordId": {
            "type": "integer",
            "description": "Depository",
            "format": "int32",
            "nullable": true
          },
          "OddLastCouponType": {
            "$ref": "#/components/schemas/OddLastCouponType"
          }
        },
        "additionalProperties": false
      },
      "SaveDailyFactorApiRequest": {
        "required": [
          "AssetId",
          "DateEffectiveFrom",
          "Factor"
        ],
        "type": "object",
        "properties": {
          "AssetId": {
            "type": "integer",
            "description": "Asset",
            "format": "int32"
          },
          "Factor": {
            "maximum": 1,
            "minimum": 0,
            "type": "number",
            "description": "Factor\r\nFactor Cannot be more than 1.0\"",
            "format": "double"
          },
          "DateEffectiveFrom": {
            "type": "string",
            "description": "Daily Factor date efffective from",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "SaveDepositoryApiRequest": {
        "required": [
          "DepositoryName",
          "DisplayName",
          "RoutingNumber"
        ],
        "type": "object",
        "properties": {
          "DisplayName": {
            "maxLength": 125,
            "minLength": 0,
            "type": "string"
          },
          "DepositoryName": {
            "maxLength": 125,
            "minLength": 0,
            "type": "string"
          },
          "RoutingNumber": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string"
          },
          "Address": {
            "$ref": "#/components/schemas/SavePostalAddressApiRequest"
          },
          "PhoneNumber": {
            "$ref": "#/components/schemas/SavePhoneNumberApiRequest"
          }
        },
        "additionalProperties": false
      },
      "SaveDepositoryResponseApiModel": {
        "type": "object",
        "properties": {
          "Link": {
            "type": "string",
            "description": "Link to GET the resource.",
            "nullable": true
          },
          "IdentityRecordId": {
            "type": "integer",
            "description": "The IdentityRecordId of the Depository",
            "format": "int32"
          },
          "DepositoryName": {
            "type": "string",
            "description": "The depository's name",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SaveDividendEventApiRequest": {
        "required": [
          "AssetId",
          "DateAnnounced",
          "DateExDividend",
          "DateOfPayment",
          "DateOfRecord",
          "DividendPaymentType",
          "IsActive"
        ],
        "type": "object",
        "properties": {
          "AssetId": {
            "type": "integer",
            "description": "Asset",
            "format": "int32"
          },
          "DividendPaymentType": {
            "$ref": "#/components/schemas/DividendPaymentType"
          },
          "DividendAmountPerShare": {
            "type": "number",
            "description": "Dividend Amount Per Share",
            "format": "double",
            "nullable": true
          },
          "DividendStockPerShare": {
            "type": "number",
            "description": "Dividend Stock Per Share",
            "format": "double",
            "nullable": true
          },
          "DividendSplitRatio": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Dividend Split Ratio",
            "nullable": true
          },
          "IndicatedAnnualDividendPerShare": {
            "type": "number",
            "description": "Indicated Annual Dividend Per Share",
            "format": "double",
            "nullable": true
          },
          "DateExDividend": {
            "type": "string",
            "description": "Date Ex Dividend",
            "format": "date-time"
          },
          "DateOfRecord": {
            "type": "string",
            "description": "Date Of Record",
            "format": "date-time"
          },
          "DateOfPayment": {
            "type": "string",
            "description": "Date Of Payment",
            "format": "date-time"
          },
          "DateAnnounced": {
            "type": "string",
            "description": "Date Announced",
            "format": "date-time"
          },
          "IsActive": {
            "type": "boolean",
            "description": "Is Active"
          },
          "EventCode": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Event Code",
            "nullable": true
          },
          "EventRevisionCode": {
            "maxLength": 25,
            "minLength": 0,
            "type": "string",
            "description": "Event Revision Code",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SaveEmailApiRequest": {
        "required": [
          "EmailAddress"
        ],
        "type": "object",
        "properties": {
          "IdentityRecordId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ContactMechanismId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ContactMechanismType": {
            "$ref": "#/components/schemas/ContactMechanismType"
          },
          "ContactMechanismUseType": {
            "$ref": "#/components/schemas/ContactMechanismUseType"
          },
          "IsPrimary": {
            "type": "boolean"
          },
          "MonthEffectiveFrom": {
            "type": "integer",
            "format": "int32"
          },
          "MonthEffectiveTo": {
            "type": "integer",
            "format": "int32"
          },
          "DayEffectiveFrom": {
            "type": "integer",
            "format": "int32"
          },
          "DayEffectiveTo": {
            "type": "integer",
            "format": "int32"
          },
          "IsActive": {
            "type": "boolean"
          },
          "Note": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "ContactMechanismPurposeTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactMechanismPurposeType"
            },
            "nullable": true
          },
          "InstitutionIdentityRecordId": {
            "type": "integer",
            "description": "Used to restrict queries to specific Institutions. If not supplied, the query will be restricted\r\nto Institutions assigned to the user.",
            "format": "int32",
            "nullable": true
          },
          "EmailAddress": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SaveFeeApiRequest": {
        "required": [
          "AccountId",
          "FeeStatusType",
          "FeeType"
        ],
        "type": "object",
        "properties": {
          "FeeId": {
            "type": "integer",
            "description": "Internal unique fee Id. If value is zero, will assume insert, else update.",
            "format": "int32"
          },
          "AccountId": {
            "type": "integer",
            "description": "Internal unique account Id.",
            "format": "int32"
          },
          "TransactionCategoryId": {
            "type": "integer",
            "description": "Internal unique transaction category Id.",
            "format": "int32",
            "nullable": true
          },
          "FeeType": {
            "$ref": "#/components/schemas/FeeType"
          },
          "FeeStatusType": {
            "$ref": "#/components/schemas/FeeStatusType"
          },
          "PrincipalCashAmount": {
            "type": "number",
            "description": "Principal cash amount.",
            "format": "double"
          },
          "IncomeCashAmount": {
            "type": "number",
            "description": "Income cash amount.",
            "format": "double"
          },
          "DateEffective": {
            "type": "string",
            "description": "Date effective.",
            "format": "date-time",
            "nullable": true
          },
          "DateCollected": {
            "type": "string",
            "description": "Date collected.",
            "format": "date-time",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "Fee description.",
            "nullable": true
          },
          "CreditIdentityRecordId": {
            "type": "integer",
            "description": "Credit identity record Id.",
            "format": "int32",
            "nullable": true
          },
          "DateVoided": {
            "type": "string",
            "description": "Date voided.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SaveFeeCreditToIdentityRecordApiRequest": {
        "required": [
          "FeeSettingScheduleId",
          "IdentityRecordId"
        ],
        "type": "object",
        "properties": {
          "FeeCreditToIdentityRecordId": {
            "type": "integer",
            "description": "Fee credit to identity record internal key.",
            "format": "int32",
            "nullable": true
          },
          "FeeSettingScheduleId": {
            "type": "integer",
            "description": "Internal unique fee setting schedule Id.",
            "format": "int32"
          },
          "IdentityRecordId": {
            "type": "integer",
            "description": "Internal unique identity record Id.",
            "format": "int32"
          },
          "Percentage": {
            "type": "number",
            "description": "Trustee percentage.",
            "format": "double"
          },
          "InstitutionIdentityRecordId": {
            "type": "integer",
            "description": "Used to restrict queries to specific Institutions. If not supplied, the query will be restricted\r\nto Institutions assigned to the user.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SaveFeePaidFromAccountApiRequest": {
        "required": [
          "AccountId",
          "FeeSettingId",
          "Percentage"
        ],
        "type": "object",
        "properties": {
          "FeePaidFromAccountId": {
            "type": "integer",
            "description": "Fee paid from account Id internal key.",
            "format": "int32",
            "nullable": true
          },
          "FeeCollectionType": {
            "$ref": "#/components/schemas/FeeCollectionType"
          },
          "FeeSettingId": {
            "type": "integer",
            "description": "Fee setting Id related to the settings.",
            "format": "int32"
          },
          "AccountId": {
            "type": "integer",
            "description": "Account Id related to the settings. To obtain an Id use the /vX/Lookup service with the parameter GetAccountValues or GetAccountsForInstitutionValues.",
            "format": "int32"
          },
          "Percentage": {
            "type": "number",
            "description": "Percentage",
            "format": "double"
          },
          "PaysOwnFee": {
            "type": "boolean",
            "description": "Pays own fee"
          },
          "PaidByOtherAccountId": {
            "type": "integer",
            "description": "Fee paid by other account Id.",
            "format": "int32",
            "nullable": true
          },
          "InstitutionIdentityRecordId": {
            "type": "integer",
            "description": "Used to restrict queries to specific Institutions. If not supplied, the query will be restricted\r\nto Institutions assigned to the user.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SaveFeePaidFromAccountResponseApiModel": {
        "type": "object",
        "properties": {
          "Link": {
            "type": "string",
            "description": "Link to GET the resource.",
            "nullable": true
          },
          "FeeSettingId": {
            "type": "integer",
            "description": "Internal unique Cheetah Id for fee setting.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SaveFeePaymentApiRequest": {
        "required": [
          "AccountId",
          "DateEffective",
          "FeeStatusType",
          "PaymentFeeCollectionType"
        ],
        "type": "object",
        "properties": {
          "FeeId": {
            "type": "integer",
            "description": "Internal unique fee Id. If value is zero, will assume insert, else update.",
            "format": "int32"
          },
          "AccountId": {
            "type": "integer",
            "description": "Internal unique account Id.",
            "format": "int32"
          },
          "FeeSettingId": {
            "type": "integer",
            "description": "Fee setting to apply payment to.",
            "format": "int32"
          },
          "FeeType": {
            "$ref": "#/components/schemas/FeeType"
          },
          "PaymentFeeCollectionType": {
            "$ref": "#/components/schemas/FeeCollectionType"
          },
          "FeeStatusType": {
            "$ref": "#/components/schemas/FeeStatusType"
          },
          "PrincipalCashAmount": {
            "type": "number",
            "description": "Principal cash amount.",
            "format": "double"
          },
          "IncomeCashAmount": {
            "type": "number",
            "description": "Income cash amount.",
            "format": "double"
          },
          "DateEffective": {
            "type": "string",
            "description": "Date effective is the date the fee was made effective.",
            "format": "date-time"
          },
          "DateCollected": {
            "type": "string",
            "description": "Date collected is the date the fee was paid.",
            "format": "date-time",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "Fee description.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SaveFeeResponseApiModel": {
        "type": "object",
        "properties": {
          "Link": {
            "type": "string",
            "description": "Link to GET the resource.",
            "nullable": true
          },
          "FeeId": {
            "type": "integer",
            "description": "Internal unique fee Id.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SaveFeeSettingApiRequest": {
        "required": [
          "InvoiceFrequencyType",
          "MinimumFeeFrequencyType",
          "MonthYearEnd"
        ],
        "type": "object",
        "properties": {
          "FeeSettingId": {
            "type": "integer",
            "description": "Internal unique Cheetah Id for Fee Setting. If not zero, will attempt to update the fee setting for the given Id.",
            "format": "int32"
          },
          "AccountId": {
            "type": "integer",
            "description": "Account Id related to the settings. To obtain an Id use the /vX/Lookup service with the parameter GetAccountValues or GetAccountsForInstitutionValues.",
            "format": "int32"
          },
          "Name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Fee setting name.",
            "nullable": true
          },
          "InvoiceFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "MinimumFeeFrequencyType": {
            "$ref": "#/components/schemas/MinimumFeeFrequencyType"
          },
          "MonthYearEnd": {
            "type": "integer",
            "description": "Month year end.",
            "format": "int32"
          },
          "AnnualMaximumFeeAmount": {
            "type": "number",
            "description": "Annual maximum fee amount.",
            "format": "double",
            "nullable": true
          },
          "AnnualMinimumFeeAmount": {
            "type": "number",
            "description": "Annual minimum fee amount.",
            "format": "double",
            "nullable": true
          },
          "PrincipalPercentageOverride": {
            "type": "number",
            "description": "Principal percentage override.",
            "format": "double",
            "nullable": true
          },
          "CollectFeesInAdvance": {
            "type": "boolean",
            "description": "Collect fees in advance."
          },
          "IsGroup": {
            "type": "boolean",
            "description": "Is fee group."
          },
          "IsActive": {
            "type": "boolean",
            "description": "Is active. Set true when the desired result is for the Fee Setting to be active and visible in the UI. If no parameter is sent then the default of true will be used."
          },
          "FeePaidFromAccountList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SaveFeePaidFromAccountApiRequest"
            },
            "description": "Collection of paid from accounts.",
            "nullable": true
          },
          "FeeSettingSchedules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SaveFeeSettingScheduleApiRequest"
            },
            "description": "Collection of fee setting schedules.",
            "nullable": true
          },
          "InstitutionIdentityRecordId": {
            "type": "integer",
            "description": "Used to restrict queries to specific Institutions. If not supplied, the query will be restricted\r\nto Institutions assigned to the user.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SaveFeeSettingResponseApiModel": {
        "type": "object",
        "properties": {
          "Link": {
            "type": "string",
            "description": "Link to GET the resource.",
            "nullable": true
          },
          "FeeSettingId": {
            "type": "integer",
            "description": "Internal unique Cheetah Id for fee setting.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SaveFeeSettingScheduleApiRequest": {
        "required": [
          "DiscountPercentage",
          "FeeAssessmentFrequencyType",
          "FeeScheduleId",
          "FeeSettingId",
          "PrincipalPercentage"
        ],
        "type": "object",
        "properties": {
          "FeeSettingScheduleId": {
            "type": "integer",
            "description": "Fee setting schedule is a unique internal key.",
            "format": "int32",
            "nullable": true
          },
          "FeeSettingId": {
            "type": "integer",
            "description": "The fee setting Id the fee schedule setting is related.",
            "format": "int32"
          },
          "FeeScheduleId": {
            "type": "integer",
            "description": "Name of the fee schedule. To obtain an Id use the /vX/Lookup service with the parameter GetFeeScheduleValues.",
            "format": "int32"
          },
          "FeeAssessmentFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "PrincipalPercentage": {
            "type": "number",
            "description": "Principal percentage.",
            "format": "double"
          },
          "DiscountPercentage": {
            "type": "number",
            "description": "Discount percentage.",
            "format": "double"
          },
          "UseGroupFeeSettingPrincipalPercentageOverride": {
            "type": "boolean",
            "description": "Use group fee setting principal percentage override."
          },
          "ExcludedAccounts": {
            "type": "string",
            "description": "Excluded accounts.",
            "nullable": true
          },
          "IsActive": {
            "type": "boolean",
            "description": "Is active."
          },
          "FeeCreditToTrustees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SaveFeeCreditToIdentityRecordApiRequest"
            },
            "description": "Collection of credit to trustees.",
            "nullable": true
          },
          "InstitutionIdentityRecordId": {
            "type": "integer",
            "description": "Used to restrict queries to specific Institutions. If not supplied, the query will be restricted\r\nto Institutions assigned to the user.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SaveFeeSettingScheduleResponseApiModel": {
        "type": "object",
        "properties": {
          "Link": {
            "type": "string",
            "description": "Link to GET the resource.",
            "nullable": true
          },
          "FeeSettingId": {
            "type": "integer",
            "description": "Internal unique Cheetah Id for fee setting.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SaveFileAttachmentsResponseApiModel": {
        "type": "object",
        "properties": {
          "FileAttachmentId": {
            "type": "integer",
            "description": "Internal unique file attachment Id.",
            "format": "int32"
          },
          "FileType": {
            "$ref": "#/components/schemas/FileType"
          },
          "FileTypeName": {
            "type": "string",
            "description": "File type name.",
            "nullable": true,
            "readOnly": true
          },
          "Link": {
            "type": "string",
            "description": "Link to download file.",
            "nullable": true
          },
          "FileName": {
            "type": "string",
            "description": "Filename",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SaveInterestRateApiRequest": {
        "required": [
          "AssetId",
          "DateEffectiveFrom",
          "Rate"
        ],
        "type": "object",
        "properties": {
          "AssetId": {
            "type": "integer",
            "description": "Asset",
            "format": "int32"
          },
          "Rate": {
            "maximum": 100,
            "minimum": 0,
            "type": "number",
            "description": "Rate\r\nRate Cannot be more than 100\"",
            "format": "double"
          },
          "DateEffectiveFrom": {
            "type": "string",
            "description": "Interest Rate date efffective from",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "SaveInvestmentModelSettingApiRequest": {
        "required": [
          "InvestmentModelId",
          "MarketValuePercentage"
        ],
        "type": "object",
        "properties": {
          "AccountId": {
            "type": "integer",
            "description": "If the setting is for an account then the AccountId shoule be supplied.\r\nTo obtain an Id use the /vX/Lookup service with the parameter GetAccountValues or GetAccountsForInstitutionValues.",
            "format": "int32",
            "nullable": true
          },
          "InvestmentModelId": {
            "type": "integer",
            "description": "If the setting is for an investment model then the InvestmentModelId shoule be supplied.\r\nTo obtain an Id use the /vX/Lookup service with the parameter GetInvestmentModelValues.",
            "format": "int32"
          },
          "AccountGroupId": {
            "type": "integer",
            "description": "If the setting is for an account group then the AccountGroupId shoule be supplied.\r\nTo obtain an Id use the /vX/Lookup service with the parameter GetAccountGroupValues.",
            "format": "int32",
            "nullable": true
          },
          "MarketValuePercentage": {
            "type": "number",
            "description": "Market value percentage",
            "format": "double"
          },
          "InstitutionIdentityRecordId": {
            "type": "integer",
            "description": "Used to restrict queries to specific Institutions. If not supplied, the query will be restricted\r\nto Institutions assigned to the user.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SaveInvestmentModelSettingResponseApiModel": {
        "type": "object",
        "properties": {
          "Link": {
            "type": "string",
            "description": "Link to GET the resource.",
            "nullable": true
          },
          "InvestmentModelSettingId": {
            "type": "integer",
            "description": "Internal unique Cheetah Id for investment model setting.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SaveLoanApiRequest": {
        "required": [
          "LoanPaymentOrderType",
          "OddLastCouponType"
        ],
        "type": "object",
        "properties": {
          "DateOfIssue": {
            "type": "string",
            "description": "Date of issue.",
            "format": "date-time",
            "nullable": true
          },
          "DateOfMaturity": {
            "type": "string",
            "description": "Date of maturity.",
            "format": "date-time",
            "nullable": true
          },
          "DateOfFirstPayment": {
            "type": "string",
            "description": "Date of first payment.",
            "format": "date-time",
            "nullable": true
          },
          "OddLastCouponType": {
            "$ref": "#/components/schemas/OddLastCouponType"
          },
          "PaymentFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "IncomePaymentFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "IncomePaymentMonth": {
            "type": "integer",
            "description": "Income payment month.",
            "format": "int32",
            "nullable": true
          },
          "IncomePaymentDay": {
            "type": "integer",
            "description": "Income payment day.",
            "format": "int32",
            "nullable": true
          },
          "CompoundingFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "AmortizationFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "AccrualMethodType": {
            "$ref": "#/components/schemas/AccrualMethodType"
          },
          "DepositoryIdentityRecordId": {
            "type": "integer",
            "description": "Depository identity record Id.",
            "format": "int32",
            "nullable": true
          },
          "LenderIdentityRecordId": {
            "type": "integer",
            "description": "Lender  identity record Id.",
            "format": "int32",
            "nullable": true
          },
          "BorrowerIdentityRecordId": {
            "type": "integer",
            "description": "Borrower identity record id.",
            "format": "int32",
            "nullable": true
          },
          "PeriodicPaymentAmount": {
            "type": "number",
            "description": "Periodic payment amount.",
            "format": "double"
          },
          "ExcludeFromDelinquencyReporting": {
            "type": "boolean",
            "description": "Exclude from delinquency reporting."
          },
          "DateExcludeFromDelinquencyExpiration": {
            "type": "string",
            "description": "Date of expiration for exlusion from delinquency reporting.",
            "format": "date-time",
            "nullable": true
          },
          "LoanPaymentOrderType": {
            "$ref": "#/components/schemas/LoanPaymentOrderType"
          }
        },
        "additionalProperties": false
      },
      "SaveMutualFundApiRequest": {
        "required": [
          "UseDailyFactor"
        ],
        "type": "object",
        "properties": {
          "IncomePaymentFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "IncomePaymentMonth": {
            "type": "integer",
            "description": "Income payment month.",
            "format": "int32",
            "nullable": true
          },
          "IncomePaymentDay": {
            "type": "integer",
            "description": "Income payment day.",
            "format": "int32",
            "nullable": true
          },
          "UseDailyFactor": {
            "type": "boolean",
            "description": "Use daily factor."
          },
          "AccrualMethodType": {
            "$ref": "#/components/schemas/AccrualMethodType"
          },
          "ExchangeType": {
            "$ref": "#/components/schemas/ExchangeType"
          },
          "EarningsPerShareDiluted": {
            "type": "number",
            "description": "Earnings per share diluted.",
            "format": "double",
            "nullable": true
          },
          "FundFamilyId": {
            "type": "integer",
            "description": "Fund Family Id.",
            "format": "int32",
            "nullable": true
          },
          "FundCategoryId": {
            "type": "integer",
            "description": "Fund Category Id.",
            "format": "int32",
            "nullable": true
          },
          "FundNumber": {
            "maxLength": 4,
            "minLength": 0,
            "type": "string",
            "description": "Fund number.",
            "nullable": true
          },
          "FundStatusType": {
            "$ref": "#/components/schemas/FundStatusType"
          },
          "ShortTermRedemptionFeePercent": {
            "type": "number",
            "description": "Short term redemption fee percent.",
            "format": "double",
            "nullable": true
          },
          "ShortTermHoldingPeriod": {
            "type": "integer",
            "description": "Short term holding period.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SaveNameAndAddressApiRequest": {
        "required": [
          "DisplayName",
          "DomainModelClass",
          "FirstNameLegalName",
          "IdentityClassificationTypes",
          "InstitutionIdentityRecordId",
          "IsActive",
          "TaxIdStatusType"
        ],
        "type": "object",
        "properties": {
          "IdentityRecordId": {
            "type": "integer",
            "description": "Internal unique identity record Id.",
            "format": "int32"
          },
          "Code": {
            "maxLength": 15,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "DisplayName": {
            "maxLength": 125,
            "minLength": 0,
            "type": "string"
          },
          "PayeeName": {
            "maxLength": 125,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "TaxIdStatusType": {
            "$ref": "#/components/schemas/TaxIdStatusType"
          },
          "TaxId": {
            "maxLength": 9,
            "minLength": 9,
            "type": "string",
            "nullable": true
          },
          "TaxIdType": {
            "$ref": "#/components/schemas/TaxIdType"
          },
          "DomainModelClass": {
            "$ref": "#/components/schemas/DomainModelClass"
          },
          "Comments": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "SalutationType": {
            "$ref": "#/components/schemas/SalutationType"
          },
          "GenderType": {
            "$ref": "#/components/schemas/GenderType"
          },
          "FirstNameLegalName": {
            "type": "string"
          },
          "MiddleName": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "LastName": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "Title": {
            "maxLength": 60,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "ContactName": {
            "maxLength": 125,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "DateOfBirth": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "DateOfDeath": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "PhoneNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SavePhoneNumberApiRequest"
            },
            "nullable": true
          },
          "Emails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SaveEmailApiRequest"
            },
            "nullable": true
          },
          "Addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SavePostalAddressApiRequest"
            },
            "nullable": true
          },
          "IdentityClassificationTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityClassificationType"
            }
          },
          "IsActive": {
            "type": "boolean"
          },
          "InstitutionIdentityRecordId": {
            "type": "integer",
            "description": "Used to restrict queries to specific Institutions. If not supplied, the query will be restricted\r\nto Institutions assigned to the user.",
            "format": "int32"
          },
          "QualifiedDisabilityTypeId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SaveNameAndAddressResponseApiModel": {
        "type": "object",
        "properties": {
          "Link": {
            "type": "string",
            "description": "Link to GET the resource.",
            "nullable": true
          },
          "IdentityRecordId": {
            "type": "integer",
            "description": "Internal unique identity record Id.",
            "format": "int32"
          },
          "DisplayName": {
            "type": "string",
            "description": "The preferred name to be displayed.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SaveOptionApiRequest": {
        "type": "object",
        "properties": {
          "IndustryId": {
            "type": "integer",
            "description": "Industry id.",
            "format": "int32",
            "nullable": true
          },
          "ExchangeType": {
            "$ref": "#/components/schemas/ExchangeType"
          },
          "DateOfExpiration": {
            "type": "string",
            "description": "Date of expiration.",
            "format": "date-time",
            "nullable": true
          },
          "AssociatedAssetId": {
            "type": "integer",
            "description": "Associated Asset",
            "format": "int32",
            "nullable": true
          },
          "StrikePriceAmount": {
            "type": "number",
            "description": "Strike price amount.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SaveOtherAssetApiRequest": {
        "type": "object",
        "properties": {
          "IncomePaymentFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "IncomePaymentMonth": {
            "type": "integer",
            "description": "Income payment month.",
            "format": "int32",
            "nullable": true
          },
          "IncomePaymentDay": {
            "type": "integer",
            "description": "Income payment day.",
            "format": "int32",
            "nullable": true
          },
          "AmortizationFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "AccrualMethodType": {
            "$ref": "#/components/schemas/AccrualMethodType"
          },
          "CompoundFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "DateOfFirstPayment": {
            "type": "string",
            "description": "Date of first payment.",
            "format": "date-time",
            "nullable": true
          },
          "DepositoryIdentityRecordId": {
            "type": "integer",
            "description": "Depository",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SavePendingTransactionApiRequest": {
        "required": [
          "AccountId",
          "DateSettled",
          "DateTraded",
          "IncomeCashAmount",
          "IncomeInventoryAmount",
          "IncomeInvestAmount",
          "PrincipalCashAmount",
          "PrincipalInventoryAmount",
          "PrincipalInvestAmount",
          "StateInvestAmount",
          "TaxYear",
          "TransactionBatchId",
          "TransactionCategoryId",
          "Units"
        ],
        "type": "object",
        "properties": {
          "TransactionBatchId": {
            "type": "integer",
            "description": "Transaction Batch Id.",
            "format": "int32"
          },
          "AccountId": {
            "type": "integer",
            "description": "Account Id.",
            "format": "int32"
          },
          "TransactionCategoryId": {
            "type": "integer",
            "description": "Transaction Category Id.",
            "format": "int32"
          },
          "SourceTransactionReferenceNumber": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "Source Transaction Reference Number.",
            "nullable": true
          },
          "DateTraded": {
            "type": "string",
            "description": "Date Traded (Date only)",
            "format": "date-time"
          },
          "DateSettled": {
            "type": "string",
            "description": "Date Settled (Date only)",
            "format": "date-time"
          },
          "TaxYear": {
            "type": "integer",
            "description": "Tax Year",
            "format": "int32"
          },
          "AssetId": {
            "type": "integer",
            "description": "Asset Id.",
            "format": "int32",
            "nullable": true
          },
          "AssetDomainModelClass": {
            "$ref": "#/components/schemas/DomainModelClass"
          },
          "OverrideTaxLotHarvestingType": {
            "$ref": "#/components/schemas/TaxLotHarvestingType"
          },
          "RegistrationTypeId": {
            "type": "integer",
            "description": "Registration Type Id.",
            "format": "int32",
            "nullable": true
          },
          "LocationTypeId": {
            "type": "integer",
            "description": "Location Type Id.",
            "format": "int32",
            "nullable": true
          },
          "UseSpecifiedLot": {
            "type": "string",
            "description": "Identifier for specific lot to use",
            "nullable": true
          },
          "Units": {
            "type": "number",
            "description": "Units",
            "format": "double"
          },
          "Price": {
            "type": "number",
            "description": "Price",
            "format": "double",
            "nullable": true
          },
          "CommissionFee": {
            "type": "number",
            "description": "Commission Fee Amount",
            "format": "double",
            "nullable": true
          },
          "SecFee": {
            "type": "number",
            "description": "Sec Fee Amount",
            "format": "double",
            "nullable": true
          },
          "OtherFee": {
            "type": "number",
            "description": "Other Fee Amount",
            "format": "double",
            "nullable": true
          },
          "TradingFeeOverride": {
            "type": "boolean",
            "description": "Trading Fee Override"
          },
          "BrokerIdentityRecordId": {
            "type": "integer",
            "description": "Identifier of Broker",
            "format": "int32",
            "nullable": true
          },
          "PrincipalCashAmount": {
            "type": "number",
            "description": "Principal Cash Amount",
            "format": "double"
          },
          "IncomeCashAmount": {
            "type": "number",
            "description": "Income Cash Amount",
            "format": "double"
          },
          "PrincipalInvestAmount": {
            "type": "number",
            "description": "Principal Invest Amount",
            "format": "double"
          },
          "IncomeInvestAmount": {
            "type": "number",
            "description": "Income Invest Amount",
            "format": "double"
          },
          "StateInvestAmount": {
            "type": "number",
            "description": "State Invest Amount",
            "format": "double"
          },
          "PrincipalInventoryAmount": {
            "type": "number",
            "description": "Principal Inventory Amount",
            "format": "double"
          },
          "IncomeInventoryAmount": {
            "type": "number",
            "description": "Income Inventory Amount",
            "format": "double"
          },
          "TaxableAmount": {
            "type": "number",
            "description": "Taxable Amount",
            "format": "double",
            "nullable": true
          },
          "AccruedInterestAmount": {
            "type": "number",
            "description": "Accrued Interest Amount",
            "format": "double",
            "nullable": true
          },
          "Narrative": {
            "type": "string",
            "description": "Narrative",
            "nullable": true
          },
          "PaymentType": {
            "$ref": "#/components/schemas/PaymentType"
          },
          "IsPaidForByAccount": {
            "type": "boolean",
            "description": "Is Paid for the Account?",
            "nullable": true
          },
          "PaidForIdentityRecordId": {
            "type": "integer",
            "description": "Paid For Identity Record Id",
            "format": "int32",
            "nullable": true
          },
          "PaidToIdentityRecordId": {
            "type": "integer",
            "description": "Paid To Identity Record Id",
            "format": "int32",
            "nullable": true
          },
          "PostalAddressContactMechanismId": {
            "type": "integer",
            "description": "Postal Address Contact Mechanism Id",
            "format": "int32",
            "nullable": true
          },
          "IsProcessed": {
            "type": "boolean",
            "description": "Is Processed?",
            "nullable": true
          },
          "UseElectronicSignature": {
            "type": "boolean",
            "description": "Use Electronic Signature?",
            "nullable": true
          },
          "TaxIdToShowType": {
            "$ref": "#/components/schemas/TaxIdToShowType"
          },
          "IsPaymentAutoCombined": {
            "type": "boolean",
            "description": "Is Payment Auto Combined?",
            "nullable": true
          },
          "PrintPayeeAddress": {
            "type": "boolean",
            "description": "Print Payee Address?",
            "nullable": true
          },
          "IRADistributionCode": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "IRA Distribution code (combined 1 or 2 codes)",
            "nullable": true
          },
          "IraTransactionType": {
            "$ref": "#/components/schemas/IRATransactionType"
          },
          "InstitutionPaymentAccountId": {
            "type": "integer",
            "description": "Institution Payment Account Id",
            "format": "int32",
            "nullable": true
          },
          "RecipientBankInformationId": {
            "type": "integer",
            "description": "Recipient Bank Information Id",
            "format": "int32",
            "nullable": true
          },
          "Memo": {
            "type": "string",
            "description": "Memo",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Save Pending Transaction request model."
      },
      "SavePerformanceExclusionApiRequest": {
        "required": [
          "InvestmentSegmentAllocationType",
          "IsGlobal"
        ],
        "type": "object",
        "properties": {
          "PerformanceExclusionId": {
            "type": "integer",
            "description": "Unique internal Cheetah Id for the performance exclusion. If specified will update the corresponding record.\r\nIf not specified or zero will insert new record.",
            "format": "int32",
            "nullable": true
          },
          "InvestmentSegmentAllocationType": {
            "$ref": "#/components/schemas/InvestmentSegmentAllocationType"
          },
          "AccountId": {
            "type": "integer",
            "description": "The Account Id.",
            "format": "int32",
            "nullable": true
          },
          "AccountGroupId": {
            "type": "integer",
            "description": "The Account Group Id.",
            "format": "int32",
            "nullable": true
          },
          "AssetId": {
            "type": "integer",
            "description": "The AssetId. Must be provided if InvestmentSegmentAllocationType is Asset.",
            "format": "int32",
            "nullable": true
          },
          "PortfolioReportCategoryId": {
            "type": "integer",
            "description": "The PortfolioReportCategoryId. Must be provided if InvestmentSegmentAllocationType is PortfolioReportCategory.",
            "format": "int32",
            "nullable": true
          },
          "IndustryId": {
            "type": "integer",
            "description": "The IndustryId. Must be provided if InvestmentSegmentAllocationType is Industry.",
            "format": "int32",
            "nullable": true
          },
          "AssetCategory": {
            "$ref": "#/components/schemas/AssetCategory"
          },
          "AssetPrimaryClassType": {
            "$ref": "#/components/schemas/AssetPrimaryClassType"
          },
          "IsGlobal": {
            "type": "boolean",
            "description": "Performance exclusion is global."
          },
          "DateBeginning": {
            "type": "string",
            "description": "The performance exclusion begins on this date.",
            "format": "date-time",
            "nullable": true
          },
          "DateEnding": {
            "type": "string",
            "description": "The performance exclusion ends on this date.",
            "format": "date-time",
            "nullable": true
          },
          "InstitutionIdentityRecordId": {
            "type": "integer",
            "description": "Used to restrict queries to specific Institutions. If not supplied, the query will be restricted\r\nto Institutions assigned to the user.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SavePhoneNumberApiRequest": {
        "required": [
          "Number"
        ],
        "type": "object",
        "properties": {
          "IdentityRecordId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ContactMechanismId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ContactMechanismType": {
            "$ref": "#/components/schemas/ContactMechanismType"
          },
          "ContactMechanismUseType": {
            "$ref": "#/components/schemas/ContactMechanismUseType"
          },
          "IsPrimary": {
            "type": "boolean"
          },
          "MonthEffectiveFrom": {
            "type": "integer",
            "format": "int32"
          },
          "MonthEffectiveTo": {
            "type": "integer",
            "format": "int32"
          },
          "DayEffectiveFrom": {
            "type": "integer",
            "format": "int32"
          },
          "DayEffectiveTo": {
            "type": "integer",
            "format": "int32"
          },
          "IsActive": {
            "type": "boolean"
          },
          "Note": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "ContactMechanismPurposeTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactMechanismPurposeType"
            },
            "nullable": true
          },
          "InstitutionIdentityRecordId": {
            "type": "integer",
            "description": "Used to restrict queries to specific Institutions. If not supplied, the query will be restricted\r\nto Institutions assigned to the user.",
            "format": "int32",
            "nullable": true
          },
          "Number": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SavePoolFactorApiRequest": {
        "required": [
          "AssetId",
          "DateEffectiveFrom",
          "Factor",
          "PaymentDelay"
        ],
        "type": "object",
        "properties": {
          "AssetId": {
            "type": "integer",
            "description": "Asset",
            "format": "int32"
          },
          "Factor": {
            "maximum": 1,
            "minimum": 0,
            "type": "number",
            "description": "Factor\r\nFactor Cannot be more than 1.0\"",
            "format": "double"
          },
          "PaymentDelay": {
            "type": "integer",
            "description": "PaymentDelay",
            "format": "int32"
          },
          "DateEffectiveFrom": {
            "type": "string",
            "description": "pool factor date efffective from",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "SavePostalAddressApiRequest": {
        "required": [
          "Country",
          "Line1"
        ],
        "type": "object",
        "properties": {
          "IdentityRecordId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ContactMechanismId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ContactMechanismType": {
            "$ref": "#/components/schemas/ContactMechanismType"
          },
          "ContactMechanismUseType": {
            "$ref": "#/components/schemas/ContactMechanismUseType"
          },
          "IsPrimary": {
            "type": "boolean"
          },
          "MonthEffectiveFrom": {
            "type": "integer",
            "format": "int32"
          },
          "MonthEffectiveTo": {
            "type": "integer",
            "format": "int32"
          },
          "DayEffectiveFrom": {
            "type": "integer",
            "format": "int32"
          },
          "DayEffectiveTo": {
            "type": "integer",
            "format": "int32"
          },
          "IsActive": {
            "type": "boolean"
          },
          "Note": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "ContactMechanismPurposeTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactMechanismPurposeType"
            },
            "nullable": true
          },
          "InstitutionIdentityRecordId": {
            "type": "integer",
            "description": "Used to restrict queries to specific Institutions. If not supplied, the query will be restricted\r\nto Institutions assigned to the user.",
            "format": "int32",
            "nullable": true
          },
          "Attention": {
            "type": "string",
            "nullable": true
          },
          "Line1": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "Line2": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "Line3": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "City": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "PostalCode": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "StateProvince": {
            "$ref": "#/components/schemas/StateProvince"
          },
          "Country": {
            "$ref": "#/components/schemas/Country"
          },
          "SpecialInstructions": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SavePriceApiRequest": {
        "required": [
          "AssetId",
          "DateEffectiveFrom",
          "Price",
          "PricingSourceId"
        ],
        "type": "object",
        "properties": {
          "AssetId": {
            "type": "integer",
            "description": "Asset",
            "format": "int32"
          },
          "Price": {
            "type": "number",
            "description": "Price",
            "format": "double"
          },
          "Volume": {
            "type": "integer",
            "description": "Volume",
            "format": "int32",
            "nullable": true
          },
          "AskPrice": {
            "type": "number",
            "description": "Ask price",
            "format": "double",
            "nullable": true
          },
          "BidPrice": {
            "type": "number",
            "description": "Bid price",
            "format": "double",
            "nullable": true
          },
          "PricingSourceId": {
            "type": "integer",
            "description": "Pricing Source Id",
            "format": "int32"
          },
          "DateEffectiveFrom": {
            "type": "string",
            "description": "Price date effective from",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "SavePropertyApiRequest": {
        "type": "object",
        "properties": {
          "IncomePaymentFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "IncomePaymentMonth": {
            "type": "integer",
            "description": "Income payment month.",
            "format": "int32",
            "nullable": true
          },
          "IncomePaymentDay": {
            "type": "integer",
            "description": "Income payment day.",
            "format": "int32",
            "nullable": true
          },
          "RealEstateParcelNumber": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "Real estate parcel number.",
            "nullable": true
          },
          "InsurancePolicyNumber": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "Insurance policy number.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SaveQualityRatingApiRequest": {
        "required": [
          "AssetId",
          "DateEffectiveFrom",
          "QualityRating",
          "QualityRatingSourceId"
        ],
        "type": "object",
        "properties": {
          "AssetId": {
            "type": "integer",
            "description": "Asset",
            "format": "int32"
          },
          "QualityRating": {
            "maxLength": 5,
            "minLength": 0,
            "type": "string",
            "description": "Quality Rating"
          },
          "QualityRatingSourceId": {
            "type": "integer",
            "description": "Quality Rating source",
            "format": "int32"
          },
          "DateEffectiveFrom": {
            "type": "string",
            "description": "Quality Rating date efffective from",
            "format": "date-time"
          },
          "DateLastChecked": {
            "type": "string",
            "description": "Quality Rating date last checked",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "SaveRecipientBankInformationApiRequest": {
        "required": [
          "DepositoryIdentityRecordId",
          "IdentityRecordId"
        ],
        "type": "object",
        "properties": {
          "IdentityRecordId": {
            "type": "integer",
            "format": "int32"
          },
          "DepositoryIdentityRecordId": {
            "type": "integer",
            "format": "int32"
          },
          "RecipientAccountName": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "RecipientAccountNumber": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "IsSavings": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "SaveStockApiRequest": {
        "required": [
          "IsIncludedIn13F",
          "IsRestrictedByRule144A"
        ],
        "type": "object",
        "properties": {
          "IndustryId": {
            "type": "integer",
            "description": "Industry id.",
            "format": "int32",
            "nullable": true
          },
          "ExchangeType": {
            "$ref": "#/components/schemas/ExchangeType"
          },
          "EarningsPerShareDiluted": {
            "type": "number",
            "description": "Earning per share diluted.",
            "format": "double",
            "nullable": true
          },
          "EarningsPerShareBasic": {
            "type": "number",
            "description": "Earning per share basic.",
            "format": "double",
            "nullable": true
          },
          "EarningsPerShareEffectiveDate": {
            "type": "string",
            "description": "Earning per share effective date.",
            "format": "date-time",
            "nullable": true
          },
          "PaymentFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "SharesOutstanding": {
            "type": "integer",
            "description": "Share outstanding.",
            "format": "int64",
            "nullable": true
          },
          "IsIncludedIn13F": {
            "type": "boolean",
            "description": "Is included in 13F."
          },
          "IsRestrictedByRule144A": {
            "type": "boolean",
            "description": "Is restricted by rule 144 A."
          },
          "CalculatedMarketCapType": {
            "$ref": "#/components/schemas/MarketCapType"
          }
        },
        "additionalProperties": false
      },
      "SaveTaskApiRequest": {
        "required": [
          "DateDue",
          "Name",
          "PriorityTypeId",
          "TaskId"
        ],
        "type": "object",
        "properties": {
          "TaskId": {
            "type": "integer",
            "description": "Unique task Id",
            "format": "int32"
          },
          "DateDue": {
            "type": "string",
            "description": "Task due as of date",
            "format": "date-time"
          },
          "AccountId": {
            "type": "integer",
            "description": "Account ID",
            "format": "int32",
            "nullable": true
          },
          "AssetId": {
            "type": "integer",
            "description": "Asset ID",
            "format": "int32",
            "nullable": true
          },
          "IdentityRecordId": {
            "type": "integer",
            "description": "Identity record ID",
            "format": "int32",
            "nullable": true
          },
          "Name": {
            "maxLength": 25,
            "minLength": 0,
            "type": "string",
            "description": "Name"
          },
          "Description": {
            "type": "string",
            "description": "Description",
            "nullable": true
          },
          "PriorityTypeId": {
            "$ref": "#/components/schemas/PriorityType"
          },
          "AssignedToUserGuid": {
            "type": "string",
            "description": "User Guid",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Get task request model."
      },
      "SaveTradeApiRequest": {
        "type": "object",
        "properties": {
          "AccountId": {
            "type": "integer",
            "description": "Internal unique Cheetah Id.",
            "format": "int32"
          },
          "AssetId": {
            "type": "integer",
            "description": "Internal unique Cheetah Id.",
            "format": "int32"
          },
          "TradeType": {
            "$ref": "#/components/schemas/TradeType"
          },
          "TradeDurationType": {
            "$ref": "#/components/schemas/TradeDurationType"
          },
          "TradePriceType": {
            "$ref": "#/components/schemas/TradePriceType"
          },
          "TradeBasisOptionType": {
            "$ref": "#/components/schemas/TradeBasisOptionType"
          },
          "TradedPriceAmount": {
            "type": "number",
            "description": "Price amount of Trade",
            "format": "double",
            "nullable": true
          },
          "DateTraded": {
            "type": "string",
            "description": "Date Traded",
            "format": "date-time",
            "nullable": true
          },
          "ExecuteInSingleBlock": {
            "type": "boolean",
            "description": "Execeute trades in single block"
          },
          "StopPriceAmount": {
            "type": "number",
            "description": "stop price amount",
            "format": "double",
            "nullable": true
          },
          "LimitPriceAmount": {
            "type": "number",
            "description": "Limit price amount",
            "format": "double",
            "nullable": true
          },
          "UnitShares": {
            "type": "number",
            "description": "Unit Shares",
            "format": "double",
            "nullable": true
          },
          "NetAmount": {
            "type": "number",
            "description": "Net Amount",
            "format": "double",
            "nullable": true
          },
          "UseIncomeCash": {
            "type": "boolean",
            "description": "Use Income Cash"
          },
          "Narrative": {
            "type": "string",
            "description": "Transaction Narrative",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SaveTradeResponseApiModel": {
        "type": "object",
        "properties": {
          "Link": {
            "type": "string",
            "description": "Link to GET the resource.",
            "nullable": true
          },
          "TradeId": {
            "type": "integer",
            "description": "Internal unique trade Id.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SaveTransactionBatchApiRequest": {
        "required": [
          "Code",
          "InstitutionIdentityRecordId",
          "Name"
        ],
        "type": "object",
        "properties": {
          "InstitutionIdentityRecordId": {
            "type": "integer",
            "description": "Institution identity id",
            "format": "int32"
          },
          "Code": {
            "maxLength": 9,
            "minLength": 0,
            "type": "string",
            "description": "Transaction batch Code"
          },
          "Name": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Transaction batch name"
          },
          "IsForError": {
            "type": "boolean",
            "description": "Is for error"
          }
        },
        "additionalProperties": false,
        "description": "Save Transaction Batch request model."
      },
      "ScheduleApiModel": {
        "type": "object",
        "properties": {
          "ScheduleId": {
            "type": "integer",
            "description": "Internal unique schedule Id.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Schedule name.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "Schedule description.",
            "nullable": true
          },
          "FrequencyTypeId": {
            "type": "integer",
            "description": "Frequency type Id.",
            "format": "int32"
          },
          "FrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "FrequencyTypeName": {
            "type": "string",
            "description": "Frequency type name.",
            "nullable": true,
            "readOnly": true
          },
          "FrequencyInterval": {
            "type": "integer",
            "description": "Frequency interval.",
            "format": "int32",
            "nullable": true
          },
          "FrequencyWeekOfMonthTypeId": {
            "type": "integer",
            "description": "Frequency week of month type Id.",
            "format": "int32",
            "nullable": true
          },
          "FrequencyWeekOfMonthType": {
            "$ref": "#/components/schemas/FrequencyWeekOfMonthType"
          },
          "FrequencyWeekOfMonthTypeName": {
            "type": "string",
            "description": "Frequency week of month type name.",
            "nullable": true,
            "readOnly": true
          },
          "FrequencyIntervalMonthOffset": {
            "type": "integer",
            "description": "Frequency interval month offset.",
            "format": "int32",
            "nullable": true
          },
          "TimeOfDay": {
            "type": "string",
            "description": "Time of day.",
            "nullable": true
          },
          "RunOnBusinessDays": {
            "type": "boolean",
            "description": "Run on business days."
          },
          "BusinessDayRuleTypeId": {
            "type": "integer",
            "description": "Business day rule type Id.",
            "format": "int32",
            "nullable": true
          },
          "BusinessDayRuleType": {
            "$ref": "#/components/schemas/BusinessDayRuleType"
          },
          "BusinessDayRuleTypeName": {
            "type": "string",
            "description": "Business day rule type name.",
            "nullable": true,
            "readOnly": true
          },
          "RunInAdvance": {
            "type": "boolean",
            "description": "Run in advance."
          },
          "RunInAdvanceOffsetDays": {
            "type": "integer",
            "description": "Run in advance offset days.",
            "format": "int32",
            "nullable": true
          },
          "IsOffsetBusinessDays": {
            "type": "boolean",
            "description": "Is offset business days.",
            "nullable": true
          },
          "DateOfExpiration": {
            "type": "string",
            "description": "Date of expiration.",
            "format": "date-time",
            "nullable": true
          },
          "IsActive": {
            "type": "boolean",
            "description": "Is active."
          }
        },
        "additionalProperties": false
      },
      "ScheduledItemApiModel": {
        "type": "object",
        "properties": {
          "ScheduledItemId": {
            "type": "integer",
            "description": "Internal unique scheduled item Id.",
            "format": "int32"
          },
          "ScheduledItemTypeId": {
            "type": "integer",
            "description": "Scheduled item type Id.",
            "format": "int32"
          },
          "ScheduledItemType": {
            "$ref": "#/components/schemas/ScheduledItemType"
          },
          "ScheduledItemTypeName": {
            "type": "string",
            "description": "Scheduled item type name.",
            "nullable": true,
            "readOnly": true
          },
          "ScheduleId": {
            "type": "integer",
            "description": "Internal unique schedule Id.",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Description.",
            "nullable": true
          },
          "DateNextRun": {
            "type": "string",
            "description": "Date next run.",
            "format": "date-time"
          },
          "DateFirstRun": {
            "type": "string",
            "description": "Date first run.",
            "format": "date-time",
            "nullable": true
          },
          "DateLastRun": {
            "type": "string",
            "description": "Date last run.",
            "format": "date-time",
            "nullable": true
          },
          "IsSuspended": {
            "type": "boolean",
            "description": "Is suspended."
          },
          "Schedule": {
            "$ref": "#/components/schemas/ScheduleApiModel"
          }
        },
        "additionalProperties": false
      },
      "ScheduledItemType": {
        "enum": [
          "OnceDaily",
          "Process",
          "Report",
          "Sweep",
          "Task",
          "Transaction",
          "CustomerStatement",
          "ExportQuery",
          "CollectiveFund"
        ],
        "type": "string"
      },
      "ScheduledTransactionAmountType": {
        "enum": [
          "Unknown",
          "Fixed",
          "Percent",
          "Units"
        ],
        "type": "string"
      },
      "ScheduledTransactionApiModel": {
        "type": "object",
        "properties": {
          "ScheduledTransactionId": {
            "type": "integer",
            "description": "Internal unique scheduled transaction Id.",
            "format": "int32"
          },
          "ScheduledItemId": {
            "type": "integer",
            "description": "Internal unique scheduled item Id.",
            "format": "int32"
          },
          "ScheduledTransactionTypeId": {
            "type": "integer",
            "description": "Scheduled transaction status type Id.",
            "format": "int32"
          },
          "ScheduledTransactionTypeName": {
            "type": "string",
            "description": "Scheduled transaction status type name.",
            "nullable": true,
            "readOnly": true
          },
          "ScheduledTransactionType": {
            "$ref": "#/components/schemas/ScheduledTransactionType"
          },
          "ScheduledTransactionAmountTypeId": {
            "type": "integer",
            "description": "Scheduled transaction amount type Id.",
            "format": "int32"
          },
          "ScheduledTransactionAmountTypeName": {
            "type": "string",
            "description": "Scheduled transaction amount type name.",
            "nullable": true,
            "readOnly": true
          },
          "ScheduledTransactionAmountType": {
            "$ref": "#/components/schemas/ScheduledTransactionAmountType"
          },
          "TransactionStatusTypeId": {
            "type": "integer",
            "description": "Transaction status type Id.",
            "format": "int32"
          },
          "TransactionStatusTypeName": {
            "type": "string",
            "description": "Transaction status type name.",
            "nullable": true,
            "readOnly": true
          },
          "TransactionStatusType": {
            "$ref": "#/components/schemas/TransactionStatusType"
          },
          "TransactionCategoryId": {
            "type": "integer",
            "description": "Transaction category Id.",
            "format": "int32"
          },
          "TransactionCategoryCode": {
            "type": "string",
            "description": "Transaction category code.",
            "nullable": true
          },
          "TransactionCategoryDescription": {
            "type": "string",
            "description": "Transaction category description.",
            "nullable": true
          },
          "AccountId": {
            "type": "integer",
            "description": "Account Id.",
            "format": "int32"
          },
          "AccountNumber": {
            "type": "string",
            "description": "Account number.",
            "nullable": true
          },
          "AccountName": {
            "type": "string",
            "description": "Account name.",
            "nullable": true
          },
          "AssetId": {
            "type": "integer",
            "description": "Asset Id.",
            "format": "int32",
            "nullable": true
          },
          "AssetCode": {
            "type": "string",
            "description": "Asset Code.",
            "nullable": true
          },
          "AssetSymbol": {
            "type": "string",
            "description": "Asset symbol.",
            "nullable": true
          },
          "AssetCategoryDisplayName": {
            "type": "string",
            "description": "Asset Category Display Name.",
            "nullable": true
          },
          "AssetIssuer": {
            "type": "string",
            "description": "Asset issuer.",
            "nullable": true
          },
          "AssetIssue": {
            "type": "string",
            "description": "Asset issue.",
            "nullable": true
          },
          "IsPrincipalIncomeSplit": {
            "type": "boolean",
            "description": "Is principal/income split.",
            "nullable": true
          },
          "UseIncomeCash": {
            "type": "boolean",
            "description": "Use income cash."
          },
          "Amount": {
            "type": "number",
            "description": "Amount.",
            "format": "double",
            "nullable": true
          },
          "Percentage": {
            "type": "number",
            "description": "Percentage.",
            "format": "double",
            "nullable": true
          },
          "TaxableAmount": {
            "type": "number",
            "description": "Taxable amount.",
            "format": "double",
            "nullable": true
          },
          "DateTraded": {
            "type": "string",
            "description": "Date traded.",
            "format": "date-time",
            "nullable": true
          },
          "TaxYear": {
            "type": "integer",
            "description": "Tax year.",
            "format": "int32",
            "nullable": true
          },
          "OverrideTaxLotHarvestingTypeId": {
            "type": "integer",
            "description": "Override tax lot harvesting type id.",
            "format": "int32",
            "nullable": true
          },
          "OverrideTaxLotHarvestingType": {
            "$ref": "#/components/schemas/TaxLotHarvestingType"
          },
          "OverrideTaxLotHarvestingTypeName": {
            "type": "string",
            "description": "Override tax lot harvesting type name.",
            "nullable": true,
            "readOnly": true
          },
          "UseSpecifiedLot": {
            "type": "string",
            "description": "Specified lot(s).",
            "nullable": true
          },
          "Price": {
            "type": "number",
            "description": "Asset price.",
            "format": "double",
            "nullable": true
          },
          "RegistrationTypeId": {
            "type": "integer",
            "description": "Registration type Id.",
            "format": "int32",
            "nullable": true
          },
          "LocationTypeId": {
            "type": "integer",
            "description": "Location type Id.",
            "format": "int32",
            "nullable": true
          },
          "Units": {
            "type": "number",
            "description": "Units.",
            "format": "double",
            "nullable": true
          },
          "PrincipalCashAmount": {
            "type": "number",
            "description": "Principal cash amount.",
            "format": "double",
            "nullable": true
          },
          "IncomeCashAmount": {
            "type": "number",
            "description": "Income cash amount.",
            "format": "double",
            "nullable": true
          },
          "PrincipalInvestAmount": {
            "type": "number",
            "description": "Principal invest amount.",
            "format": "double",
            "nullable": true
          },
          "IncomeInvestAmount": {
            "type": "number",
            "description": "Income invest amount.",
            "format": "double",
            "nullable": true
          },
          "StateInvestAmount": {
            "type": "number",
            "description": "State invest amount.",
            "format": "double",
            "nullable": true
          },
          "PrincipalInventoryAmount": {
            "type": "number",
            "description": "Principal inventory amount.",
            "format": "double",
            "nullable": true
          },
          "IncomeInventoryAmount": {
            "type": "number",
            "description": "Income inventory amount.",
            "format": "double",
            "nullable": true
          },
          "BalanceAdjustmentOverride": {
            "type": "boolean",
            "description": "Balance adjustment override."
          },
          "TransactionNarrative": {
            "type": "string",
            "description": "Transaction narrative.",
            "nullable": true
          },
          "ToAccountTransactionNarrative": {
            "type": "string",
            "description": "To account transaction narrative.",
            "nullable": true
          },
          "IsTransfer": {
            "type": "boolean",
            "description": "Is transfer."
          },
          "TransferToAccountId": {
            "type": "integer",
            "description": "Transfer to account Id.",
            "format": "int32",
            "nullable": true
          },
          "TransferTransactionCategoryId": {
            "type": "integer",
            "description": "Transfer to transaction category Id.",
            "format": "int32",
            "nullable": true
          },
          "PaymentTypeId": {
            "type": "integer",
            "description": "Payment type Id.",
            "format": "int32",
            "nullable": true
          },
          "PaymentType": {
            "$ref": "#/components/schemas/PaymentType"
          },
          "PaymentTypeName": {
            "type": "string",
            "description": "Payment type name.",
            "nullable": true,
            "readOnly": true
          },
          "IsPaidForByAccount": {
            "type": "boolean",
            "description": "Is paid for by account.",
            "nullable": true
          },
          "PaidForIdentityRecordId": {
            "type": "integer",
            "description": "Paid for identity record Id.",
            "format": "int32",
            "nullable": true
          },
          "PaidForName": {
            "type": "string",
            "description": "Paid for identity record Display Name.",
            "nullable": true
          },
          "PaidToIdentityRecordId": {
            "type": "integer",
            "description": "Paid to identity record Id.",
            "format": "int32",
            "nullable": true
          },
          "PayeeName": {
            "type": "string",
            "description": "Paid to identity record Display Name.",
            "nullable": true
          },
          "PostalAddressContactMechanismId": {
            "type": "integer",
            "description": "Postal address contact mechanism id.",
            "format": "int32",
            "nullable": true
          },
          "IRADistributionCodeId": {
            "type": "integer",
            "description": "IRA distribution code Id.",
            "format": "int32",
            "nullable": true
          },
          "IRADistributionCode": {
            "type": "string",
            "description": "IRA distribution code.",
            "nullable": true
          },
          "UseElectronicSignature": {
            "type": "boolean",
            "description": "Use electronic signature.",
            "nullable": true
          },
          "UseAvailableCash": {
            "type": "boolean",
            "description": "Use available cash.",
            "nullable": true
          },
          "TaxIdToShowTypeId": {
            "type": "integer",
            "description": "Tax id show type Id.",
            "format": "int32",
            "nullable": true
          },
          "TaxIdToShowType": {
            "$ref": "#/components/schemas/TaxIdToShowType"
          },
          "TaxIdToShowTypeName": {
            "type": "string",
            "description": "Tax id show type name.",
            "nullable": true,
            "readOnly": true
          },
          "IsPaymentAutoCombined": {
            "type": "boolean",
            "description": "Is payment auto combined.",
            "nullable": true
          },
          "InstitutionPaymentAccountId": {
            "type": "integer",
            "description": "Institution payment account Id.",
            "format": "int32",
            "nullable": true
          },
          "RecipientBankInformationId": {
            "type": "integer",
            "description": "Recipient bank information Id.",
            "format": "int32",
            "nullable": true
          },
          "Memo": {
            "type": "string",
            "description": "Memo.",
            "nullable": true
          },
          "PrintPayeeAddress": {
            "type": "boolean",
            "description": "Print payee address."
          },
          "ExpectedSettleDate": {
            "type": "string",
            "description": "Settle date.",
            "format": "date-time",
            "nullable": true
          },
          "CreatedDate": {
            "type": "string",
            "description": "Scheduled transaction created date.",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Scheduled transaction modified date.",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "description": "Scheduled transaction modified by.",
            "nullable": true
          },
          "ScheduledItem": {
            "$ref": "#/components/schemas/ScheduledItemApiModel"
          }
        },
        "additionalProperties": false
      },
      "ScheduledTransactionOccurrenceApiModel": {
        "type": "object",
        "properties": {
          "ScheduledTransactionOccurrenceId": {
            "type": "integer",
            "description": "Internal unique scheduled transaction occurrence id.",
            "format": "int32"
          },
          "ScheduledTransactionId": {
            "type": "integer",
            "description": "Internal unique scheduled transaction id.",
            "format": "int32"
          },
          "TransactionStatusTypeId": {
            "type": "integer",
            "description": "Transaction status type id.",
            "format": "int32",
            "nullable": true
          },
          "TransactionStatusType": {
            "$ref": "#/components/schemas/TransactionStatusType"
          },
          "TransactionStatusTypeName": {
            "type": "string",
            "description": "Transaction status type name.",
            "nullable": true,
            "readOnly": true
          },
          "TaxableAmount": {
            "type": "number",
            "description": "Taxable amount.",
            "format": "double",
            "nullable": true
          },
          "DateSettled": {
            "type": "string",
            "description": "Date settled.",
            "format": "date-time",
            "nullable": true
          },
          "DateTraded": {
            "type": "string",
            "description": "Date traded.",
            "format": "date-time",
            "nullable": true
          },
          "TaxYear": {
            "type": "integer",
            "description": "Tax year.",
            "format": "int32",
            "nullable": true
          },
          "OverrideTaxLotHarvestingTypeId": {
            "type": "integer",
            "description": "Override tax lot harvesting type id.",
            "format": "int32",
            "nullable": true
          },
          "OverrideTaxLotHarvestingType": {
            "$ref": "#/components/schemas/TaxLotHarvestingType"
          },
          "OverrideTaxLotHarvestingTypeName": {
            "type": "string",
            "description": "Override tax lot harvesting type name.",
            "nullable": true,
            "readOnly": true
          },
          "UseSpecifiedLot": {
            "type": "string",
            "description": "Specified Lot(s).",
            "nullable": true
          },
          "Price": {
            "type": "number",
            "description": "Asset price.",
            "format": "double",
            "nullable": true
          },
          "RegistrationTypeId": {
            "type": "integer",
            "description": "Registration type Id.",
            "format": "int32",
            "nullable": true
          },
          "LocationTypeId": {
            "type": "integer",
            "description": "Location type Id.",
            "format": "int32",
            "nullable": true
          },
          "Units": {
            "type": "number",
            "description": "Units",
            "format": "double",
            "nullable": true
          },
          "PrincipalCashAmount": {
            "type": "number",
            "description": "Principal cash amount.",
            "format": "double",
            "nullable": true
          },
          "IncomeCashAmount": {
            "type": "number",
            "description": "Income cash amount.",
            "format": "double",
            "nullable": true
          },
          "PrincipalInvestAmount": {
            "type": "number",
            "description": "Principal invest amount.",
            "format": "double",
            "nullable": true
          },
          "IncomeInvestAmount": {
            "type": "number",
            "description": "Income invest amount.",
            "format": "double",
            "nullable": true
          },
          "StateInvestAmount": {
            "type": "number",
            "description": "State invest amount.",
            "format": "double",
            "nullable": true
          },
          "PrincipalInventoryAmount": {
            "type": "number",
            "description": "Principal inventory amount.",
            "format": "double",
            "nullable": true
          },
          "IncomeInventoryAmount": {
            "type": "number",
            "description": "Income inventory amount.",
            "format": "double",
            "nullable": true
          },
          "TransactionNarrativeId": {
            "type": "integer",
            "description": "Transaction narrative.",
            "format": "int32",
            "nullable": true
          },
          "ToAccountTransactionNarrativeId": {
            "type": "integer",
            "description": "Transaction narrative.",
            "format": "int32",
            "nullable": true
          },
          "PaymentId": {
            "type": "integer",
            "description": "Internal unique payment Id.",
            "format": "int32",
            "nullable": true
          },
          "UseAvailableCash": {
            "type": "boolean",
            "description": "Use available cash.",
            "nullable": true
          },
          "CreatedDate": {
            "type": "string",
            "description": "Occurrance created date.",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Occurrance modified date.",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "description": "Occurrance modified by.",
            "nullable": true
          },
          "ScheduledTransaction": {
            "$ref": "#/components/schemas/ScheduledTransactionApiModel"
          }
        },
        "additionalProperties": false
      },
      "ScheduledTransactionType": {
        "enum": [
          "CashDistribution",
          "CashReceipt",
          "AssetDistribution",
          "AssetReceipt",
          "PrincipalIncomeTransfer"
        ],
        "type": "string"
      },
      "StatementReportOptionType": {
        "enum": [
          "StatementLogic",
          "AlwaysSuppress",
          "AlwaysReport"
        ],
        "type": "string"
      },
      "StateProvince": {
        "enum": [
          "Alabama",
          "Alaska",
          "AmericanSamoa",
          "Arizona",
          "Arkansas",
          "California",
          "Colorado",
          "Connecticut",
          "Delaware",
          "DistrictOfColumbia",
          "FederatedStatesOfMicronesia",
          "Florida",
          "Georgia",
          "Guam",
          "Hawaii",
          "Idaho",
          "Illinois",
          "Indiana",
          "Iowa",
          "Kansas",
          "Kentucky",
          "Louisiana",
          "Maine",
          "MarshallIslands",
          "Maryland",
          "Massachusetts",
          "Michigan",
          "Minnesota",
          "Mississippi",
          "Missouri",
          "Montana",
          "Nebraska",
          "Nevada",
          "NewHampshire",
          "NewJersey",
          "NewMexico",
          "NewYork",
          "NorthCarolina",
          "NorthDakota",
          "NorthernMarianaIslands",
          "Ohio",
          "Oklahoma",
          "Oregon",
          "Palau",
          "Pennsylvania",
          "PuertoRico",
          "RhodeIsland",
          "SouthCarolina",
          "SouthDakota",
          "Tennessee",
          "Texas",
          "Utah",
          "Vermont",
          "VirginIslands",
          "Virginia",
          "Washington",
          "WestVirginia",
          "Wisconsin",
          "Wyoming",
          "Alberta",
          "BritishColumbia",
          "Manitoba",
          "NewBrunswick",
          "NewfoundlandAndLabrador",
          "NorthwestTerritories",
          "NovaScotia",
          "Nunavut",
          "Ontario",
          "PrinceEdwardIsland",
          "Qubec",
          "Saskatchewan",
          "YukonTerritory",
          "Aguascalientes",
          "BajaCalifornia",
          "BajaCaliforniaSur",
          "Campeche",
          "Chiapas",
          "Chihuahua",
          "Coahuila",
          "Colima",
          "DistritoFederal",
          "Durango",
          "Guanajuato",
          "Guerrero",
          "Hidalgo",
          "Jalisco",
          "Mexico",
          "Michoacan",
          "Morelos",
          "Nayarit",
          "NuevoLeon",
          "Oaxaca",
          "Puebla",
          "Queretaro",
          "QuintanaRoo",
          "SanLuisPotosi",
          "Sinaloa",
          "Sonora",
          "Tabasco",
          "Tamaulipas",
          "Tlaxcala",
          "Veracruz",
          "Yucatan",
          "Zacatecas",
          "USMilitaryFL",
          "USMilitaryNY",
          "USMilitaryCA"
        ],
        "type": "string"
      },
      "StockApiModel": {
        "type": "object",
        "properties": {
          "IndustryId": {
            "type": "integer",
            "description": "Industry type.",
            "format": "int32",
            "nullable": true
          },
          "ExchangeType": {
            "$ref": "#/components/schemas/ExchangeType"
          },
          "ExchangeTypeName": {
            "type": "string",
            "description": "Exchange type name.",
            "nullable": true,
            "readOnly": true
          },
          "EarningsPerShareDiluted": {
            "type": "number",
            "description": "Earning per share diluted.",
            "format": "double",
            "nullable": true
          },
          "EarningsPerShareBasic": {
            "type": "number",
            "description": "Earning per share basic.",
            "format": "double",
            "nullable": true
          },
          "EarningsPerShareEffectiveDate": {
            "type": "string",
            "description": "Earning per share effective date.",
            "format": "date-time",
            "nullable": true
          },
          "PaymentFrequencyType": {
            "$ref": "#/components/schemas/FrequencyType"
          },
          "PaymentFrequencyTypeName": {
            "type": "string",
            "description": "Payment frequency type name.",
            "nullable": true,
            "readOnly": true
          },
          "SharesOutstanding": {
            "type": "integer",
            "description": "Share outstanding.",
            "format": "int64",
            "nullable": true
          },
          "IsIncludedIn13F": {
            "type": "boolean",
            "description": "Is included in 13F."
          },
          "IsRestrictedByRule144A": {
            "type": "boolean",
            "description": "Is restricted by rule 144 A."
          },
          "CalculatedMarketCapType": {
            "$ref": "#/components/schemas/MarketCapType"
          },
          "CalculatedMarketCapTypeName": {
            "type": "string",
            "description": "Calculated market cap type name.",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "TaskApiModel": {
        "type": "object",
        "properties": {
          "TaskId": {
            "type": "integer",
            "format": "int32"
          },
          "TaskName": {
            "type": "string",
            "nullable": true
          },
          "DateDue": {
            "type": "string",
            "format": "date-time"
          },
          "PriorityTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "PriorityName": {
            "type": "string",
            "nullable": true
          },
          "AssignedToUserGuid": {
            "type": "string",
            "format": "uuid"
          },
          "AssignedUserUsername": {
            "type": "string",
            "nullable": true
          },
          "TaskStatusTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "TaskStatusName": {
            "type": "string",
            "nullable": true
          },
          "TaskListName": {
            "type": "string",
            "nullable": true
          },
          "TaskListTypeId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "TaskListTypeName": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "DateClosed": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "AccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "AccountDisplayName": {
            "type": "string",
            "nullable": true
          },
          "AccountNumber": {
            "type": "string",
            "nullable": true
          },
          "AssetId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "AssetIssuer": {
            "type": "string",
            "nullable": true
          },
          "AssetCode": {
            "type": "string",
            "nullable": true
          },
          "IdentityRecordId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "IdentityRecordName": {
            "type": "string",
            "nullable": true
          },
          "OwnedByUserGuid": {
            "type": "string",
            "format": "uuid"
          },
          "OwnedByUsername": {
            "type": "string",
            "nullable": true
          },
          "ClosedByUserGuid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "ClosedByUsername": {
            "type": "string",
            "nullable": true
          },
          "DateOfReview": {
            "$ref": "#/components/schemas/Date"
          },
          "DismissalComment": {
            "type": "string",
            "nullable": true
          },
          "ReviewTemplateName": {
            "type": "string",
            "nullable": true
          },
          "InstitutionIdentityRecordId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "InstitutionName": {
            "type": "string",
            "nullable": true
          },
          "CreatedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Tax1099LevelType": {
        "enum": [
          "NotA1099TypeAccount",
          "NoServiceContract",
          "Premium1099WFullDetailIncludesTaxInfoLetter1099FormsAndInstruct",
          "_1099WNomineeDetailOnlyIncludes1099FormsAndInstructionsOnly",
          "_1099WNoDetailOutputIncludes1099FormsOnly",
          "BlankOutAnXYOrZ",
          "NoServiceContractWorksheetOnly"
        ],
        "type": "string"
      },
      "Tax1099RecipientType": {
        "enum": [
          "NoTaxFormGeneration",
          "AccountRecipient",
          "BeneficiaryRecipient"
        ],
        "type": "string"
      },
      "TaxationType": {
        "enum": [
          "NoTypeAvailable",
          "Agency",
          "Pooled",
          "TaxDeferred",
          "Simple",
          "SimpleTestamentary",
          "SimpleInterVivos",
          "Complex100",
          "Complex100Testamentary",
          "Complex100InterVivos",
          "Estate",
          "Grantor",
          "QualifiedFuneralTrust",
          "Complex300",
          "Complex300Testamentary",
          "Complex300InterVivos",
          "_990",
          "_990EZ",
          "_990PFNOF",
          "_990PFOF4942J3",
          "_990PFOF4942J5",
          "CharitableNonexemptTestamentary",
          "CharitableNonexemptInterVivos",
          "CharitableSplitInterestTestamentary",
          "CharitableSplitInterestInterVivos",
          "CharitableRemainderTestamentary",
          "CharitableRemainderInterVivos",
          "CharitableRemainderNetIncomeUnitrust",
          "CharitableRemainderNetIncomeUnitrustMakeup",
          "CharitableLeadTrust",
          "CharitableRemainderAnnuityTrust",
          "CharitableRemainderUnitrust",
          "CharitablePooledIncomeFund",
          "_990T",
          "Guardianship",
          "_645Election",
          "NonResidentAlien",
          "_5227",
          "CLUT5227B1",
          "CLAT",
          "CRT",
          "_990PF",
          "GrantorLead",
          "WOSimple",
          "WOComplex",
          "WComplex",
          "ReturnForNuclearDecommissioningFunds",
          "_1099R",
          "_5498",
          "_1098"
        ],
        "type": "string"
      },
      "TaxIdStatusType": {
        "enum": [
          "NotUsed",
          "Known",
          "Unknown",
          "AppliedFor"
        ],
        "type": "string"
      },
      "TaxIdToShowType": {
        "enum": [
          "DoNotShow",
          "AccountTaxId",
          "PaidToTaxId",
          "PaidForTaxId"
        ],
        "type": "string"
      },
      "TaxIdType": {
        "enum": [
          "USSocialSecurityNumber",
          "USEmployeeIdentificationNumber",
          "CanadasSocialInsuranceNumber",
          "USIndividualTaxpayerIdentificationNumber"
        ],
        "type": "string"
      },
      "TaxInterfaceType": {
        "enum": [
          "None",
          "ONESOURCE",
          "CCH"
        ],
        "type": "string"
      },
      "TaxLotHarvestingType": {
        "enum": [
          "Average",
          "FIFO",
          "LIFO",
          "HIFO",
          "HIFOLT",
          "MLMG",
          "Custom"
        ],
        "type": "string"
      },
      "TradeApiModel": {
        "type": "object",
        "properties": {
          "TradeId": {
            "type": "integer",
            "description": "Trade Id",
            "format": "int32"
          },
          "TradeBlockId": {
            "type": "integer",
            "description": "Trade Block Id",
            "format": "int32"
          },
          "TradeBlockName": {
            "type": "string",
            "description": "Trde Block Name",
            "nullable": true
          },
          "AccountId": {
            "type": "integer",
            "description": "Account Id",
            "format": "int32"
          },
          "TradeGroupKey": {
            "type": "string",
            "description": "Trade Group Key",
            "nullable": true
          },
          "AccountNumber": {
            "type": "string",
            "description": "Account Number",
            "nullable": true
          },
          "AssetId": {
            "type": "integer",
            "description": "Asset Id",
            "format": "int32"
          },
          "AssetCode": {
            "type": "string",
            "description": "Asset Id",
            "nullable": true
          },
          "OverrideTaxLotHarvestingType": {
            "$ref": "#/components/schemas/TaxLotHarvestingType"
          },
          "OverrideTaxLotHarvestingTypeName": {
            "type": "string",
            "description": "Override TaxLot Harvesting Type Name",
            "nullable": true,
            "readOnly": true
          },
          "UseSpecifiedLot": {
            "type": "string",
            "description": "Specified lots list",
            "nullable": true
          },
          "TradeType": {
            "$ref": "#/components/schemas/TradeType"
          },
          "TradeTypeName": {
            "type": "string",
            "description": "Trade Type Name",
            "nullable": true,
            "readOnly": true
          },
          "TradeDurationType": {
            "$ref": "#/components/schemas/TradeDurationType"
          },
          "TradeDurationTypeName": {
            "type": "string",
            "description": "Trade  Duration Type Name",
            "nullable": true,
            "readOnly": true
          },
          "TradePriceType": {
            "$ref": "#/components/schemas/TradePriceType"
          },
          "TradePriceTypeName": {
            "type": "string",
            "description": "Trade  Price Type Name",
            "nullable": true,
            "readOnly": true
          },
          "TradeBasisOptionType": {
            "$ref": "#/components/schemas/TradeBasisOptionType"
          },
          "TradeBasisOptionTypeName": {
            "type": "string",
            "description": "Trade  Basis Option Type Name",
            "nullable": true,
            "readOnly": true
          },
          "TradeStatusType": {
            "$ref": "#/components/schemas/TradeStatusType"
          },
          "TradeStatusTypeName": {
            "type": "string",
            "description": "Trade  Status Type Name",
            "nullable": true,
            "readOnly": true
          },
          "TradeBlockHold": {
            "type": "boolean",
            "description": "Trade Block Hold",
            "nullable": true
          },
          "TradedPriceAmount": {
            "type": "number",
            "description": "Price amount of Trade",
            "format": "double",
            "nullable": true
          },
          "DateTraded": {
            "type": "string",
            "description": "Date Traded",
            "format": "date-time",
            "nullable": true
          },
          "DateSettled": {
            "type": "string",
            "description": "Date Settled",
            "format": "date-time",
            "nullable": true
          },
          "TaxYear": {
            "type": "integer",
            "description": "Tax year",
            "format": "int32"
          },
          "ExecuteInSingleBlock": {
            "type": "boolean",
            "description": "Execeute trades in single block"
          },
          "StopPriceAmount": {
            "type": "number",
            "description": "stop price amount",
            "format": "double",
            "nullable": true
          },
          "LimitPriceAmount": {
            "type": "number",
            "description": "Limit price amount",
            "format": "double",
            "nullable": true
          },
          "UnitShares": {
            "type": "number",
            "description": "Unit Shares",
            "format": "double",
            "nullable": true
          },
          "NetAmount": {
            "type": "number",
            "description": "Net Amount",
            "format": "double",
            "nullable": true
          },
          "UseIncomeCash": {
            "type": "boolean",
            "description": "Use Income Cash"
          },
          "AccruedInterestAmount": {
            "type": "number",
            "description": "Accrued Interest Amount",
            "format": "double",
            "nullable": true
          },
          "BrokerIdentityRecordId": {
            "type": "integer",
            "description": "Broker Identity Record Id",
            "format": "int32",
            "nullable": true
          },
          "CommissionFee": {
            "type": "number",
            "description": "Commission Fee",
            "format": "double",
            "nullable": true
          },
          "SecFee": {
            "type": "number",
            "description": "Security Fee",
            "format": "double",
            "nullable": true
          },
          "OtherFee": {
            "type": "number",
            "description": "Other Fee",
            "format": "double",
            "nullable": true
          },
          "RegistrationTypeId": {
            "type": "integer",
            "description": "Registration Type Id",
            "format": "int32",
            "nullable": true
          },
          "RegistrationTypeName": {
            "type": "string",
            "description": "Registration Type Name",
            "nullable": true
          },
          "LocationTypeId": {
            "type": "integer",
            "description": "Location Type Id",
            "format": "int32",
            "nullable": true
          },
          "LocationTypeName": {
            "type": "string",
            "description": "Location Type Name",
            "nullable": true
          },
          "DivisionIdentityRecordId": {
            "type": "integer",
            "description": "Division Identity Record Id",
            "format": "int32",
            "nullable": true
          },
          "TransactionNarrativeId": {
            "type": "integer",
            "description": "Transaction Narrative Id",
            "format": "int32",
            "nullable": true
          },
          "Narrative": {
            "type": "string",
            "description": "Transaction Narrative",
            "nullable": true
          },
          "ProcessingExceptionType": {
            "$ref": "#/components/schemas/ProcessingExceptionType"
          },
          "ProcessingExceptionTypeName": {
            "type": "string",
            "description": "Processing Exception Type Name",
            "nullable": true,
            "readOnly": true
          },
          "TradeProposalId": {
            "type": "integer",
            "description": "Trade Proposal Id",
            "format": "int32",
            "nullable": true
          },
          "TradeProposalName": {
            "type": "string",
            "description": "Trade Proposal Name",
            "nullable": true
          },
          "TradeProposalSourceType": {
            "$ref": "#/components/schemas/TradeProposalSourceType"
          },
          "TradeProposalSourceTypeName": {
            "type": "string",
            "description": "Trade Proposal Source Type Name",
            "nullable": true,
            "readOnly": true
          },
          "TradeProposalStatusType": {
            "$ref": "#/components/schemas/TradeProposalStatusType"
          },
          "TradeProposalStatusTypeName": {
            "type": "string",
            "description": "Trade Proposal Status Type Name",
            "nullable": true,
            "readOnly": true
          },
          "CreatedDate": {
            "type": "string",
            "description": "Trade Created Date",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Trade Last modified Date",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "description": "Trade Modified By",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TradeBasisOptionType": {
        "enum": [
          "Cash",
          "Shares"
        ],
        "type": "string"
      },
      "TradeBlockApiModel": {
        "type": "object",
        "properties": {
          "TradeBlockId": {
            "type": "integer",
            "description": "Trade Block Id",
            "format": "int32"
          },
          "AssetId": {
            "type": "integer",
            "description": "Asset Id",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Trade Block Name",
            "nullable": true
          },
          "IsManualProcess": {
            "type": "boolean",
            "description": "Is Manual Process"
          },
          "IsSweep": {
            "type": "boolean",
            "description": "Is Sweep"
          },
          "TradeType": {
            "$ref": "#/components/schemas/TradeType"
          },
          "TradeTypeName": {
            "type": "string",
            "description": "Trade type name.",
            "nullable": true,
            "readOnly": true
          },
          "TradeDurationType": {
            "$ref": "#/components/schemas/TradeDurationType"
          },
          "TradeDurationTypeName": {
            "type": "string",
            "description": "Trade duration type name.",
            "nullable": true,
            "readOnly": true
          },
          "TradePriceType": {
            "$ref": "#/components/schemas/TradePriceType"
          },
          "TradePriceTypeName": {
            "type": "string",
            "description": "Trade price type name.",
            "nullable": true,
            "readOnly": true
          },
          "TradeBasisOptionType": {
            "$ref": "#/components/schemas/TradeBasisOptionType"
          },
          "TradeBasisOptionTypeName": {
            "type": "string",
            "description": "Trade basis option type name.",
            "nullable": true,
            "readOnly": true
          },
          "TradeStatusType": {
            "$ref": "#/components/schemas/TradeStatusType"
          },
          "TradeStatusTypeName": {
            "type": "string",
            "description": "Trade status type name.",
            "nullable": true,
            "readOnly": true
          },
          "DateTraded": {
            "type": "string",
            "description": "Date Traded",
            "format": "date-time",
            "nullable": true
          },
          "DateSettled": {
            "type": "string",
            "description": "Date Settled",
            "format": "date-time",
            "nullable": true
          },
          "TradedPriceAmount": {
            "type": "number",
            "description": "Traded Price Amount",
            "format": "double",
            "nullable": true
          },
          "StopPriceAmount": {
            "type": "number",
            "description": "Stop Price Amount",
            "format": "double",
            "nullable": true
          },
          "LimitPriceAmount": {
            "type": "number",
            "description": "Limit Price Amount",
            "format": "double",
            "nullable": true
          },
          "TotalUnitShares": {
            "type": "number",
            "description": "Total Unit Shares",
            "format": "double",
            "nullable": true
          },
          "TotalNetAmount": {
            "type": "number",
            "description": "Total Net Amount",
            "format": "double",
            "nullable": true
          },
          "OriginalUnitShares": {
            "type": "number",
            "description": "Original Unit Shares",
            "format": "double",
            "nullable": true
          },
          "AccruedInterestAmount": {
            "type": "number",
            "description": "Accrued Interest Amount",
            "format": "double",
            "nullable": true
          },
          "BrokerIdentityRecordId": {
            "type": "integer",
            "description": "Broker Identity Record Id",
            "format": "int32",
            "nullable": true
          },
          "CommissionFee": {
            "type": "number",
            "description": "Commission Fee",
            "format": "double",
            "nullable": true
          },
          "SecFee": {
            "type": "number",
            "description": "Sec Fee",
            "format": "double",
            "nullable": true
          },
          "OtherFee": {
            "type": "number",
            "description": "Other Fee",
            "format": "double",
            "nullable": true
          },
          "CalculatedCommissionFee": {
            "type": "number",
            "description": "Calculated Commission Fee",
            "format": "double",
            "nullable": true
          },
          "RegistrationTypeId": {
            "type": "integer",
            "description": "Registration Type Id",
            "format": "int32",
            "nullable": true
          },
          "LocationTypeId": {
            "type": "integer",
            "description": "Location Type Id",
            "format": "int32",
            "nullable": true
          },
          "DivisionIdentityRecordId": {
            "type": "integer",
            "description": "Division Identity Record Id",
            "format": "int32",
            "nullable": true
          },
          "Hold": {
            "type": "boolean",
            "description": "Hold"
          },
          "ReallocatedFromTradeBlockId": {
            "type": "integer",
            "description": "Reallocated From Trade Block unique identifier",
            "format": "int32",
            "nullable": true
          },
          "Comments": {
            "type": "string",
            "description": "Comments",
            "nullable": true
          },
          "NewMoneyCommissionEligible": {
            "type": "boolean",
            "description": "New Money Commission Eligable"
          },
          "CreatedDate": {
            "type": "string",
            "description": "Trade Block Created Date",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Trade Block Modified Date",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "description": "Trade Block Modified By",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TradeDurationType": {
        "enum": [
          "GoodUntilCanceled",
          "EndOfDay"
        ],
        "type": "string"
      },
      "TradePriceType": {
        "enum": [
          "Market",
          "Limit",
          "Stop",
          "StopLimit"
        ],
        "type": "string"
      },
      "TradeProposalSourceType": {
        "enum": [
          "Manual",
          "Modeling",
          "InvestmentProposal"
        ],
        "type": "string"
      },
      "TradeProposalStatusType": {
        "enum": [
          "WorkInProgress",
          "Proposed",
          "Approved"
        ],
        "type": "string"
      },
      "TradeStatusType": {
        "enum": [
          "Proposed",
          "PendingApproval",
          "Approved",
          "Ordered",
          "ExecuteAccepted",
          "Filled",
          "TradeAffirmed",
          "Released",
          "CancelIssued",
          "Canceled"
        ],
        "type": "string"
      },
      "TradeType": {
        "enum": [
          "Buy",
          "Sell",
          "SellShort"
        ],
        "type": "string"
      },
      "TransactionApiModel": {
        "type": "object",
        "properties": {
          "TransactionHistoryId": {
            "type": "integer",
            "description": "Internal unique transaction history Id.",
            "format": "int32"
          },
          "TransactionCategoryId": {
            "type": "integer",
            "description": "Transaction category id.",
            "format": "int32"
          },
          "TransactionCategoryDescription": {
            "type": "string",
            "description": "Transaction Category Description.",
            "nullable": true
          },
          "TransactionBatchId": {
            "type": "integer",
            "description": "Transaction batch Id.",
            "format": "int32",
            "nullable": true
          },
          "TransactionBatchName": {
            "type": "string",
            "description": "Transaction Batch Name.",
            "nullable": true
          },
          "SourceTransactionReferenceNumber": {
            "type": "string",
            "description": "Source transaction reference number.",
            "nullable": true
          },
          "AccountId": {
            "type": "integer",
            "description": "Internal unique account Id.",
            "format": "int32"
          },
          "AccountNumber": {
            "type": "string",
            "description": "Account number.",
            "nullable": true
          },
          "LotId": {
            "type": "integer",
            "description": "Internal unique lot Id.",
            "format": "int32",
            "nullable": true
          },
          "LotNumber": {
            "type": "integer",
            "description": "Lot number.",
            "format": "int32",
            "nullable": true
          },
          "AssetId": {
            "type": "integer",
            "description": "Internal unique asset Id.",
            "format": "int32",
            "nullable": true
          },
          "AssetCode": {
            "type": "string",
            "description": "CUSIP",
            "nullable": true
          },
          "Price": {
            "type": "number",
            "description": "Asset price.",
            "format": "double",
            "nullable": true
          },
          "DateTraded": {
            "type": "string",
            "description": "Date traded.",
            "format": "date-time",
            "nullable": true
          },
          "DateSettled": {
            "type": "string",
            "description": "Date settled.",
            "format": "date-time",
            "nullable": true
          },
          "DateStatementEffective": {
            "type": "string",
            "description": "Date statement effective.",
            "format": "date-time",
            "nullable": true
          },
          "TaxYear": {
            "type": "integer",
            "description": "Tax year.",
            "format": "int32"
          },
          "Units": {
            "type": "number",
            "description": "Units",
            "format": "double"
          },
          "PrincipalCashAmount": {
            "type": "number",
            "description": "Principal cash amount.",
            "format": "double"
          },
          "IncomeCashAmount": {
            "type": "number",
            "description": "Income cash amount.",
            "format": "double"
          },
          "PrincipalInvestAmount": {
            "type": "number",
            "description": "Principal invest amount.",
            "format": "double"
          },
          "IncomeInvestAmount": {
            "type": "number",
            "description": "Income invest amount.",
            "format": "double"
          },
          "StateInvestAmount": {
            "type": "number",
            "description": "State invest amount.",
            "format": "double"
          },
          "PrincipalInventoryAmount": {
            "type": "number",
            "description": "Principal inventory amount.",
            "format": "double"
          },
          "IncomeInventoryAmount": {
            "type": "number",
            "description": "Income inventory amount.",
            "format": "double"
          },
          "TaxableAmount": {
            "type": "number",
            "description": "Taxable amount.",
            "format": "double",
            "nullable": true
          },
          "AccruedInterestAmount": {
            "type": "number",
            "description": "Accrued interest amount.",
            "format": "double",
            "nullable": true
          },
          "RegistrationTypeId": {
            "type": "integer",
            "description": "Registration type Id.",
            "format": "int32",
            "nullable": true
          },
          "LocationTypeId": {
            "type": "integer",
            "description": "Location type Id.",
            "format": "int32",
            "nullable": true
          },
          "StatementReportOptionType": {
            "$ref": "#/components/schemas/StatementReportOptionType"
          },
          "StatementReportOptionTypeName": {
            "type": "string",
            "description": "Statement report option type name.",
            "nullable": true,
            "readOnly": true
          },
          "IsReversal": {
            "type": "boolean",
            "description": "Is reversal transaction."
          },
          "BalanceAdjustmentOverride": {
            "type": "boolean",
            "description": "Is Balance Adjustment Override."
          },
          "ReversedByTransactionHistoryId": {
            "type": "integer",
            "description": "Reversed by transaction history Id.",
            "format": "int32",
            "nullable": true
          },
          "TransactionId": {
            "type": "integer",
            "description": "Transaction Id.",
            "format": "int32",
            "nullable": true
          },
          "MapOrderId": {
            "type": "integer",
            "description": "MAP Order Id.",
            "format": "int32",
            "nullable": true
          },
          "ScheduledTransactionOccurrenceId": {
            "type": "integer",
            "description": "Scheduled transaction occurrence Id.",
            "format": "int32",
            "nullable": true
          },
          "TransactionNarrative": {
            "type": "string",
            "description": "Transaction narrative.",
            "nullable": true
          },
          "PostingErrors": {
            "type": "string",
            "description": "Posting Errors.",
            "nullable": true
          },
          "TradingFeeOverRide": {
            "type": "boolean",
            "description": "Trading Fee OverRide"
          },
          "CreatedDate": {
            "type": "string",
            "description": "Transaction created date.",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Transaction modified date.",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "description": "Transaction modified by.",
            "nullable": true
          },
          "UseSpecifiedLot": {
            "type": "string",
            "description": "Specified Lot(s).",
            "nullable": true
          },
          "Payment": {
            "$ref": "#/components/schemas/TransactionHistoryPaymentApiModel"
          },
          "Trade": {
            "$ref": "#/components/schemas/TransactionHistoryTradeApiModel"
          },
          "Fee": {
            "$ref": "#/components/schemas/FeeApiModel"
          }
        },
        "additionalProperties": false
      },
      "TransactionBatchApiModel": {
        "type": "object",
        "properties": {
          "TransactionBatchId": {
            "type": "integer",
            "description": "Internal unique Cheetah Id for Transaction batch",
            "format": "int32"
          },
          "InstitutionIdentityRecordId": {
            "type": "integer",
            "description": "Institution Identity Record Id",
            "format": "int32"
          },
          "Code": {
            "type": "string",
            "description": "Transaction batch code",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "description": "Transaction batch name",
            "nullable": true
          },
          "TransactionStatusType": {
            "$ref": "#/components/schemas/TransactionStatusType"
          },
          "IsForError": {
            "type": "boolean",
            "description": "Is for error"
          },
          "CreatedByUserGuid": {
            "type": "string",
            "description": "Unique id of user creating transaction batch",
            "nullable": true
          },
          "PostedByUserGuid": {
            "type": "string",
            "description": "Unique id of user posting transaction batch",
            "nullable": true
          },
          "DateProcessed": {
            "type": "string",
            "description": "Date processed",
            "nullable": true
          },
          "CreatedDate": {
            "type": "string",
            "description": "Date created",
            "nullable": true
          },
          "ModifiedDate": {
            "type": "string",
            "description": "Modified date",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "description": "Username of user modifying user",
            "nullable": true
          },
          "Errors": {
            "type": "string",
            "description": "Processing errors",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionHistoryPaymentApiModel": {
        "type": "object",
        "properties": {
          "PaymentId": {
            "type": "integer",
            "description": "Internal unique payment Id.",
            "format": "int32"
          },
          "PaymentType": {
            "$ref": "#/components/schemas/PaymentType"
          },
          "PaymentTypeName": {
            "type": "string",
            "description": "Payment type name.",
            "nullable": true,
            "readOnly": true
          },
          "PaidForIdentityRecordId": {
            "type": "integer",
            "description": "Internal unique paid for identity record Id.",
            "format": "int32"
          },
          "PaidToIdentityRecordId": {
            "type": "integer",
            "description": "Internal unique paid to identity record Id.",
            "format": "int32"
          },
          "IRADistributionCode": {
            "type": "string",
            "description": "IRA Distribution code (combined 1 or 2 codes)",
            "nullable": true
          },
          "Memo": {
            "type": "string",
            "description": "Memo.",
            "nullable": true
          },
          "PaymentRegisters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentRegister"
            },
            "description": "List of Payment Registers",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionHistoryTradeApiModel": {
        "type": "object",
        "properties": {
          "TradeId": {
            "type": "integer",
            "description": "Internal unique trade Id.",
            "format": "int32"
          },
          "TradeBlockId": {
            "type": "integer",
            "description": "Internal unique trade block Id.",
            "format": "int32"
          },
          "TradeType": {
            "$ref": "#/components/schemas/TradeType"
          },
          "TradeTypeName": {
            "type": "string",
            "description": "Trade type name.",
            "nullable": true,
            "readOnly": true
          },
          "TradeDurationType": {
            "$ref": "#/components/schemas/TradeDurationType"
          },
          "TradeDurationTypeName": {
            "type": "string",
            "description": "Trade duration type name.",
            "nullable": true,
            "readOnly": true
          },
          "TradePriceType": {
            "$ref": "#/components/schemas/TradePriceType"
          },
          "TradePriceTypeName": {
            "type": "string",
            "description": "Trade price type name.",
            "nullable": true,
            "readOnly": true
          },
          "TradeBasisOptionType": {
            "$ref": "#/components/schemas/TradeBasisOptionType"
          },
          "TradeBasisOptionTypeName": {
            "type": "string",
            "description": "Trade basis option type name.",
            "nullable": true,
            "readOnly": true
          },
          "TradeStatusType": {
            "$ref": "#/components/schemas/TradeStatusType"
          },
          "TradeStatusTypeName": {
            "type": "string",
            "description": "Trade status type name.",
            "nullable": true,
            "readOnly": true
          },
          "StopPriceAmount": {
            "type": "number",
            "description": "Stop price amount.",
            "format": "double",
            "nullable": true
          },
          "LimitPriceAmount": {
            "type": "number",
            "description": "Limit price amount.",
            "format": "double",
            "nullable": true
          },
          "UnitShares": {
            "type": "number",
            "description": "Unit shares.",
            "format": "double",
            "nullable": true
          },
          "NetAmount": {
            "type": "number",
            "description": "Net amount.",
            "format": "double",
            "nullable": true
          },
          "AccruedInterestAmount": {
            "type": "number",
            "description": "Accrued interest amount.",
            "format": "double",
            "nullable": true
          },
          "BrokerIdentityRecordId": {
            "type": "integer",
            "description": "Internal unique broker identity record Id.",
            "format": "int32",
            "nullable": true
          },
          "BrokerDtcId": {
            "type": "string",
            "description": "Broker DTC Id.",
            "nullable": true
          },
          "CommissionFee": {
            "type": "number",
            "description": "Commission fee.",
            "format": "double",
            "nullable": true
          },
          "SecFee": {
            "type": "number",
            "description": "Sec fee.",
            "format": "double",
            "nullable": true
          },
          "OtherFee": {
            "type": "number",
            "description": "Other fee.",
            "format": "double",
            "nullable": true
          },
          "CalculatedCommissionFee": {
            "type": "number",
            "description": "Calculated Commission Fee.",
            "format": "double",
            "nullable": true
          },
          "DivisionIdentityRecordId": {
            "type": "integer",
            "description": "Internal unique division identity record Id.",
            "format": "int32",
            "nullable": true
          },
          "ProcessingExceptionType": {
            "$ref": "#/components/schemas/ProcessingExceptionType"
          },
          "ProcessingExceptionTypeName": {
            "type": "string",
            "description": "Processing exception type name.",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "TransactionImportSetupApiResponse": {
        "type": "object",
        "properties": {
          "InterfaceMasterTypeId": {
            "type": "integer",
            "description": "InterfaceMasterTypeId",
            "format": "int32"
          },
          "InterfaceTypeId": {
            "type": "integer",
            "description": "InterfaceTypeId",
            "format": "int32"
          },
          "IsActive": {
            "type": "boolean",
            "description": "Is Active."
          },
          "IncomeCashSign": {
            "type": "integer",
            "description": "Income Cash Sign.",
            "format": "int32"
          },
          "IncomeInventorySign": {
            "type": "integer",
            "description": "Income Inventory Sign.",
            "format": "int32"
          },
          "IncomeInvestSign": {
            "type": "integer",
            "description": "Income Invest Sign.",
            "format": "int32"
          },
          "PrincipalCashSign": {
            "type": "integer",
            "description": "Principal Cash Sign.",
            "format": "int32"
          },
          "PrincipalInventorySign": {
            "type": "integer",
            "description": "Principal Inventory Sign.",
            "format": "int32"
          },
          "PrincipalInvestSign": {
            "type": "integer",
            "description": "Principal Invest Sign.",
            "format": "int32"
          },
          "StateInvestSign": {
            "type": "integer",
            "description": "State Invest Sign.",
            "format": "int32"
          },
          "TradeDateRequiredTypeId": {
            "type": "integer",
            "description": "Trade Data Required Type Id.",
            "format": "int32"
          },
          "TransactionCategoryId": {
            "type": "integer",
            "description": "Transaction Category Id.",
            "format": "int32"
          },
          "UnitsSign": {
            "type": "integer",
            "description": "Units Sign.",
            "format": "int32"
          },
          "PriceRequiredTypeId": {
            "type": "integer",
            "description": "Price Required Type Id.",
            "format": "int32",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "Description.",
            "nullable": true
          },
          "ProviderTransactionCode": {
            "type": "string",
            "description": "Provider Transaction Code.",
            "nullable": true
          },
          "PurchaseSaleTypeCode": {
            "type": "string",
            "description": "Purchase Sale Type Code.",
            "nullable": true
          },
          "TransactionCategoryCode": {
            "type": "string",
            "description": "Transaction Category Code.",
            "nullable": true
          },
          "PurchaseSaleTypeId": {
            "type": "integer",
            "description": "Purchase Sale Type Id.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Transaction Import Setup Api Response"
      },
      "TransactionStatusType": {
        "enum": [
          "Proposed",
          "PendingApproval",
          "Approved",
          "Locked",
          "Ready",
          "Processed",
          "Canceled"
        ],
        "type": "string"
      }
    }
  }
}